
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014048  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dc0  080142e8  080142e8  000242e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080170a8  080170a8  000270a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080170ac  080170ac  000270ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  080170b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00008470  24000098  08017148  00030098  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24008508  08017148  00038508  2**0
                  ALLOC
  8 .lwip_sec     000419d0  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00050069  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000084d9  00000000  00000000  0008012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002238  00000000  00000000  00088608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000020d8  00000000  00000000  0008a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000112a2  00000000  00000000  0008c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033617  00000000  00000000  0009dbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f5ff  00000000  00000000  000d11d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002507d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000095f4  00000000  00000000  00250824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080142d0 	.word	0x080142d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	080142d0 	.word	0x080142d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fa05 	bl	8000794 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b3b      	ldr	r3, [pc, #236]	; (8000478 <main+0xf8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b35      	ldr	r3, [pc, #212]	; (8000478 <main+0xf8>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b30      	ldr	r3, [pc, #192]	; (8000478 <main+0xf8>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a2f      	ldr	r2, [pc, #188]	; (8000478 <main+0xf8>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b29      	ldr	r3, [pc, #164]	; (8000478 <main+0xf8>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b26      	ldr	r3, [pc, #152]	; (8000478 <main+0xf8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <main+0xf8>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4918      	ldr	r1, [pc, #96]	; (8000478 <main+0xf8>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <main+0xf8>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <main+0xf8>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fd8a 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f818 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 f892 	bl	8000580 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800045c:	f005 f8b2 	bl	80055c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000460:	4a06      	ldr	r2, [pc, #24]	; (800047c <main+0xfc>)
 8000462:	2100      	movs	r1, #0
 8000464:	4806      	ldr	r0, [pc, #24]	; (8000480 <main+0x100>)
 8000466:	f005 f90c 	bl	8005682 <osThreadNew>
 800046a:	4603      	mov	r3, r0
 800046c:	4a05      	ldr	r2, [pc, #20]	; (8000484 <main+0x104>)
 800046e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000470:	f005 f8cc 	bl	800560c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000474:	e7fe      	b.n	8000474 <main+0xf4>
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00
 800047c:	08016df8 	.word	0x08016df8
 8000480:	08000781 	.word	0x08000781
 8000484:	24005168 	.word	0x24005168

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b09c      	sub	sp, #112	; 0x70
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000492:	224c      	movs	r2, #76	; 0x4c
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f012 fef8 	bl	801328c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2220      	movs	r2, #32
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f012 fef2 	bl	801328c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a8:	2002      	movs	r0, #2
 80004aa:	f002 ffab 	bl	8003404 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <SystemClock_Config+0xf0>)
 80004b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b6:	4a30      	ldr	r2, [pc, #192]	; (8000578 <SystemClock_Config+0xf0>)
 80004b8:	f023 0301 	bic.w	r3, r3, #1
 80004bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004be:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <SystemClock_Config+0xf0>)
 80004c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <SystemClock_Config+0xf4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a2b      	ldr	r2, [pc, #172]	; (800057c <SystemClock_Config+0xf4>)
 80004ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b29      	ldr	r3, [pc, #164]	; (800057c <SystemClock_Config+0xf4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e0:	bf00      	nop
 80004e2:	4b26      	ldr	r3, [pc, #152]	; (800057c <SystemClock_Config+0xf4>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ee:	d1f8      	bne.n	80004e2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f0:	2301      	movs	r3, #1
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2302      	movs	r3, #2
 80004fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004fe:	2302      	movs	r3, #2
 8000500:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000502:	2304      	movs	r3, #4
 8000504:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000506:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800050a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000510:	2302      	movs	r3, #2
 8000512:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000514:	2302      	movs	r3, #2
 8000516:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000518:	2304      	movs	r3, #4
 800051a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800051c:	2300      	movs	r3, #0
 800051e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000528:	4618      	mov	r0, r3
 800052a:	f002 ffa5 	bl	8003478 <HAL_RCC_OscConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000534:	f000 f97e 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	233f      	movs	r3, #63	; 0x3f
 800053a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	2303      	movs	r3, #3
 800053e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000544:	2308      	movs	r3, #8
 8000546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800054c:	2340      	movs	r3, #64	; 0x40
 800054e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000554:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000556:	2340      	movs	r3, #64	; 0x40
 8000558:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2102      	movs	r1, #2
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fb9a 	bl	8003c98 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800056a:	f000 f963 	bl	8000834 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3770      	adds	r7, #112	; 0x70
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	58000400 	.word	0x58000400
 800057c:	58024800 	.word	0x58024800

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	; 0x30
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b72      	ldr	r3, [pc, #456]	; (8000760 <MX_GPIO_Init+0x1e0>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800059c:	4a70      	ldr	r2, [pc, #448]	; (8000760 <MX_GPIO_Init+0x1e0>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a6:	4b6e      	ldr	r3, [pc, #440]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	61bb      	str	r3, [r7, #24]
 80005b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b4:	4b6a      	ldr	r3, [pc, #424]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ba:	4a69      	ldr	r2, [pc, #420]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c4:	4b66      	ldr	r3, [pc, #408]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b63      	ldr	r3, [pc, #396]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d8:	4a61      	ldr	r2, [pc, #388]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e2:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f6:	4a5a      	ldr	r2, [pc, #360]	; (8000760 <MX_GPIO_Init+0x1e0>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000600:	4b57      	ldr	r3, [pc, #348]	; (8000760 <MX_GPIO_Init+0x1e0>)
 8000602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b54      	ldr	r3, [pc, #336]	; (8000760 <MX_GPIO_Init+0x1e0>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	4a52      	ldr	r2, [pc, #328]	; (8000760 <MX_GPIO_Init+0x1e0>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <MX_GPIO_Init+0x1e0>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <MX_GPIO_Init+0x1e0>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000632:	4a4b      	ldr	r2, [pc, #300]	; (8000760 <MX_GPIO_Init+0x1e0>)
 8000634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800063c:	4b48      	ldr	r3, [pc, #288]	; (8000760 <MX_GPIO_Init+0x1e0>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	4b45      	ldr	r3, [pc, #276]	; (8000760 <MX_GPIO_Init+0x1e0>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000650:	4a43      	ldr	r2, [pc, #268]	; (8000760 <MX_GPIO_Init+0x1e0>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <MX_GPIO_Init+0x1e0>)
 800065c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000660:	f003 0310 	and.w	r3, r3, #16
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f244 0101 	movw	r1, #16385	; 0x4001
 800066e:	483d      	ldr	r0, [pc, #244]	; (8000764 <MX_GPIO_Init+0x1e4>)
 8000670:	f002 feae 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067a:	483b      	ldr	r0, [pc, #236]	; (8000768 <MX_GPIO_Init+0x1e8>)
 800067c:	f002 fea8 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2102      	movs	r1, #2
 8000684:	4839      	ldr	r0, [pc, #228]	; (800076c <MX_GPIO_Init+0x1ec>)
 8000686:	f002 fea3 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	4834      	ldr	r0, [pc, #208]	; (8000770 <MX_GPIO_Init+0x1f0>)
 80006a0:	f002 fce6 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80006a4:	f244 0301 	movw	r3, #16385	; 0x4001
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	4829      	ldr	r0, [pc, #164]	; (8000764 <MX_GPIO_Init+0x1e4>)
 80006be:	f002 fcd7 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80006c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006d4:	2307      	movs	r3, #7
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4822      	ldr	r0, [pc, #136]	; (8000768 <MX_GPIO_Init+0x1e8>)
 80006e0:	f002 fcc6 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	481a      	ldr	r0, [pc, #104]	; (8000768 <MX_GPIO_Init+0x1e8>)
 80006fe:	f002 fcb7 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_GPIO_Init+0x1f4>)
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_GPIO_Init+0x1f8>)
 8000716:	f002 fcab 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800071a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800072c:	230a      	movs	r3, #10
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4811      	ldr	r0, [pc, #68]	; (800077c <MX_GPIO_Init+0x1fc>)
 8000738:	f002 fc9a 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_GPIO_Init+0x1ec>)
 8000754:	f002 fc8c 	bl	8003070 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3730      	adds	r7, #48	; 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58024400 	.word	0x58024400
 8000764:	58020400 	.word	0x58020400
 8000768:	58020c00 	.word	0x58020c00
 800076c:	58021000 	.word	0x58021000
 8000770:	58020800 	.word	0x58020800
 8000774:	11110000 	.word	0x11110000
 8000778:	58021800 	.word	0x58021800
 800077c:	58020000 	.word	0x58020000

08000780 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000788:	f004 f910 	bl	80049ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f005 f80b 	bl	80057a8 <osDelay>
 8000792:	e7fb      	b.n	800078c <StartDefaultTask+0xc>

08000794 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007a6:	f000 fd3b 	bl	8001220 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MPU_Config+0x78>)
 80007b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80007b6:	230e      	movs	r3, #14
 80007b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80007be:	2301      	movs	r3, #1
 80007c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80007c2:	2303      	movs	r3, #3
 80007c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fd59 	bl	8001290 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007de:	2301      	movs	r3, #1
 80007e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80007e6:	2307      	movs	r3, #7
 80007e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f6:	463b      	mov	r3, r7
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fd49 	bl	8001290 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007fe:	2004      	movs	r0, #4
 8000800:	f000 fd26 	bl	8001250 <HAL_MPU_Enable>

}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	30040000 	.word	0x30040000

08000810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d101      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000822:	f000 fbdd 	bl	8000fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40001000 	.word	0x40001000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x38>)
 8000848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_MspInit+0x38>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x38>)
 8000858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800085c:	f003 0302 	and.w	r3, r3, #2
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	210f      	movs	r1, #15
 8000868:	f06f 0001 	mvn.w	r0, #1
 800086c:	f000 fcb0 	bl	80011d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58024400 	.word	0x58024400

0800087c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b090      	sub	sp, #64	; 0x40
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b0f      	cmp	r3, #15
 8000888:	d827      	bhi.n	80008da <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800088a:	2200      	movs	r2, #0
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	2036      	movs	r0, #54	; 0x36
 8000890:	f000 fc9e 	bl	80011d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000894:	2036      	movs	r0, #54	; 0x36
 8000896:	f000 fcb5 	bl	8001204 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800089a:	4a29      	ldr	r2, [pc, #164]	; (8000940 <HAL_InitTick+0xc4>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <HAL_InitTick+0xc8>)
 80008a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008a6:	4a27      	ldr	r2, [pc, #156]	; (8000944 <HAL_InitTick+0xc8>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <HAL_InitTick+0xc8>)
 80008b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008be:	f107 0210 	add.w	r2, r7, #16
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fd5b 	bl	8004384 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d106      	bne.n	80008e6 <HAL_InitTick+0x6a>
 80008d8:	e001      	b.n	80008de <HAL_InitTick+0x62>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e02b      	b.n	8000936 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008de:	f003 fd3b 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 80008e2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80008e4:	e004      	b.n	80008f0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008e6:	f003 fd37 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 80008ea:	4603      	mov	r3, r0
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <HAL_InitTick+0xcc>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	0c9b      	lsrs	r3, r3, #18
 80008fa:	3b01      	subs	r3, #1
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_InitTick+0xd0>)
 8000900:	4a13      	ldr	r2, [pc, #76]	; (8000950 <HAL_InitTick+0xd4>)
 8000902:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0xd0>)
 8000906:	f240 32e7 	movw	r2, #999	; 0x3e7
 800090a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800090c:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_InitTick+0xd0>)
 800090e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000910:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_InitTick+0xd0>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_InitTick+0xd0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800091e:	480b      	ldr	r0, [pc, #44]	; (800094c <HAL_InitTick+0xd0>)
 8000920:	f003 fd72 	bl	8004408 <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d104      	bne.n	8000934 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <HAL_InitTick+0xd0>)
 800092c:	f003 fdce 	bl	80044cc <HAL_TIM_Base_Start_IT>
 8000930:	4603      	mov	r3, r0
 8000932:	e000      	b.n	8000936 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
}
 8000936:	4618      	mov	r0, r3
 8000938:	3740      	adds	r7, #64	; 0x40
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24000008 	.word	0x24000008
 8000944:	58024400 	.word	0x58024400
 8000948:	431bde83 	.word	0x431bde83
 800094c:	2400516c 	.word	0x2400516c
 8000950:	40001000 	.word	0x40001000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM6_DAC_IRQHandler+0x10>)
 8000986:	f003 fe11 	bl	80045ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2400516c 	.word	0x2400516c

08000994 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <ETH_IRQHandler+0x10>)
 800099a:	f001 f997 	bl	8001ccc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	24005318 	.word	0x24005318

080009a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	return 1;
 80009ac:	2301      	movs	r3, #1
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_kill>:

int _kill(int pid, int sig)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <_kill+0x20>)
 80009c4:	2216      	movs	r2, #22
 80009c6:	601a      	str	r2, [r3, #0]
	return -1;
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	240084f4 	.word	0x240084f4

080009dc <_exit>:

void _exit (int status)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ffe5 	bl	80009b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009ee:	e7fe      	b.n	80009ee <_exit+0x12>

080009f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	e00a      	b.n	8000a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a02:	f3af 8000 	nop.w
 8000a06:	4601      	mov	r1, r0
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf0      	blt.n	8000a02 <_read+0x12>
	}

return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e009      	b.n	8000a50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf1      	blt.n	8000a3c <_write+0x12>
	}
	return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_close>:

int _close(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	return -1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_isatty>:

int _isatty(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d205      	bcs.n	8000b08 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <_sbrk+0x6c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	24080000 	.word	0x24080000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	240000b4 	.word	0x240000b4
 8000b34:	24008508 	.word	0x24008508
 8000b38:	240084f4 	.word	0x240084f4

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b40:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <SystemInit+0xec>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a38      	ldr	r2, [pc, #224]	; (8000c28 <SystemInit+0xec>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b50:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <SystemInit+0xf0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	2b06      	cmp	r3, #6
 8000b5a:	d807      	bhi.n	8000b6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <SystemInit+0xf0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f023 030f 	bic.w	r3, r3, #15
 8000b64:	4a31      	ldr	r2, [pc, #196]	; (8000c2c <SystemInit+0xf0>)
 8000b66:	f043 0307 	orr.w	r3, r3, #7
 8000b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <SystemInit+0xf4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <SystemInit+0xf4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <SystemInit+0xf4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <SystemInit+0xf4>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	492b      	ldr	r1, [pc, #172]	; (8000c30 <SystemInit+0xf4>)
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <SystemInit+0xf8>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b8a:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <SystemInit+0xf0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <SystemInit+0xf0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f023 030f 	bic.w	r3, r3, #15
 8000b9e:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <SystemInit+0xf0>)
 8000ba0:	f043 0307 	orr.w	r3, r3, #7
 8000ba4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <SystemInit+0xf4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <SystemInit+0xf4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <SystemInit+0xf4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <SystemInit+0xf4>)
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <SystemInit+0xfc>)
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <SystemInit+0xf4>)
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <SystemInit+0x100>)
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <SystemInit+0xf4>)
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <SystemInit+0x104>)
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <SystemInit+0xf4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <SystemInit+0xf4>)
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <SystemInit+0x104>)
 8000bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <SystemInit+0xf4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <SystemInit+0xf4>)
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <SystemInit+0x104>)
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <SystemInit+0xf4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <SystemInit+0xf4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <SystemInit+0xf4>)
 8000bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <SystemInit+0xf4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <SystemInit+0x108>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <SystemInit+0x10c>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c06:	d202      	bcs.n	8000c0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <SystemInit+0x110>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <SystemInit+0x114>)
 8000c10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c14:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SystemInit+0xec>)
 8000c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00
 8000c2c:	52002000 	.word	0x52002000
 8000c30:	58024400 	.word	0x58024400
 8000c34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c38:	02020200 	.word	0x02020200
 8000c3c:	01ff0000 	.word	0x01ff0000
 8000c40:	01010280 	.word	0x01010280
 8000c44:	5c001000 	.word	0x5c001000
 8000c48:	ffff0000 	.word	0xffff0000
 8000c4c:	51008108 	.word	0x51008108
 8000c50:	52004000 	.word	0x52004000

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c58:	f7ff ff70 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	; (8000c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f012 fac3 	bl	801320c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fb7b 	bl	8000380 <main>
  bx  lr
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c94:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000c98:	080170b0 	.word	0x080170b0
  ldr r2, =_sbss
 8000c9c:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000ca0:	24008508 	.word	0x24008508

08000ca4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC3_IRQHandler>

08000ca6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00b      	beq.n	8000cce <LAN8742_RegisterBusIO+0x28>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <LAN8742_RegisterBusIO+0x28>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <LAN8742_RegisterBusIO+0x28>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e014      	b.n	8000cfe <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d17c      	bne.n	8000e24 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e01c      	b.n	8000d7e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f107 0208 	add.w	r2, r7, #8
 8000d4c:	2112      	movs	r1, #18
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	4798      	blx	r3
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	da03      	bge.n	8000d60 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d58:	f06f 0304 	mvn.w	r3, #4
 8000d5c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d5e:	e00b      	b.n	8000d78 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d105      	bne.n	8000d78 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
         break;
 8000d76:	e005      	b.n	8000d84 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b1f      	cmp	r3, #31
 8000d82:	d9df      	bls.n	8000d44 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	d902      	bls.n	8000d92 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d8c:	f06f 0302 	mvn.w	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d145      	bne.n	8000e24 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6810      	ldr	r0, [r2, #0]
 8000da0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000da4:	2100      	movs	r1, #0
 8000da6:	4798      	blx	r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db37      	blt.n	8000e1e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	6810      	ldr	r0, [r2, #0]
 8000db6:	f107 0208 	add.w	r2, r7, #8
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4798      	blx	r3
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db28      	blt.n	8000e16 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4798      	blx	r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dce:	e01c      	b.n	8000e0a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4798      	blx	r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000de2:	d80e      	bhi.n	8000e02 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6810      	ldr	r0, [r2, #0]
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	2100      	movs	r1, #0
 8000df2:	4798      	blx	r3
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da07      	bge.n	8000e0a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000dfa:	f06f 0304 	mvn.w	r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
                 break;
 8000e00:	e010      	b.n	8000e24 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e02:	f06f 0301 	mvn.w	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
               break;
 8000e08:	e00c      	b.n	8000e24 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1dd      	bne.n	8000dd0 <LAN8742_Init+0xc6>
 8000e14:	e006      	b.n	8000e24 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e16:	f06f 0304 	mvn.w	r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	e002      	b.n	8000e24 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e1e:	f06f 0303 	mvn.w	r3, #3
 8000e22:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d112      	bne.n	8000e50 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4798      	blx	r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e34:	bf00      	nop
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4798      	blx	r3
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e48:	d9f5      	bls.n	8000e36 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e50:	693b      	ldr	r3, [r7, #16]
 }
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6810      	ldr	r0, [r2, #0]
 8000e6e:	f107 020c 	add.w	r2, r7, #12
 8000e72:	2101      	movs	r1, #1
 8000e74:	4798      	blx	r3
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da02      	bge.n	8000e82 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e7c:	f06f 0304 	mvn.w	r3, #4
 8000e80:	e06e      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6810      	ldr	r0, [r2, #0]
 8000e8a:	f107 020c 	add.w	r2, r7, #12
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4798      	blx	r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da02      	bge.n	8000e9e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e98:	f06f 0304 	mvn.w	r3, #4
 8000e9c:	e060      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e059      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6810      	ldr	r0, [r2, #0]
 8000eb4:	f107 020c 	add.w	r2, r7, #12
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4798      	blx	r3
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da02      	bge.n	8000ec8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ec2:	f06f 0304 	mvn.w	r3, #4
 8000ec6:	e04b      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d11b      	bne.n	8000f0a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <LAN8742_GetLinkState+0x90>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e03a      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e033      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f02:	2304      	movs	r3, #4
 8000f04:	e02c      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f06:	2305      	movs	r3, #5
 8000f08:	e02a      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6810      	ldr	r0, [r2, #0]
 8000f12:	f107 020c 	add.w	r2, r7, #12
 8000f16:	211f      	movs	r1, #31
 8000f18:	4798      	blx	r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da02      	bge.n	8000f26 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f20:	f06f 0304 	mvn.w	r3, #4
 8000f24:	e01c      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f30:	2306      	movs	r3, #6
 8000f32:	e015      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 031c 	and.w	r3, r3, #28
 8000f3a:	2b18      	cmp	r3, #24
 8000f3c:	d101      	bne.n	8000f42 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e00e      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f003 031c 	and.w	r3, r3, #28
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d101      	bne.n	8000f50 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e007      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 031c 	and.w	r3, r3, #28
 8000f56:	2b14      	cmp	r3, #20
 8000f58:	d101      	bne.n	8000f5e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e000      	b.n	8000f60 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f5e:	2305      	movs	r3, #5
    }				
  }
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 f923 	bl	80011ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f74:	f003 f846 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_Init+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	4913      	ldr	r1, [pc, #76]	; (8000fd4 <HAL_Init+0x6c>)
 8000f86:	5ccb      	ldrb	r3, [r1, r3]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_Init+0x68>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_Init+0x6c>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x70>)
 8000faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_Init+0x74>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fc62 	bl	800087c <HAL_InitTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e002      	b.n	8000fc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc2:	f7ff fc3d 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	08016e1c 	.word	0x08016e1c
 8000fd8:	24000004 	.word	0x24000004
 8000fdc:	24000000 	.word	0x24000000

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2400000c 	.word	0x2400000c
 8001004:	240051b8 	.word	0x240051b8

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	240051b8 	.word	0x240051b8

08001020 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetREVID+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0c1b      	lsrs	r3, r3, #16
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	5c001000 	.word	0x5c001000

08001038 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001048:	4904      	ldr	r1, [pc, #16]	; (800105c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	58000400 	.word	0x58000400

08001060 <__NVIC_SetPriorityGrouping>:
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	4313      	orrs	r3, r2
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	05fa0000 	.word	0x05fa0000

080010a8 <__NVIC_GetPriorityGrouping>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff4c 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011de:	f7ff ff63 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f7ff ffb3 	bl	8001154 <NVIC_EncodePriority>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff82 	bl	8001100 <__NVIC_SetPriority>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff56 	bl	80010c4 <__NVIC_EnableIRQ>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001224:	f3bf 8f5f 	dmb	sy
}
 8001228:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_MPU_Disable+0x28>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_MPU_Disable+0x28>)
 8001230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001234:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_MPU_Disable+0x2c>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	e000ed90 	.word	0xe000ed90

08001250 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_MPU_Enable+0x38>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_MPU_Enable+0x3c>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_MPU_Enable+0x3c>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800126e:	f3bf 8f4f 	dsb	sy
}
 8001272:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001274:	f3bf 8f6f 	isb	sy
}
 8001278:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed90 	.word	0xe000ed90
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	785a      	ldrb	r2, [r3, #1]
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_MPU_ConfigRegion+0x84>)
 800129e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d029      	beq.n	80012fc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_MPU_ConfigRegion+0x84>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
 80012b4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7adb      	ldrb	r3, [r3, #11]
 80012ba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7a9b      	ldrb	r3, [r3, #10]
 80012c2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b5b      	ldrb	r3, [r3, #13]
 80012ca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7b9b      	ldrb	r3, [r3, #14]
 80012d2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7bdb      	ldrb	r3, [r3, #15]
 80012da:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7a5b      	ldrb	r3, [r3, #9]
 80012e2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7a1b      	ldrb	r3, [r3, #8]
 80012ea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012ec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012f6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012f8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012fa:	e005      	b.n	8001308 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_MPU_ConfigRegion+0x84>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_MPU_ConfigRegion+0x84>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed90 	.word	0xe000ed90

08001318 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0c6      	b.n	80014b8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f003 fc92 	bl	8004c5c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2223      	movs	r2, #35	; 0x23
 800133c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <HAL_ETH_Init+0x1a8>)
 8001340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001344:	4a5e      	ldr	r2, [pc, #376]	; (80014c0 <HAL_ETH_Init+0x1a8>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_ETH_Init+0x1a8>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7a1b      	ldrb	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fe67 	bl	8001038 <HAL_SYSCFG_ETHInterfaceSelect>
 800136a:	e003      	b.n	8001374 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800136c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001370:	f7ff fe62 	bl	8001038 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138c:	f7ff fe3c 	bl	8001008 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001392:	e00f      	b.n	80013b4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001394:	f7ff fe38 	bl	8001008 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a2:	d907      	bls.n	80013b4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2204      	movs	r2, #4
 80013a8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	22e0      	movs	r2, #224	; 0xe0
 80013ae:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e081      	b.n	80014b8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1e6      	bne.n	8001394 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f001 fad8 	bl	800297c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013cc:	f002 ff94 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a3c      	ldr	r2, [pc, #240]	; (80014c4 <HAL_ETH_Init+0x1ac>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9a      	lsrs	r2, r3, #18
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3a01      	subs	r2, #1
 80013e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f001 fa2b 	bl	8002840 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001400:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001404:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	22e0      	movs	r2, #224	; 0xe0
 800141c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e04a      	b.n	80014b8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f241 1308 	movw	r3, #4360	; 0x1108
 800142a:	4413      	add	r3, r2
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_ETH_Init+0x1b0>)
 8001430:	4013      	ands	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6952      	ldr	r2, [r2, #20]
 8001436:	0052      	lsls	r2, r2, #1
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	6809      	ldr	r1, [r1, #0]
 800143c:	431a      	orrs	r2, r3
 800143e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001442:	440b      	add	r3, r1
 8001444:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f001 faf0 	bl	8002a2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f001 fb34 	bl	8002aba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	3305      	adds	r3, #5
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	021a      	lsls	r2, r3, #8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	3303      	adds	r3, #3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	061a      	lsls	r2, r3, #24
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	3302      	adds	r3, #2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	3301      	adds	r3, #1
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001490:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800149e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2210      	movs	r2, #16
 80014ae:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2210      	movs	r2, #16
 80014b4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024400 	.word	0x58024400
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	ffff8001 	.word	0xffff8001

080014cc <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3310      	adds	r3, #16
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_ETH_DescAssignMemory+0x28>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d904      	bls.n	80014fe <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e021      	b.n	8001542 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800155a:	2b10      	cmp	r3, #16
 800155c:	d174      	bne.n	8001648 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2223      	movs	r2, #35	; 0x23
 8001562:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e00f      	b.n	800158a <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3310      	adds	r3, #16
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d9ec      	bls.n	800156a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0202 	orr.w	r2, r2, #2
 80015a4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80015d2:	4413      	add	r3, r2
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6811      	ldr	r1, [r2, #0]
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	f241 1304 	movw	r3, #4356	; 0x1104
 80015e2:	440b      	add	r3, r1
 80015e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80015ee:	4413      	add	r3, r2
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6811      	ldr	r1, [r2, #0]
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	f241 1308 	movw	r3, #4360	; 0x1108
 80015fe:	440b      	add	r3, r1
 8001600:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001614:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001618:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6811      	ldr	r1, [r2, #0]
 800162a:	f24d 0241 	movw	r2, #53313	; 0xd041
 800162e:	431a      	orrs	r2, r3
 8001630:	f241 1334 	movw	r3, #4404	; 0x1134
 8001634:	440b      	add	r3, r1
 8001636:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2210      	movs	r2, #16
 800163c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2222      	movs	r2, #34	; 0x22
 8001642:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	e000      	b.n	800164a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
  }
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d067      	beq.n	8001738 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2223      	movs	r2, #35	; 0x23
 800166c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f241 1334 	movw	r3, #4404	; 0x1134
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6811      	ldr	r1, [r2, #0]
 800167e:	4a32      	ldr	r2, [pc, #200]	; (8001748 <HAL_ETH_Stop_IT+0xf0>)
 8001680:	401a      	ands	r2, r3
 8001682:	f241 1334 	movw	r3, #4404	; 0x1134
 8001686:	440b      	add	r3, r1
 8001688:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001692:	4413      	add	r3, r2
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6811      	ldr	r1, [r2, #0]
 800169a:	f023 0201 	bic.w	r2, r3, #1
 800169e:	f241 1304 	movw	r3, #4356	; 0x1104
 80016a2:	440b      	add	r3, r1
 80016a4:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80016ae:	4413      	add	r3, r2
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6811      	ldr	r1, [r2, #0]
 80016b6:	f023 0201 	bic.w	r2, r3, #1
 80016ba:	f241 1308 	movw	r3, #4360	; 0x1108
 80016be:	440b      	add	r3, r1
 80016c0:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0202 	bic.w	r2, r2, #2
 80016f4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e00f      	b.n	800171c <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3310      	adds	r3, #16
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d9ec      	bls.n	80016fc <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2210      	movs	r2, #16
 800172c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2210      	movs	r2, #16
 8001732:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
  }
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	ffff2fbe 	.word	0xffff2fbe

0800174c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d107      	bne.n	800176e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e073      	b.n	8001856 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001772:	2b10      	cmp	r3, #16
 8001774:	d16e      	bne.n	8001854 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001776:	2200      	movs	r2, #0
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f001 f9fa 	bl	8002b74 <ETH_Prepare_Tx_Descriptors>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178a:	f043 0202 	orr.w	r2, r3, #2
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e05f      	b.n	8001856 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3206      	adds	r2, #6
 800179e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d904      	bls.n	80017c0 <HAL_ETH_Transmit+0x74>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	1f1a      	subs	r2, r3, #4
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	3106      	adds	r1, #6
 80017cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80017d0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80017d4:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80017d6:	f7ff fc17 	bl	8001008 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80017dc:	e034      	b.n	8001848 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d011      	beq.n	8001814 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f4:	f043 0208 	orr.w	r2, r3, #8
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	22e0      	movs	r2, #224	; 0xe0
 800180e:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e020      	b.n	8001856 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181a:	d015      	beq.n	8001848 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800181c:	f7ff fbf4 	bl	8001008 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d302      	bcc.n	8001832 <HAL_ETH_Transmit+0xe6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10a      	bne.n	8001848 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001836:	f043 0204 	orr.w	r2, r3, #4
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	22e0      	movs	r2, #224	; 0xe0
 8001842:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e006      	b.n	8001856 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	dbc6      	blt.n	80017de <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800185e:	b480      	push	{r7}
 8001860:	b089      	sub	sp, #36	; 0x24
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3344      	adds	r3, #68	; 0x44
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d06b      	beq.n	8001968 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001890:	2300      	movs	r3, #0
 8001892:	e0ce      	b.n	8001a32 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d036      	beq.n	8001914 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	3301      	adds	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d902      	bls.n	80018c8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b04      	subs	r3, #4
 80018c6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db11      	blt.n	80018fe <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2201      	movs	r2, #1
 80018ea:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d902      	bls.n	80018fe <HAL_ETH_IsRxDataAvailable+0xa0>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3b04      	subs	r3, #4
 80018fc:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001910:	2301      	movs	r3, #1
 8001912:	e08e      	b.n	8001a32 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d012      	beq.n	8001946 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001924:	2301      	movs	r3, #1
 8001926:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3301      	adds	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d902      	bls.n	800193a <HAL_ETH_IsRxDataAvailable+0xdc>
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3b04      	subs	r3, #4
 8001938:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	e010      	b.n	8001968 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	3301      	adds	r3, #1
 800194a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d902      	bls.n	800195e <HAL_ETH_IsRxDataAvailable+0x100>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3b04      	subs	r3, #4
 800195c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001966:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db02      	blt.n	8001976 <HAL_ETH_IsRxDataAvailable+0x118>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d98e      	bls.n	8001894 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d056      	beq.n	8001a2a <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e03b      	b.n	8001a14 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019aa:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d20d      	bcs.n	8001a0e <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3301      	adds	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d902      	bls.n	8001a04 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b04      	subs	r3, #4
 8001a02:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3bf      	bcc.n	800199c <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	f241 1328 	movw	r3, #4392	; 0x1128
 8001a26:	440b      	add	r3, r1
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]

  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b08a      	sub	sp, #40	; 0x28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3344      	adds	r3, #68	; 0x44
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07d      	b.n	8001b72 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff feed 	bl	800185e <HAL_ETH_IsRxDataAvailable>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e071      	b.n	8001b72 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	e031      	b.n	8001b08 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ade:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d902      	bls.n	8001af2 <HAL_ETH_GetRxDataBuffer+0xb4>
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3b04      	subs	r3, #4
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	3301      	adds	r3, #1
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	6a3a      	ldr	r2, [r7, #32]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3c7      	bcc.n	8001aa4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	461a      	mov	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d803      	bhi.n	8001b3e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	e018      	b.n	8001b70 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d012      	beq.n	8001b6c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	e001      	b.n	8001b70 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3344      	adds	r3, #68	; 0x44
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fe60 	bl	800185e <HAL_ETH_IsRxDataAvailable>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e017      	b.n	8001bd8 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d902      	bls.n	8001bc0 <HAL_ETH_GetRxDataLength+0x46>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3b04      	subs	r3, #4
 8001bbe:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3344      	adds	r3, #68	; 0x44
 8001bec:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e057      	b.n	8001cc0 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e03b      	b.n	8001c9c <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c32:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d20d      	bcs.n	8001c96 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d902      	bls.n	8001c8c <HAL_ETH_BuildRxDescriptors+0xac>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b04      	subs	r3, #4
 8001c8a:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d3bf      	bcc.n	8001c24 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	f241 1328 	movw	r3, #4392	; 0x1128
 8001cae:	440b      	add	r3, r1
 8001cb0:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3724      	adds	r7, #36	; 0x24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	2b40      	cmp	r3, #64	; 0x40
 8001ce4:	d113      	bne.n	8001d0e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f241 1334 	movw	r3, #4404	; 0x1134
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf6:	2b40      	cmp	r3, #64	; 0x40
 8001cf8:	d109      	bne.n	8001d0e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f003 f884 	bl	8004e08 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d08:	f248 0240 	movw	r2, #32832	; 0x8040
 8001d0c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d113      	bne.n	8001d48 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d28:	4413      	add	r3, r2
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d109      	bne.n	8001d48 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8b7 	bl	8001ea8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d42:	f248 0201 	movw	r2, #32769	; 0x8001
 8001d46:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d5a:	d149      	bne.n	8001df0 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d70:	d13e      	bne.n	8001df0 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d76:	f043 0208 	orr.w	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d90:	d11b      	bne.n	8001dca <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f241 1302 	movw	r3, #4354	; 0x1102
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f241 1334 	movw	r3, #4404	; 0x1134
 8001dae:	4413      	add	r3, r2
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6811      	ldr	r1, [r2, #0]
 8001db6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dba:	f241 1334 	movw	r3, #4404	; 0x1134
 8001dbe:	440b      	add	r3, r1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	22e0      	movs	r2, #224	; 0xe0
 8001dc6:	66da      	str	r2, [r3, #108]	; 0x6c
 8001dc8:	e00f      	b.n	8001dea <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001de4:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001de8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f866 	bl	8001ebc <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001df8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001dfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001e00:	d10e      	bne.n	8001e20 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	22e0      	movs	r2, #224	; 0xe0
 8001e12:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f85b 	bl	8001ed0 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d10f      	bne.n	8001e50 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e38:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f84e 	bl	8001ee4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d10f      	bne.n	8001e80 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e68:	f003 020f 	and.w	r2, r3, #15
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f840 	bl	8001ef8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_ETH_IRQHandler+0x1d8>)
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_ETH_IRQHandler+0x1d8>)
 8001e8e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f839 	bl	8001f0c <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	58000080 	.word	0x58000080

08001ea8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e03e      	b.n	8001fc0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f4a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	055b      	lsls	r3, r3, #21
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f043 030c 	orr.w	r3, r3, #12
 8001f6e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f82:	f7ff f841 	bl	8001008 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f88:	e009      	b.n	8001f9e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001f8a:	f7ff f83d 	bl	8001008 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f98:	d901      	bls.n	8001f9e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e010      	b.n	8001fc0 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ed      	bne.n	8001f8a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e03c      	b.n	8002064 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	055b      	lsls	r3, r3, #21
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 030c 	bic.w	r3, r3, #12
 8002016:	f043 0304 	orr.w	r3, r3, #4
 800201a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_ETH_WritePHYRegister+0xa4>)
 800202a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_ETH_WritePHYRegister+0xa4>)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002036:	f7fe ffe7 	bl	8001008 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800203c:	e009      	b.n	8002052 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800203e:	f7fe ffe3 	bl	8001008 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800204c:	d901      	bls.n	8002052 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e008      	b.n	8002064 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ed      	bne.n	800203e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40028000 	.word	0x40028000

08002070 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e1c3      	b.n	800240c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 020c 	and.w	r2, r3, #12
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf14      	ite	ne
 800211a:	2301      	movne	r3, #1
 800211c:	2300      	moveq	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0e5b      	lsrs	r3, r3, #25
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 020f 	and.w	r2, r3, #15
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	b29a      	uxth	r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002398:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023a8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e00a      	b.n	8002442 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	2b10      	cmp	r3, #16
 8002432:	d105      	bne.n	8002440 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002434:	6839      	ldr	r1, [r7, #0]
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f860 	bl	80024fc <ETH_SetMACConfig>

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800245c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002464:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002466:	f001 ff47 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 800246a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d908      	bls.n	8002486 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d804      	bhi.n	8002486 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e027      	b.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d908      	bls.n	80024a0 <HAL_ETH_SetMDIOClockRange+0x54>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d204      	bcs.n	80024a0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e01a      	b.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d303      	bcc.n	80024b0 <HAL_ETH_SetMDIOClockRange+0x64>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d911      	bls.n	80024d4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d908      	bls.n	80024ca <HAL_ETH_SetMDIOClockRange+0x7e>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <HAL_ETH_SetMDIOClockRange+0xac>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d804      	bhi.n	80024ca <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e005      	b.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e000      	b.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80024d4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	01312cff 	.word	0x01312cff
 80024ec:	02160ebf 	.word	0x02160ebf
 80024f0:	03938700 	.word	0x03938700
 80024f4:	05f5e0ff 	.word	0x05f5e0ff
 80024f8:	08f0d17f 	.word	0x08f0d17f

080024fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800250e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	791b      	ldrb	r3, [r3, #4]
 8002514:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002516:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	7b1b      	ldrb	r3, [r3, #12]
 800251c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800251e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7b5b      	ldrb	r3, [r3, #13]
 8002524:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002526:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	7b9b      	ldrb	r3, [r3, #14]
 800252c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800252e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	7bdb      	ldrb	r3, [r3, #15]
 8002534:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002536:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	7c12      	ldrb	r2, [r2, #16]
 800253c:	2a00      	cmp	r2, #0
 800253e:	d102      	bne.n	8002546 <ETH_SetMACConfig+0x4a>
 8002540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002544:	e000      	b.n	8002548 <ETH_SetMACConfig+0x4c>
 8002546:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002548:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	7c52      	ldrb	r2, [r2, #17]
 800254e:	2a00      	cmp	r2, #0
 8002550:	d102      	bne.n	8002558 <ETH_SetMACConfig+0x5c>
 8002552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002556:	e000      	b.n	800255a <ETH_SetMACConfig+0x5e>
 8002558:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800255a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7c9b      	ldrb	r3, [r3, #18]
 8002560:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002562:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002568:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800256e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7f1b      	ldrb	r3, [r3, #28]
 8002574:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002576:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	7f5b      	ldrb	r3, [r3, #29]
 800257c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800257e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	7f92      	ldrb	r2, [r2, #30]
 8002584:	2a00      	cmp	r2, #0
 8002586:	d102      	bne.n	800258e <ETH_SetMACConfig+0x92>
 8002588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258c:	e000      	b.n	8002590 <ETH_SetMACConfig+0x94>
 800258e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002590:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7fdb      	ldrb	r3, [r3, #31]
 8002596:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002598:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d102      	bne.n	80025aa <ETH_SetMACConfig+0xae>
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	e000      	b.n	80025ac <ETH_SetMACConfig+0xb0>
 80025aa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80025ac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80025b2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025ba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80025bc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b56      	ldr	r3, [pc, #344]	; (8002728 <ETH_SetMACConfig+0x22c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	430b      	orrs	r3, r1
 80025d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80025e8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80025f2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025fa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80025fc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002604:	2a00      	cmp	r2, #0
 8002606:	d102      	bne.n	800260e <ETH_SetMACConfig+0x112>
 8002608:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800260c:	e000      	b.n	8002610 <ETH_SetMACConfig+0x114>
 800260e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002610:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <ETH_SetMACConfig+0x230>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	430b      	orrs	r3, r1
 800262c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002634:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <ETH_SetMACConfig+0x234>)
 8002646:	4013      	ands	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	430b      	orrs	r3, r1
 8002650:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002658:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800265e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002666:	2a00      	cmp	r2, #0
 8002668:	d101      	bne.n	800266e <ETH_SetMACConfig+0x172>
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	e000      	b.n	8002670 <ETH_SetMACConfig+0x174>
 800266e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002670:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002676:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002682:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	430b      	orrs	r3, r1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002698:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80026a0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f023 0103 	bic.w	r1, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80026c6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	d101      	bne.n	80026ea <ETH_SetMACConfig+0x1ee>
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	e000      	b.n	80026ec <ETH_SetMACConfig+0x1f0>
 80026ea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026ec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80026f4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026f6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80026fe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800270c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	430a      	orrs	r2, r1
 8002718:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	00048083 	.word	0x00048083
 800272c:	c0f88000 	.word	0xc0f88000
 8002730:	fffffef0 	.word	0xfffffef0

08002734 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b38      	ldr	r3, [pc, #224]	; (800282c <ETH_SetDMAConfig+0xf8>)
 800274a:	4013      	ands	r3, r2
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6809      	ldr	r1, [r1, #0]
 8002754:	431a      	orrs	r2, r3
 8002756:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800275a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	791b      	ldrb	r3, [r3, #4]
 8002760:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002766:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	7b1b      	ldrb	r3, [r3, #12]
 800276c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f241 0304 	movw	r3, #4100	; 0x1004
 800277a:	4413      	add	r3, r2
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <ETH_SetDMAConfig+0xfc>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6811      	ldr	r1, [r2, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	431a      	orrs	r2, r3
 800278a:	f241 0304 	movw	r3, #4100	; 0x1004
 800278e:	440b      	add	r3, r1
 8002790:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7b5b      	ldrb	r3, [r3, #13]
 8002796:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <ETH_SetDMAConfig+0x100>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6811      	ldr	r1, [r2, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80027ba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	7d1b      	ldrb	r3, [r3, #20]
 80027c4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80027c6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	7f5b      	ldrb	r3, [r3, #29]
 80027cc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80027da:	4413      	add	r3, r2
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <ETH_SetDMAConfig+0x104>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6811      	ldr	r1, [r2, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80027ee:	440b      	add	r3, r1
 80027f0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7f1b      	ldrb	r3, [r3, #28]
 80027f6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f241 1308 	movw	r3, #4360	; 0x1108
 8002808:	4413      	add	r3, r2
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <ETH_SetDMAConfig+0x108>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6811      	ldr	r1, [r2, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	431a      	orrs	r2, r3
 8002818:	f241 1308 	movw	r3, #4360	; 0x1108
 800281c:	440b      	add	r3, r1
 800281e:	601a      	str	r2, [r3, #0]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	ffff87fd 	.word	0xffff87fd
 8002830:	ffff2ffe 	.word	0xffff2ffe
 8002834:	fffec000 	.word	0xfffec000
 8002838:	ffc0efef 	.word	0xffc0efef
 800283c:	7fc0ffff 	.word	0x7fc0ffff

08002840 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b0a4      	sub	sp, #144	; 0x90
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800284e:	2300      	movs	r3, #0
 8002850:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800287c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002880:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002888:	2300      	movs	r3, #0
 800288a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002898:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800289c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028ba:	2300      	movs	r3, #0
 80028bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80028be:	2300      	movs	r3, #0
 80028c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80028c2:	2300      	movs	r3, #0
 80028c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80028d8:	2320      	movs	r3, #32
 80028da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028fc:	2302      	movs	r3, #2
 80028fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800291a:	2300      	movs	r3, #0
 800291c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fde6 	bl	80024fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002930:	2301      	movs	r3, #1
 8002932:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002934:	2301      	movs	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800294a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800294e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002958:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002960:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fee1 	bl	8002734 <ETH_SetDMAConfig>
}
 8002972:	bf00      	nop
 8002974:	3790      	adds	r7, #144	; 0x90
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800298c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002994:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002996:	f001 fcaf 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 800299a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d908      	bls.n	80029b6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d804      	bhi.n	80029b6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e027      	b.n	8002a06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d908      	bls.n	80029d0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d204      	bcs.n	80029d0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e01a      	b.n	8002a06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d303      	bcc.n	80029e0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d911      	bls.n	8002a04 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d908      	bls.n	80029fa <ETH_MAC_MDIO_ClkConfig+0x7e>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d804      	bhi.n	80029fa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e005      	b.n	8002a06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e000      	b.n	8002a06 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	01312cff 	.word	0x01312cff
 8002a1c:	02160ebf 	.word	0x02160ebf
 8002a20:	03938700 	.word	0x03938700
 8002a24:	05f5e0ff 	.word	0x05f5e0ff
 8002a28:	08f0d17f 	.word	0x08f0d17f

08002a2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e01d      	b.n	8002a76 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	3206      	adds	r2, #6
 8002a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d9de      	bls.n	8002a3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f241 132c 	movw	r3, #4396	; 0x112c
 8002a8a:	4413      	add	r3, r2
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68d9      	ldr	r1, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f241 1314 	movw	r3, #4372	; 0x1114
 8002a9c:	4413      	add	r3, r2
 8002a9e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e024      	b.n	8002b12 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6919      	ldr	r1, [r3, #16]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3310      	adds	r3, #16
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d9d7      	bls.n	8002ac8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	f241 1330 	movw	r3, #4400	; 0x1130
 8002b3e:	4413      	add	r3, r2
 8002b40:	2203      	movs	r2, #3
 8002b42:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6919      	ldr	r1, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f241 131c 	movw	r3, #4380	; 0x111c
 8002b50:	4413      	add	r3, r2
 8002b52:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	f241 1328 	movw	r3, #4392	; 0x1128
 8002b64:	4413      	add	r3, r2
 8002b66:	6019      	str	r1, [r3, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b08d      	sub	sp, #52	; 0x34
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3318      	adds	r3, #24
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb6:	d007      	beq.n	8002bc8 <ETH_Prepare_Tx_Descriptors+0x54>
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e24a      	b.n	8003062 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d044      	beq.n	8002c62 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b72      	ldr	r3, [pc, #456]	; (8002da8 <ETH_Prepare_Tx_Descriptors+0x234>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be4:	431a      	orrs	r2, r3
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c04:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d027      	beq.n	8002c62 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c50:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c60:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	4b4e      	ldr	r3, [pc, #312]	; (8002dac <ETH_Prepare_Tx_Descriptors+0x238>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	6992      	ldr	r2, [r2, #24]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <ETH_Prepare_Tx_Descriptors+0x130>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d030      	beq.n	8002d06 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d902      	bls.n	8002cce <ETH_Prepare_Tx_Descriptors+0x15a>
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	3301      	adds	r3, #1
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cea:	d10c      	bne.n	8002d06 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	e1ad      	b.n	8003062 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	3301      	adds	r3, #1
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <ETH_Prepare_Tx_Descriptors+0x238>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	6852      	ldr	r2, [r2, #4]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6852      	ldr	r2, [r2, #4]
 8002d4c:	0412      	lsls	r2, r2, #16
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	e008      	b.n	8002d68 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d021      	beq.n	8002db8 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	04db      	lsls	r3, r3, #19
 8002d82:	431a      	orrs	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	69d2      	ldr	r2, [r2, #28]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	e02e      	b.n	8002e06 <ETH_Prepare_Tx_Descriptors+0x292>
 8002da8:	ffff0000 	.word	0xffff0000
 8002dac:	ffffc000 	.word	0xffffc000
 8002db0:	c000ffff 	.word	0xc000ffff
 8002db4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4b93      	ldr	r3, [pc, #588]	; (800300c <ETH_Prepare_Tx_Descriptors+0x498>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	6852      	ldr	r2, [r2, #4]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80cb 	beq.w	8002fec <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e68:	e0c0      	b.n	8002fec <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	3301      	adds	r3, #1
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d902      	bls.n	8002e88 <ETH_Prepare_Tx_Descriptors+0x314>
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	3b04      	subs	r3, #4
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e90:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eaa:	d007      	beq.n	8002ebc <ETH_Prepare_Tx_Descriptors+0x348>
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d026      	beq.n	8002f0a <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	e016      	b.n	8002efe <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	3301      	adds	r3, #1
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d902      	bls.n	8002eee <ETH_Prepare_Tx_Descriptors+0x37a>
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	3b04      	subs	r3, #4
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	3301      	adds	r3, #1
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3e4      	bcc.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0ab      	b.n	8003062 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	6852      	ldr	r2, [r2, #4]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	6852      	ldr	r2, [r2, #4]
 8002f56:	0412      	lsls	r2, r2, #16
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	e008      	b.n	8002f72 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00f      	beq.n	8002f9e <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	69d2      	ldr	r2, [r2, #28]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e017      	b.n	8002fce <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <ETH_Prepare_Tx_Descriptors+0x498>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	6852      	ldr	r2, [r2, #4]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f af3a 	bne.w	8002e6a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00f      	beq.n	800301c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	e00e      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x4b4>
 800300a:	bf00      	nop
 800300c:	ffff8000 	.word	0xffff8000
 8003010:	ffffc000 	.word	0xffffc000
 8003014:	c000ffff 	.word	0xc000ffff
 8003018:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	3304      	adds	r3, #4
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003048:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800304a:	b672      	cpsid	i
}
 800304c:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4413      	add	r3, r2
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800305c:	b662      	cpsie	i
}
 800305e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3734      	adds	r7, #52	; 0x34
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800307e:	4b89      	ldr	r3, [pc, #548]	; (80032a4 <HAL_GPIO_Init+0x234>)
 8003080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003082:	e194      	b.n	80033ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8186 	beq.w	80033a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d00b      	beq.n	80030bc <HAL_GPIO_Init+0x4c>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d007      	beq.n	80030bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030b0:	2b11      	cmp	r3, #17
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b12      	cmp	r3, #18
 80030ba:	d130      	bne.n	800311e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030f2:	2201      	movs	r2, #1
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0201 	and.w	r2, r3, #1
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0xee>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b12      	cmp	r3, #18
 800315c:	d123      	bne.n	80031a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	69b9      	ldr	r1, [r7, #24]
 80031a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 0203 	and.w	r2, r3, #3
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80e0 	beq.w	80033a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e8:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <HAL_GPIO_Init+0x238>)
 80031ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031ee:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <HAL_GPIO_Init+0x238>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_GPIO_Init+0x238>)
 80031fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <HAL_GPIO_Init+0x23c>)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	3302      	adds	r3, #2
 800320e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	220f      	movs	r2, #15
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_GPIO_Init+0x240>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d052      	beq.n	80032d8 <HAL_GPIO_Init+0x268>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_GPIO_Init+0x244>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_GPIO_Init+0x22e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_GPIO_Init+0x248>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02b      	beq.n	800329a <HAL_GPIO_Init+0x22a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <HAL_GPIO_Init+0x24c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d025      	beq.n	8003296 <HAL_GPIO_Init+0x226>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_GPIO_Init+0x250>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <HAL_GPIO_Init+0x222>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_GPIO_Init+0x254>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x21e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_GPIO_Init+0x258>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x21a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_GPIO_Init+0x25c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x216>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_GPIO_Init+0x260>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x212>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_GPIO_Init+0x264>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x20e>
 800327a:	2309      	movs	r3, #9
 800327c:	e02d      	b.n	80032da <HAL_GPIO_Init+0x26a>
 800327e:	230a      	movs	r3, #10
 8003280:	e02b      	b.n	80032da <HAL_GPIO_Init+0x26a>
 8003282:	2308      	movs	r3, #8
 8003284:	e029      	b.n	80032da <HAL_GPIO_Init+0x26a>
 8003286:	2307      	movs	r3, #7
 8003288:	e027      	b.n	80032da <HAL_GPIO_Init+0x26a>
 800328a:	2306      	movs	r3, #6
 800328c:	e025      	b.n	80032da <HAL_GPIO_Init+0x26a>
 800328e:	2305      	movs	r3, #5
 8003290:	e023      	b.n	80032da <HAL_GPIO_Init+0x26a>
 8003292:	2304      	movs	r3, #4
 8003294:	e021      	b.n	80032da <HAL_GPIO_Init+0x26a>
 8003296:	2303      	movs	r3, #3
 8003298:	e01f      	b.n	80032da <HAL_GPIO_Init+0x26a>
 800329a:	2302      	movs	r3, #2
 800329c:	e01d      	b.n	80032da <HAL_GPIO_Init+0x26a>
 800329e:	2301      	movs	r3, #1
 80032a0:	e01b      	b.n	80032da <HAL_GPIO_Init+0x26a>
 80032a2:	bf00      	nop
 80032a4:	58000080 	.word	0x58000080
 80032a8:	58024400 	.word	0x58024400
 80032ac:	58000400 	.word	0x58000400
 80032b0:	58020000 	.word	0x58020000
 80032b4:	58020400 	.word	0x58020400
 80032b8:	58020800 	.word	0x58020800
 80032bc:	58020c00 	.word	0x58020c00
 80032c0:	58021000 	.word	0x58021000
 80032c4:	58021400 	.word	0x58021400
 80032c8:	58021800 	.word	0x58021800
 80032cc:	58021c00 	.word	0x58021c00
 80032d0:	58022000 	.word	0x58022000
 80032d4:	58022400 	.word	0x58022400
 80032d8:	2300      	movs	r3, #0
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	f002 0203 	and.w	r2, r2, #3
 80032e0:	0092      	lsls	r2, r2, #2
 80032e2:	4093      	lsls	r3, r2
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ea:	4938      	ldr	r1, [pc, #224]	; (80033cc <HAL_GPIO_Init+0x35c>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f ae63 	bne.w	8003084 <HAL_GPIO_Init+0x14>
  }
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	3724      	adds	r7, #36	; 0x24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	58000400 	.word	0x58000400

080033d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e0:	787b      	ldrb	r3, [r7, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033ec:	e003      	b.n	80033f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	041a      	lsls	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	619a      	str	r2, [r3, #24]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_PWREx_ConfigSupply+0x70>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d00a      	beq.n	800342e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_PWREx_ConfigSupply+0x70>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e01f      	b.n	800346a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e01d      	b.n	800346a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <HAL_PWREx_ConfigSupply+0x70>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	490f      	ldr	r1, [pc, #60]	; (8003474 <HAL_PWREx_ConfigSupply+0x70>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4313      	orrs	r3, r2
 800343c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800343e:	f7fd fde3 	bl	8001008 <HAL_GetTick>
 8003442:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003444:	e009      	b.n	800345a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003446:	f7fd fddf 	bl	8001008 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003454:	d901      	bls.n	800345a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e007      	b.n	800346a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_PWREx_ConfigSupply+0x70>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	d1ee      	bne.n	8003446 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	58024800 	.word	0x58024800

08003478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e3ff      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8087 	beq.w	80035a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003498:	4b99      	ldr	r3, [pc, #612]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034a2:	4b97      	ldr	r3, [pc, #604]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d007      	beq.n	80034be <HAL_RCC_OscConfig+0x46>
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	2b18      	cmp	r3, #24
 80034b2:	d110      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5e>
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d10b      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034be:	4b90      	ldr	r3, [pc, #576]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d06c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x12c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d168      	bne.n	80035a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e3d9      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x76>
 80034e0:	4b87      	ldr	r3, [pc, #540]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a86      	ldr	r2, [pc, #536]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e02e      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x98>
 80034f6:	4b82      	ldr	r3, [pc, #520]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a81      	ldr	r2, [pc, #516]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80034fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b7f      	ldr	r3, [pc, #508]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7e      	ldr	r2, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0xbc>
 800351a:	4b79      	ldr	r3, [pc, #484]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a78      	ldr	r2, [pc, #480]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 8003534:	4b72      	ldr	r3, [pc, #456]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a71      	ldr	r2, [pc, #452]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fd fd58 	bl	8001008 <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7fd fd54 	bl	8001008 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e38d      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800356e:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xe4>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fd fd44 	bl	8001008 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7fd fd40 	bl	8001008 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e379      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003596:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x10c>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80ae 	beq.w	8003710 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b4:	4b52      	ldr	r3, [pc, #328]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_RCC_OscConfig+0x162>
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2b18      	cmp	r3, #24
 80035ce:	d13a      	bne.n	8003646 <HAL_RCC_OscConfig+0x1ce>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d135      	bne.n	8003646 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e34b      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	f7fd fd15 	bl	8001020 <HAL_GetREVID>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d817      	bhi.n	8003630 <HAL_RCC_OscConfig+0x1b8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d108      	bne.n	800361a <HAL_RCC_OscConfig+0x1a2>
 8003608:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003610:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003616:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003618:	e07a      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b39      	ldr	r3, [pc, #228]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	4935      	ldr	r1, [pc, #212]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800362e:	e06f      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	4930      	ldr	r1, [pc, #192]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003644:	e064      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d045      	beq.n	80036da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0219 	bic.w	r2, r3, #25
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4929      	ldr	r1, [pc, #164]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd fcd2 	bl	8001008 <HAL_GetTick>
 8003664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003668:	f7fd fcce 	bl	8001008 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e307      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	f7fd fccb 	bl	8001020 <HAL_GetREVID>
 800368a:	4603      	mov	r3, r0
 800368c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003690:	4293      	cmp	r3, r2
 8003692:	d817      	bhi.n	80036c4 <HAL_RCC_OscConfig+0x24c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d108      	bne.n	80036ae <HAL_RCC_OscConfig+0x236>
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036a4:	4a16      	ldr	r2, [pc, #88]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036aa:	6053      	str	r3, [r2, #4]
 80036ac:	e030      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	031b      	lsls	r3, r3, #12
 80036bc:	4910      	ldr	r1, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
 80036c2:	e025      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	490b      	ldr	r1, [pc, #44]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
 80036d8:	e01a      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x288>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fd fc8f 	bl	8001008 <HAL_GetTick>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fd fc8b 	bl	8001008 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d903      	bls.n	8003704 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e2c4      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
 8003700:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003704:	4ba4      	ldr	r3, [pc, #656]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a9 	beq.w	8003870 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	4b9e      	ldr	r3, [pc, #632]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003726:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003728:	4b9b      	ldr	r3, [pc, #620]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d007      	beq.n	8003744 <HAL_RCC_OscConfig+0x2cc>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b18      	cmp	r3, #24
 8003738:	d13a      	bne.n	80037b0 <HAL_RCC_OscConfig+0x338>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d135      	bne.n	80037b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003744:	4b94      	ldr	r3, [pc, #592]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x2e4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d001      	beq.n	800375c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e296      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800375c:	f7fd fc60 	bl	8001020 <HAL_GetREVID>
 8003760:	4603      	mov	r3, r0
 8003762:	f241 0203 	movw	r2, #4099	; 0x1003
 8003766:	4293      	cmp	r3, r2
 8003768:	d817      	bhi.n	800379a <HAL_RCC_OscConfig+0x322>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	2b20      	cmp	r3, #32
 8003770:	d108      	bne.n	8003784 <HAL_RCC_OscConfig+0x30c>
 8003772:	4b89      	ldr	r3, [pc, #548]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800377a:	4a87      	ldr	r2, [pc, #540]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 800377c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003780:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003782:	e075      	b.n	8003870 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003784:	4b84      	ldr	r3, [pc, #528]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	069b      	lsls	r3, r3, #26
 8003792:	4981      	ldr	r1, [pc, #516]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003798:	e06a      	b.n	8003870 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800379a:	4b7f      	ldr	r3, [pc, #508]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	497b      	ldr	r1, [pc, #492]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037ae:	e05f      	b.n	8003870 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d042      	beq.n	800383e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037b8:	4b77      	ldr	r3, [pc, #476]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a76      	ldr	r2, [pc, #472]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80037be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fc20 	bl	8001008 <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037cc:	f7fd fc1c 	bl	8001008 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e255      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037de:	4b6e      	ldr	r3, [pc, #440]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037ea:	f7fd fc19 	bl	8001020 <HAL_GetREVID>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d817      	bhi.n	8003828 <HAL_RCC_OscConfig+0x3b0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d108      	bne.n	8003812 <HAL_RCC_OscConfig+0x39a>
 8003800:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003808:	4a63      	ldr	r2, [pc, #396]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 800380a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800380e:	6053      	str	r3, [r2, #4]
 8003810:	e02e      	b.n	8003870 <HAL_RCC_OscConfig+0x3f8>
 8003812:	4b61      	ldr	r3, [pc, #388]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	069b      	lsls	r3, r3, #26
 8003820:	495d      	ldr	r1, [pc, #372]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
 8003826:	e023      	b.n	8003870 <HAL_RCC_OscConfig+0x3f8>
 8003828:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	4958      	ldr	r1, [pc, #352]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003838:	4313      	orrs	r3, r2
 800383a:	60cb      	str	r3, [r1, #12]
 800383c:	e018      	b.n	8003870 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800383e:	4b56      	ldr	r3, [pc, #344]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a55      	ldr	r2, [pc, #340]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fd fbdd 	bl	8001008 <HAL_GetTick>
 800384e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003852:	f7fd fbd9 	bl	8001008 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e212      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003864:	4b4c      	ldr	r3, [pc, #304]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d036      	beq.n	80038ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d019      	beq.n	80038b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003884:	4b44      	ldr	r3, [pc, #272]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	4a43      	ldr	r2, [pc, #268]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fd fbba 	bl	8001008 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003898:	f7fd fbb6 	bl	8001008 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1ef      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038aa:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x420>
 80038b6:	e018      	b.n	80038ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80038ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038bc:	4a36      	ldr	r2, [pc, #216]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fd fba0 	bl	8001008 <HAL_GetTick>
 80038c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fd fb9c 	bl	8001008 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1d5      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038de:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 80038e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d019      	beq.n	8003932 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038fe:	4b26      	ldr	r3, [pc, #152]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a25      	ldr	r2, [pc, #148]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003908:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800390a:	f7fd fb7d 	bl	8001008 <HAL_GetTick>
 800390e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003912:	f7fd fb79 	bl	8001008 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1b2      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x49a>
 8003930:	e018      	b.n	8003964 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 8003938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800393c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800393e:	f7fd fb63 	bl	8001008 <HAL_GetTick>
 8003942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003946:	f7fd fb5f 	bl	8001008 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e198      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <HAL_RCC_OscConfig+0x520>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8085 	beq.w	8003a7c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCC_OscConfig+0x524>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCC_OscConfig+0x524>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800397e:	f7fd fb43 	bl	8001008 <HAL_GetTick>
 8003982:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003984:	e00c      	b.n	80039a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fd fb3f 	bl	8001008 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d905      	bls.n	80039a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e178      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
 8003998:	58024400 	.word	0x58024400
 800399c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039a0:	4b96      	ldr	r3, [pc, #600]	; (8003bfc <HAL_RCC_OscConfig+0x784>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ec      	beq.n	8003986 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x54a>
 80039b4:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a91      	ldr	r2, [pc, #580]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	e02d      	b.n	8003a1e <HAL_RCC_OscConfig+0x5a6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x56c>
 80039ca:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a8c      	ldr	r2, [pc, #560]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
 80039d6:	4b8a      	ldr	r3, [pc, #552]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a89      	ldr	r2, [pc, #548]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	e01c      	b.n	8003a1e <HAL_RCC_OscConfig+0x5a6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x58e>
 80039ec:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a83      	ldr	r2, [pc, #524]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a80      	ldr	r2, [pc, #512]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
 8003a04:	e00b      	b.n	8003a1e <HAL_RCC_OscConfig+0x5a6>
 8003a06:	4b7e      	ldr	r3, [pc, #504]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a7d      	ldr	r2, [pc, #500]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a7a      	ldr	r2, [pc, #488]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d015      	beq.n	8003a52 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fd faef 	bl	8001008 <HAL_GetTick>
 8003a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fd faeb 	bl	8001008 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e122      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a44:	4b6e      	ldr	r3, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ee      	beq.n	8003a2e <HAL_RCC_OscConfig+0x5b6>
 8003a50:	e014      	b.n	8003a7c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fd fad9 	bl	8001008 <HAL_GetTick>
 8003a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fd fad5 	bl	8001008 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e10c      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a70:	4b63      	ldr	r3, [pc, #396]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ee      	bne.n	8003a5a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8101 	beq.w	8003c88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a86:	4b5e      	ldr	r3, [pc, #376]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a8e:	2b18      	cmp	r3, #24
 8003a90:	f000 80bc 	beq.w	8003c0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f040 8095 	bne.w	8003bc8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd faad 	bl	8001008 <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fd faa9 	bl	8001008 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0e2      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ac4:	4b4e      	ldr	r3, [pc, #312]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCC_OscConfig+0x78c>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	4946      	ldr	r1, [pc, #280]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	628b      	str	r3, [r1, #40]	; 0x28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	3b01      	subs	r3, #1
 8003af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	3b01      	subs	r3, #1
 8003afa:	025b      	lsls	r3, r3, #9
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	3b01      	subs	r3, #1
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	3b01      	subs	r3, #1
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b1a:	4939      	ldr	r1, [pc, #228]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b20:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4a36      	ldr	r2, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <HAL_RCC_OscConfig+0x790>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b38:	00d2      	lsls	r2, r2, #3
 8003b3a:	4931      	ldr	r1, [pc, #196]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b40:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f023 020c 	bic.w	r2, r3, #12
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	492c      	ldr	r1, [pc, #176]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f023 0202 	bic.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	4928      	ldr	r1, [pc, #160]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4a1f      	ldr	r2, [pc, #124]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd fa32 	bl	8001008 <HAL_GetTick>
 8003ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fd fa2e 	bl	8001008 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e067      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x730>
 8003bc6:	e05f      	b.n	8003c88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fa18 	bl	8001008 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fd fa14 	bl	8001008 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e04d      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <HAL_RCC_OscConfig+0x788>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x764>
 8003bfa:	e045      	b.n	8003c88 <HAL_RCC_OscConfig+0x810>
 8003bfc:	58024800 	.word	0x58024800
 8003c00:	58024400 	.word	0x58024400
 8003c04:	fffffc0c 	.word	0xfffffc0c
 8003c08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x81c>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_OscConfig+0x81c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d031      	beq.n	8003c84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f003 0203 	and.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d12a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d122      	bne.n	8003c84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	0a5b      	lsrs	r3, r3, #9
 8003c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d108      	bne.n	8003c84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0e1b      	lsrs	r3, r3, #24
 8003c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3730      	adds	r7, #48	; 0x30
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400

08003c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e19c      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b8a      	ldr	r3, [pc, #552]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d910      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b87      	ldr	r3, [pc, #540]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 020f 	bic.w	r2, r3, #15
 8003cc2:	4985      	ldr	r1, [pc, #532]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b83      	ldr	r3, [pc, #524]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e184      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	4b7b      	ldr	r3, [pc, #492]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d908      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cf8:	4b78      	ldr	r3, [pc, #480]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	4975      	ldr	r1, [pc, #468]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	4b70      	ldr	r3, [pc, #448]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d908      	bls.n	8003d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d26:	4b6d      	ldr	r3, [pc, #436]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	496a      	ldr	r1, [pc, #424]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	4b64      	ldr	r3, [pc, #400]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d908      	bls.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d54:	4b61      	ldr	r3, [pc, #388]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	495e      	ldr	r1, [pc, #376]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d908      	bls.n	8003d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d82:	4b56      	ldr	r3, [pc, #344]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4953      	ldr	r1, [pc, #332]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	4b4d      	ldr	r3, [pc, #308]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d908      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f023 020f 	bic.w	r2, r3, #15
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4947      	ldr	r1, [pc, #284]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d055      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003dce:	4b43      	ldr	r3, [pc, #268]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4940      	ldr	r1, [pc, #256]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003de8:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d121      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0f6      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d115      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0ea      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e18:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0de      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0d6      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f023 0207 	bic.w	r2, r3, #7
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4925      	ldr	r1, [pc, #148]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fd f8dd 	bl	8001008 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e52:	f7fd f8d9 	bl	8001008 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0be      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e68:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d1eb      	bne.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d208      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f023 020f 	bic.w	r2, r3, #15
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d214      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 020f 	bic.w	r2, r3, #15
 8003ebe:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e086      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
 8003ed8:	52002000 	.word	0x52002000
 8003edc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d208      	bcs.n	8003f0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003efc:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4939      	ldr	r1, [pc, #228]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d208      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	492e      	ldr	r1, [pc, #184]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d208      	bcs.n	8003f6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4922      	ldr	r1, [pc, #136]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d208      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4917      	ldr	r1, [pc, #92]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f98:	f000 f834 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <HAL_RCC_ClockConfig+0x35c>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <HAL_RCC_ClockConfig+0x35c>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x360>)
 8003fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x364>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <HAL_RCC_ClockConfig+0x368>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fc4e 	bl	800087c <HAL_InitTick>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	08016e1c 	.word	0x08016e1c
 8003ff8:	24000004 	.word	0x24000004
 8003ffc:	24000000 	.word	0x24000000
 8004000:	24000008 	.word	0x24000008

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400a:	4bb3      	ldr	r3, [pc, #716]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004012:	2b18      	cmp	r3, #24
 8004014:	f200 8155 	bhi.w	80042c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004085 	.word	0x08004085
 8004024:	080042c3 	.word	0x080042c3
 8004028:	080042c3 	.word	0x080042c3
 800402c:	080042c3 	.word	0x080042c3
 8004030:	080042c3 	.word	0x080042c3
 8004034:	080042c3 	.word	0x080042c3
 8004038:	080042c3 	.word	0x080042c3
 800403c:	080042c3 	.word	0x080042c3
 8004040:	080040ab 	.word	0x080040ab
 8004044:	080042c3 	.word	0x080042c3
 8004048:	080042c3 	.word	0x080042c3
 800404c:	080042c3 	.word	0x080042c3
 8004050:	080042c3 	.word	0x080042c3
 8004054:	080042c3 	.word	0x080042c3
 8004058:	080042c3 	.word	0x080042c3
 800405c:	080042c3 	.word	0x080042c3
 8004060:	080040b1 	.word	0x080040b1
 8004064:	080042c3 	.word	0x080042c3
 8004068:	080042c3 	.word	0x080042c3
 800406c:	080042c3 	.word	0x080042c3
 8004070:	080042c3 	.word	0x080042c3
 8004074:	080042c3 	.word	0x080042c3
 8004078:	080042c3 	.word	0x080042c3
 800407c:	080042c3 	.word	0x080042c3
 8004080:	080040b7 	.word	0x080040b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004090:	4b91      	ldr	r3, [pc, #580]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	08db      	lsrs	r3, r3, #3
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	4a90      	ldr	r2, [pc, #576]	; (80042dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
 80040a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80040a2:	e111      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040a4:	4b8d      	ldr	r3, [pc, #564]	; (80042dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040a6:	61bb      	str	r3, [r7, #24]
    break;
 80040a8:	e10e      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80040aa:	4b8d      	ldr	r3, [pc, #564]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040ac:	61bb      	str	r3, [r7, #24]
    break;
 80040ae:	e10b      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80040b0:	4b8c      	ldr	r3, [pc, #560]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80040b2:	61bb      	str	r3, [r7, #24]
    break;
 80040b4:	e108      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040b6:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80040c0:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040cc:	4b82      	ldr	r3, [pc, #520]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040d6:	4b80      	ldr	r3, [pc, #512]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	08db      	lsrs	r3, r3, #3
 80040dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80e1 	beq.w	80042bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	f000 8083 	beq.w	8004208 <HAL_RCC_GetSysClockFreq+0x204>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b02      	cmp	r3, #2
 8004106:	f200 80a1 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x248>
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x114>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d056      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004116:	e099      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004118:	4b6f      	ldr	r3, [pc, #444]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d02d      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004124:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	08db      	lsrs	r3, r3, #3
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	4a6b      	ldr	r2, [pc, #428]	; (80042dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004162:	eddf 5a61 	vldr	s11, [pc, #388]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800416a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800417e:	e087      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80042ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800418e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004192:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041c2:	e065      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d6:	4b40      	ldr	r3, [pc, #256]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004206:	e043      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eddf 6a38 	vldr	s13, [pc, #224]	; 80042f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421a:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422a:	ed97 6a02 	vldr	s12, [r7, #8]
 800422e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800424a:	e021      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	eddf 6a26 	vldr	s13, [pc, #152]	; 80042f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800425a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425e:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004272:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800428e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	0a5b      	lsrs	r3, r3, #9
 8004296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429a:	3301      	adds	r3, #1
 800429c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b4:	ee17 3a90 	vmov	r3, s15
 80042b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80042ba:	e005      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61bb      	str	r3, [r7, #24]
    break;
 80042c0:	e002      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042c4:	61bb      	str	r3, [r7, #24]
    break;
 80042c6:	bf00      	nop
  }

  return sysclockfreq;
 80042c8:	69bb      	ldr	r3, [r7, #24]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	58024400 	.word	0x58024400
 80042dc:	03d09000 	.word	0x03d09000
 80042e0:	003d0900 	.word	0x003d0900
 80042e4:	007a1200 	.word	0x007a1200
 80042e8:	46000000 	.word	0x46000000
 80042ec:	4c742400 	.word	0x4c742400
 80042f0:	4a742400 	.word	0x4a742400
 80042f4:	4af42400 	.word	0x4af42400

080042f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042fe:	f7ff fe81 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_RCC_GetHCLKFreq+0x50>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	490f      	ldr	r1, [pc, #60]	; (800434c <HAL_RCC_GetHCLKFreq+0x54>)
 8004310:	5ccb      	ldrb	r3, [r1, r3]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	fa22 f303 	lsr.w	r3, r2, r3
 800431a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCC_GetHCLKFreq+0x50>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	4a09      	ldr	r2, [pc, #36]	; (800434c <HAL_RCC_GetHCLKFreq+0x54>)
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	4a07      	ldr	r2, [pc, #28]	; (8004350 <HAL_RCC_GetHCLKFreq+0x58>)
 8004334:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <HAL_RCC_GetHCLKFreq+0x58>)
 800433e:	681b      	ldr	r3, [r3, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	58024400 	.word	0x58024400
 800434c:	08016e1c 	.word	0x08016e1c
 8004350:	24000004 	.word	0x24000004
 8004354:	24000000 	.word	0x24000000

08004358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800435c:	f7ff ffcc 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4904      	ldr	r1, [pc, #16]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	58024400 	.word	0x58024400
 8004380:	08016e1c 	.word	0x08016e1c

08004384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223f      	movs	r2, #63	; 0x3f
 8004392:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004394:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_RCC_GetClockConfig+0x7c>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0207 	and.w	r2, r3, #7
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80043a0:	4b17      	ldr	r3, [pc, #92]	; (8004400 <HAL_RCC_GetClockConfig+0x7c>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_RCC_GetClockConfig+0x7c>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <HAL_RCC_GetClockConfig+0x7c>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <HAL_RCC_GetClockConfig+0x7c>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_GetClockConfig+0x7c>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_RCC_GetClockConfig+0x7c>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_GetClockConfig+0x80>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 020f 	and.w	r2, r3, #15
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	58024400 	.word	0x58024400
 8004404:	52002000 	.word	0x52002000

08004408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e049      	b.n	80044ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f841 	bl	80044b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 f9f8 	bl	800483c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d001      	beq.n	80044e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e04f      	b.n	8004584 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a23      	ldr	r2, [pc, #140]	; (8004590 <HAL_TIM_Base_Start_IT+0xc4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d018      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <HAL_TIM_Base_Start_IT+0xc8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <HAL_TIM_Base_Start_IT+0xcc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1c      	ldr	r2, [pc, #112]	; (800459c <HAL_TIM_Base_Start_IT+0xd0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d115      	bne.n	800456e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b06      	cmp	r3, #6
 8004552:	d015      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0xb4>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455a:	d011      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	e008      	b.n	8004580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e000      	b.n	8004582 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40001800 	.word	0x40001800
 80045a8:	00010007 	.word	0x00010007

080045ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d122      	bne.n	8004608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d11b      	bne.n	8004608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0202 	mvn.w	r2, #2
 80045d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f905 	bl	80047fe <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8f7 	bl	80047ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f908 	bl	8004812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b04      	cmp	r3, #4
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b04      	cmp	r3, #4
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0204 	mvn.w	r2, #4
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8db 	bl	80047fe <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8cd 	bl	80047ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f8de 	bl	8004812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b08      	cmp	r3, #8
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b08      	cmp	r3, #8
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0208 	mvn.w	r2, #8
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2204      	movs	r2, #4
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8b1 	bl	80047fe <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8a3 	bl	80047ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8b4 	bl	8004812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0210 	mvn.w	r2, #16
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2208      	movs	r2, #8
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f887 	bl	80047fe <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f879 	bl	80047ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f88a 	bl	8004812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	d10e      	bne.n	8004730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d107      	bne.n	8004730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0201 	mvn.w	r2, #1
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fc f870 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d10e      	bne.n	800475c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d107      	bne.n	800475c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f914 	bl	8004984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476a:	d10e      	bne.n	800478a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d107      	bne.n	800478a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f907 	bl	8004998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d10e      	bne.n	80047b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d107      	bne.n	80047b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f838 	bl	8004826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d10e      	bne.n	80047e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d107      	bne.n	80047e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0220 	mvn.w	r2, #32
 80047da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f8c7 	bl	8004970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a40      	ldr	r2, [pc, #256]	; (8004950 <TIM_Base_SetConfig+0x114>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d00f      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3d      	ldr	r2, [pc, #244]	; (8004954 <TIM_Base_SetConfig+0x118>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00b      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3c      	ldr	r2, [pc, #240]	; (8004958 <TIM_Base_SetConfig+0x11c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3b      	ldr	r2, [pc, #236]	; (800495c <TIM_Base_SetConfig+0x120>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3a      	ldr	r2, [pc, #232]	; (8004960 <TIM_Base_SetConfig+0x124>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <TIM_Base_SetConfig+0x114>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d01b      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2c      	ldr	r2, [pc, #176]	; (8004954 <TIM_Base_SetConfig+0x118>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d017      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <TIM_Base_SetConfig+0x11c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <TIM_Base_SetConfig+0x120>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <TIM_Base_SetConfig+0x124>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a28      	ldr	r2, [pc, #160]	; (8004964 <TIM_Base_SetConfig+0x128>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <TIM_Base_SetConfig+0x12c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a26      	ldr	r2, [pc, #152]	; (800496c <TIM_Base_SetConfig+0x130>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a10      	ldr	r2, [pc, #64]	; (8004950 <TIM_Base_SetConfig+0x114>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00f      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a11      	ldr	r2, [pc, #68]	; (8004964 <TIM_Base_SetConfig+0x128>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <TIM_Base_SetConfig+0x12c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <TIM_Base_SetConfig+0x130>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d103      	bne.n	800493c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	615a      	str	r2, [r3, #20]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80049b2:	4b98      	ldr	r3, [pc, #608]	; (8004c14 <MX_LWIP_Init+0x268>)
 80049b4:	22c0      	movs	r2, #192	; 0xc0
 80049b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80049b8:	4b96      	ldr	r3, [pc, #600]	; (8004c14 <MX_LWIP_Init+0x268>)
 80049ba:	22a8      	movs	r2, #168	; 0xa8
 80049bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80049be:	4b95      	ldr	r3, [pc, #596]	; (8004c14 <MX_LWIP_Init+0x268>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80049c4:	4b93      	ldr	r3, [pc, #588]	; (8004c14 <MX_LWIP_Init+0x268>)
 80049c6:	220a      	movs	r2, #10
 80049c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80049ca:	4b93      	ldr	r3, [pc, #588]	; (8004c18 <MX_LWIP_Init+0x26c>)
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80049d0:	4b91      	ldr	r3, [pc, #580]	; (8004c18 <MX_LWIP_Init+0x26c>)
 80049d2:	22ff      	movs	r2, #255	; 0xff
 80049d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80049d6:	4b90      	ldr	r3, [pc, #576]	; (8004c18 <MX_LWIP_Init+0x26c>)
 80049d8:	22ff      	movs	r2, #255	; 0xff
 80049da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80049dc:	4b8e      	ldr	r3, [pc, #568]	; (8004c18 <MX_LWIP_Init+0x26c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80049e2:	4b8e      	ldr	r3, [pc, #568]	; (8004c1c <MX_LWIP_Init+0x270>)
 80049e4:	22c0      	movs	r2, #192	; 0xc0
 80049e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80049e8:	4b8c      	ldr	r3, [pc, #560]	; (8004c1c <MX_LWIP_Init+0x270>)
 80049ea:	22a8      	movs	r2, #168	; 0xa8
 80049ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80049ee:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <MX_LWIP_Init+0x270>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80049f4:	4b89      	ldr	r3, [pc, #548]	; (8004c1c <MX_LWIP_Init+0x270>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80049fa:	2100      	movs	r1, #0
 80049fc:	2000      	movs	r0, #0
 80049fe:	f004 fcf5 	bl	80093ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004a02:	4b84      	ldr	r3, [pc, #528]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	061a      	lsls	r2, r3, #24
 8004a08:	4b82      	ldr	r3, [pc, #520]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	4b80      	ldr	r3, [pc, #512]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a12:	789b      	ldrb	r3, [r3, #2]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	4313      	orrs	r3, r2
 8004a18:	4a7e      	ldr	r2, [pc, #504]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a1a:	78d2      	ldrb	r2, [r2, #3]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	061a      	lsls	r2, r3, #24
 8004a20:	4b7c      	ldr	r3, [pc, #496]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	0619      	lsls	r1, r3, #24
 8004a26:	4b7b      	ldr	r3, [pc, #492]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	4319      	orrs	r1, r3
 8004a2e:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a30:	789b      	ldrb	r3, [r3, #2]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	430b      	orrs	r3, r1
 8004a36:	4977      	ldr	r1, [pc, #476]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a38:	78c9      	ldrb	r1, [r1, #3]
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a42:	431a      	orrs	r2, r3
 8004a44:	4b73      	ldr	r3, [pc, #460]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	0619      	lsls	r1, r3, #24
 8004a4a:	4b72      	ldr	r3, [pc, #456]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	4319      	orrs	r1, r3
 8004a52:	4b70      	ldr	r3, [pc, #448]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a54:	789b      	ldrb	r3, [r3, #2]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	496e      	ldr	r1, [pc, #440]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a5c:	78c9      	ldrb	r1, [r1, #3]
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a66:	431a      	orrs	r2, r3
 8004a68:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	0619      	lsls	r1, r3, #24
 8004a6e:	4b69      	ldr	r3, [pc, #420]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	4319      	orrs	r1, r3
 8004a76:	4b67      	ldr	r3, [pc, #412]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a78:	789b      	ldrb	r3, [r3, #2]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	4965      	ldr	r1, [pc, #404]	; (8004c14 <MX_LWIP_Init+0x268>)
 8004a80:	78c9      	ldrb	r1, [r1, #3]
 8004a82:	430b      	orrs	r3, r1
 8004a84:	0e1b      	lsrs	r3, r3, #24
 8004a86:	4313      	orrs	r3, r2
 8004a88:	4a65      	ldr	r2, [pc, #404]	; (8004c20 <MX_LWIP_Init+0x274>)
 8004a8a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a8c:	4b62      	ldr	r3, [pc, #392]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	061a      	lsls	r2, r3, #24
 8004a92:	4b61      	ldr	r3, [pc, #388]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	4b5f      	ldr	r3, [pc, #380]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004a9c:	789b      	ldrb	r3, [r3, #2]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	4a5d      	ldr	r2, [pc, #372]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004aa4:	78d2      	ldrb	r2, [r2, #3]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	061a      	lsls	r2, r3, #24
 8004aaa:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	0619      	lsls	r1, r3, #24
 8004ab0:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	4319      	orrs	r1, r3
 8004ab8:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004aba:	789b      	ldrb	r3, [r3, #2]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	4955      	ldr	r1, [pc, #340]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004ac2:	78c9      	ldrb	r1, [r1, #3]
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004acc:	431a      	orrs	r2, r3
 8004ace:	4b52      	ldr	r3, [pc, #328]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	0619      	lsls	r1, r3, #24
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	4319      	orrs	r1, r3
 8004adc:	4b4e      	ldr	r3, [pc, #312]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004ade:	789b      	ldrb	r3, [r3, #2]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	494c      	ldr	r1, [pc, #304]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004ae6:	78c9      	ldrb	r1, [r1, #3]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004af0:	431a      	orrs	r2, r3
 8004af2:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	0619      	lsls	r1, r3, #24
 8004af8:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	4319      	orrs	r1, r3
 8004b00:	4b45      	ldr	r3, [pc, #276]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004b02:	789b      	ldrb	r3, [r3, #2]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	430b      	orrs	r3, r1
 8004b08:	4943      	ldr	r1, [pc, #268]	; (8004c18 <MX_LWIP_Init+0x26c>)
 8004b0a:	78c9      	ldrb	r1, [r1, #3]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	0e1b      	lsrs	r3, r3, #24
 8004b10:	4313      	orrs	r3, r2
 8004b12:	4a44      	ldr	r2, [pc, #272]	; (8004c24 <MX_LWIP_Init+0x278>)
 8004b14:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	061a      	lsls	r2, r3, #24
 8004b1c:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
 8004b24:	4b3d      	ldr	r3, [pc, #244]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b26:	789b      	ldrb	r3, [r3, #2]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	4a3b      	ldr	r2, [pc, #236]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b2e:	78d2      	ldrb	r2, [r2, #3]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	061a      	lsls	r2, r3, #24
 8004b34:	4b39      	ldr	r3, [pc, #228]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	0619      	lsls	r1, r3, #24
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b3c:	785b      	ldrb	r3, [r3, #1]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	4319      	orrs	r1, r3
 8004b42:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b44:	789b      	ldrb	r3, [r3, #2]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	4934      	ldr	r1, [pc, #208]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b4c:	78c9      	ldrb	r1, [r1, #3]
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b56:	431a      	orrs	r2, r3
 8004b58:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	0619      	lsls	r1, r3, #24
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	4319      	orrs	r1, r3
 8004b66:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b68:	789b      	ldrb	r3, [r3, #2]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	492b      	ldr	r1, [pc, #172]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b70:	78c9      	ldrb	r1, [r1, #3]
 8004b72:	430b      	orrs	r3, r1
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	0619      	lsls	r1, r3, #24
 8004b82:	4b26      	ldr	r3, [pc, #152]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	4319      	orrs	r1, r3
 8004b8a:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b8c:	789b      	ldrb	r3, [r3, #2]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	430b      	orrs	r3, r1
 8004b92:	4922      	ldr	r1, [pc, #136]	; (8004c1c <MX_LWIP_Init+0x270>)
 8004b94:	78c9      	ldrb	r1, [r1, #3]
 8004b96:	430b      	orrs	r3, r1
 8004b98:	0e1b      	lsrs	r3, r3, #24
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <MX_LWIP_Init+0x27c>)
 8004b9e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004ba0:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <MX_LWIP_Init+0x280>)
 8004ba2:	9302      	str	r3, [sp, #8]
 8004ba4:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <MX_LWIP_Init+0x284>)
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <MX_LWIP_Init+0x27c>)
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <MX_LWIP_Init+0x278>)
 8004bb0:	491b      	ldr	r1, [pc, #108]	; (8004c20 <MX_LWIP_Init+0x274>)
 8004bb2:	4820      	ldr	r0, [pc, #128]	; (8004c34 <MX_LWIP_Init+0x288>)
 8004bb4:	f005 f9e0 	bl	8009f78 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004bb8:	481e      	ldr	r0, [pc, #120]	; (8004c34 <MX_LWIP_Init+0x288>)
 8004bba:	f005 fb8f 	bl	800a2dc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <MX_LWIP_Init+0x288>)
 8004bc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bc4:	089b      	lsrs	r3, r3, #2
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004bd0:	4818      	ldr	r0, [pc, #96]	; (8004c34 <MX_LWIP_Init+0x288>)
 8004bd2:	f005 fb93 	bl	800a2fc <netif_set_up>
 8004bd6:	e002      	b.n	8004bde <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004bd8:	4816      	ldr	r0, [pc, #88]	; (8004c34 <MX_LWIP_Init+0x288>)
 8004bda:	f005 fbfb 	bl	800a3d4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004bde:	4916      	ldr	r1, [pc, #88]	; (8004c38 <MX_LWIP_Init+0x28c>)
 8004be0:	4814      	ldr	r0, [pc, #80]	; (8004c34 <MX_LWIP_Init+0x288>)
 8004be2:	f005 fc8d 	bl	800a500 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004be6:	2224      	movs	r2, #36	; 0x24
 8004be8:	2100      	movs	r1, #0
 8004bea:	4814      	ldr	r0, [pc, #80]	; (8004c3c <MX_LWIP_Init+0x290>)
 8004bec:	f00e fb4e 	bl	801328c <memset>
  attributes.name = "EthLink";
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <MX_LWIP_Init+0x290>)
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <MX_LWIP_Init+0x294>)
 8004bf4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <MX_LWIP_Init+0x290>)
 8004bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bfc:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <MX_LWIP_Init+0x290>)
 8004c00:	2210      	movs	r2, #16
 8004c02:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <MX_LWIP_Init+0x290>)
 8004c06:	490b      	ldr	r1, [pc, #44]	; (8004c34 <MX_LWIP_Init+0x288>)
 8004c08:	480e      	ldr	r0, [pc, #56]	; (8004c44 <MX_LWIP_Init+0x298>)
 8004c0a:	f000 fd3a 	bl	8005682 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	24005220 	.word	0x24005220
 8004c18:	2400521c 	.word	0x2400521c
 8004c1c:	240051bc 	.word	0x240051bc
 8004c20:	24005218 	.word	0x24005218
 8004c24:	24005224 	.word	0x24005224
 8004c28:	24005228 	.word	0x24005228
 8004c2c:	08009329 	.word	0x08009329
 8004c30:	08005309 	.word	0x08005309
 8004c34:	240051e4 	.word	0x240051e4
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	240051c0 	.word	0x240051c0
 8004c40:	080142f4 	.word	0x080142f4
 8004c44:	08005431 	.word	0x08005431

08004c48 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	; 0x38
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a5d      	ldr	r2, [pc, #372]	; (8004df0 <HAL_ETH_MspInit+0x194>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	f040 80b3 	bne.w	8004de6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004c80:	4b5c      	ldr	r3, [pc, #368]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004c82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c86:	4a5b      	ldr	r2, [pc, #364]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c90:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004c92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004c9e:	4b55      	ldr	r3, [pc, #340]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004ca4:	4a53      	ldr	r2, [pc, #332]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004caa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004cae:	4b51      	ldr	r3, [pc, #324]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cc2:	4a4c      	ldr	r2, [pc, #304]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004ccc:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cda:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ce0:	4a44      	ldr	r2, [pc, #272]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004ce2:	f043 0304 	orr.w	r3, r3, #4
 8004ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cea:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cfe:	4a3d      	ldr	r2, [pc, #244]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d08:	4b3a      	ldr	r3, [pc, #232]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d16:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d1c:	4a35      	ldr	r2, [pc, #212]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d1e:	f043 0302 	orr.w	r3, r3, #2
 8004d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d26:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d3a:	4a2e      	ldr	r2, [pc, #184]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <HAL_ETH_MspInit+0x198>)
 8004d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004d52:	2332      	movs	r3, #50	; 0x32
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d56:	2302      	movs	r3, #2
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d62:	230b      	movs	r3, #11
 8004d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4822      	ldr	r0, [pc, #136]	; (8004df8 <HAL_ETH_MspInit+0x19c>)
 8004d6e:	f7fe f97f 	bl	8003070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004d72:	2386      	movs	r3, #134	; 0x86
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d76:	2302      	movs	r3, #2
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d82:	230b      	movs	r3, #11
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	481b      	ldr	r0, [pc, #108]	; (8004dfc <HAL_ETH_MspInit+0x1a0>)
 8004d8e:	f7fe f96f 	bl	8003070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da0:	2303      	movs	r3, #3
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004da4:	230b      	movs	r3, #11
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dac:	4619      	mov	r1, r3
 8004dae:	4814      	ldr	r0, [pc, #80]	; (8004e00 <HAL_ETH_MspInit+0x1a4>)
 8004db0:	f7fe f95e 	bl	8003070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004db4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dc6:	230b      	movs	r3, #11
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dce:	4619      	mov	r1, r3
 8004dd0:	480c      	ldr	r0, [pc, #48]	; (8004e04 <HAL_ETH_MspInit+0x1a8>)
 8004dd2:	f7fe f94d 	bl	8003070 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2105      	movs	r1, #5
 8004dda:	203d      	movs	r0, #61	; 0x3d
 8004ddc:	f7fc f9f8 	bl	80011d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004de0:	203d      	movs	r0, #61	; 0x3d
 8004de2:	f7fc fa0f 	bl	8001204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004de6:	bf00      	nop
 8004de8:	3738      	adds	r7, #56	; 0x38
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40028000 	.word	0x40028000
 8004df4:	58024400 	.word	0x58024400
 8004df8:	58020800 	.word	0x58020800
 8004dfc:	58020000 	.word	0x58020000
 8004e00:	58020400 	.word	0x58020400
 8004e04:	58021800 	.word	0x58021800

08004e08 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <HAL_ETH_RxCpltCallback+0x1c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fecb 	bl	8005bb0 <osSemaphoreRelease>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	240000b8 	.word	0x240000b8

08004e28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b0ac      	sub	sp, #176	; 0xb0
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e42:	4b8f      	ldr	r3, [pc, #572]	; (8005080 <low_level_init+0x258>)
 8004e44:	4a8f      	ldr	r2, [pc, #572]	; (8005084 <low_level_init+0x25c>)
 8004e46:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004e50:	23e1      	movs	r3, #225	; 0xe1
 8004e52:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004e60:	4a87      	ldr	r2, [pc, #540]	; (8005080 <low_level_init+0x258>)
 8004e62:	f107 030c 	add.w	r3, r7, #12
 8004e66:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004e68:	4b85      	ldr	r3, [pc, #532]	; (8005080 <low_level_init+0x258>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004e6e:	4b84      	ldr	r3, [pc, #528]	; (8005080 <low_level_init+0x258>)
 8004e70:	4a85      	ldr	r2, [pc, #532]	; (8005088 <low_level_init+0x260>)
 8004e72:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004e74:	4b82      	ldr	r3, [pc, #520]	; (8005080 <low_level_init+0x258>)
 8004e76:	4a85      	ldr	r2, [pc, #532]	; (800508c <low_level_init+0x264>)
 8004e78:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004e7a:	4b81      	ldr	r3, [pc, #516]	; (8005080 <low_level_init+0x258>)
 8004e7c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e80:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e82:	487f      	ldr	r0, [pc, #508]	; (8005080 <low_level_init+0x258>)
 8004e84:	f7fc fa48 	bl	8001318 <HAL_ETH_Init>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004e8e:	2234      	movs	r2, #52	; 0x34
 8004e90:	2100      	movs	r1, #0
 8004e92:	487f      	ldr	r0, [pc, #508]	; (8005090 <low_level_init+0x268>)
 8004e94:	f00e f9fa 	bl	801328c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004e98:	4b7d      	ldr	r3, [pc, #500]	; (8005090 <low_level_init+0x268>)
 8004e9a:	2221      	movs	r2, #33	; 0x21
 8004e9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004e9e:	4b7c      	ldr	r3, [pc, #496]	; (8005090 <low_level_init+0x268>)
 8004ea0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004ea4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004ea6:	4b7a      	ldr	r3, [pc, #488]	; (8005090 <low_level_init+0x268>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004eac:	4879      	ldr	r0, [pc, #484]	; (8005094 <low_level_init+0x26c>)
 8004eae:	f004 ff1d 	bl	8009cec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2206      	movs	r2, #6
 8004eb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004eba:	4b71      	ldr	r3, [pc, #452]	; (8005080 <low_level_init+0x258>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ec6:	4b6e      	ldr	r3, [pc, #440]	; (8005080 <low_level_init+0x258>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	785a      	ldrb	r2, [r3, #1]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ed2:	4b6b      	ldr	r3, [pc, #428]	; (8005080 <low_level_init+0x258>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	789a      	ldrb	r2, [r3, #2]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004ede:	4b68      	ldr	r3, [pc, #416]	; (8005080 <low_level_init+0x258>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	78da      	ldrb	r2, [r3, #3]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004eea:	4b65      	ldr	r3, [pc, #404]	; (8005080 <low_level_init+0x258>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	791a      	ldrb	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ef6:	4b62      	ldr	r3, [pc, #392]	; (8005080 <low_level_init+0x258>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	795a      	ldrb	r2, [r3, #5]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f08:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f10:	f043 030a 	orr.w	r3, r3, #10
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f22:	e012      	b.n	8004f4a <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8004f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	4a59      	ldr	r2, [pc, #356]	; (8005098 <low_level_init+0x270>)
 8004f32:	441a      	add	r2, r3
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004f3a:	4851      	ldr	r0, [pc, #324]	; (8005080 <low_level_init+0x258>)
 8004f3c:	f7fc fac6 	bl	80014cc <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8004f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f44:	3301      	adds	r3, #1
 8004f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d9e8      	bls.n	8004f24 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004f52:	2200      	movs	r2, #0
 8004f54:	2101      	movs	r1, #1
 8004f56:	2001      	movs	r0, #1
 8004f58:	f000 fd4f 	bl	80059fa <osSemaphoreNew>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4a4f      	ldr	r2, [pc, #316]	; (800509c <low_level_init+0x274>)
 8004f60:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004f62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f66:	2224      	movs	r2, #36	; 0x24
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f00e f98e 	bl	801328c <memset>
  attributes.name = "EthIf";
 8004f70:	4b4b      	ldr	r3, [pc, #300]	; (80050a0 <low_level_init+0x278>)
 8004f72:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004f74:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 8004f7c:	2330      	movs	r3, #48	; 0x30
 8004f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8004f82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f86:	461a      	mov	r2, r3
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4846      	ldr	r0, [pc, #280]	; (80050a4 <low_level_init+0x27c>)
 8004f8c:	f000 fb79 	bl	8005682 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004f90:	4945      	ldr	r1, [pc, #276]	; (80050a8 <low_level_init+0x280>)
 8004f92:	4846      	ldr	r0, [pc, #280]	; (80050ac <low_level_init+0x284>)
 8004f94:	f7fb fe87 	bl	8000ca6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004f98:	4844      	ldr	r0, [pc, #272]	; (80050ac <low_level_init+0x284>)
 8004f9a:	f7fb feb6 	bl	8000d0a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004f9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d165      	bne.n	8005072 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004fa6:	4841      	ldr	r0, [pc, #260]	; (80050ac <low_level_init+0x284>)
 8004fa8:	f7fb ff57 	bl	8000e5a <LAN8742_GetLinkState>
 8004fac:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	dc06      	bgt.n	8004fc6 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f005 fa71 	bl	800a4a0 <netif_set_link_down>
      netif_set_down(netif);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f005 fa08 	bl	800a3d4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004fc4:	e057      	b.n	8005076 <low_level_init+0x24e>
 8004fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fca:	3b02      	subs	r3, #2
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d82b      	bhi.n	8005028 <low_level_init+0x200>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <low_level_init+0x1b0>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004fe9 	.word	0x08004fe9
 8004fdc:	08004ffb 	.word	0x08004ffb
 8004fe0:	0800500b 	.word	0x0800500b
 8004fe4:	0800501b 	.word	0x0800501b
        duplex = ETH_FULLDUPLEX_MODE;
 8004fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8004ff0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8004ff8:	e01f      	b.n	800503a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8005000:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005008:	e017      	b.n	800503a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800500a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800500e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8005012:	2300      	movs	r3, #0
 8005014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005018:	e00f      	b.n	800503a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800501a:	2300      	movs	r3, #0
 800501c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8005020:	2300      	movs	r3, #0
 8005022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005026:	e008      	b.n	800503a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8005028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800502c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8005030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005038:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	4619      	mov	r1, r3
 8005040:	480f      	ldr	r0, [pc, #60]	; (8005080 <low_level_init+0x258>)
 8005042:	f7fd f815 	bl	8002070 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 800504c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	4619      	mov	r1, r3
 8005058:	4809      	ldr	r0, [pc, #36]	; (8005080 <low_level_init+0x258>)
 800505a:	f7fd f9dd 	bl	8002418 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800505e:	4808      	ldr	r0, [pc, #32]	; (8005080 <low_level_init+0x258>)
 8005060:	f7fc fa75 	bl	800154e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f005 f949 	bl	800a2fc <netif_set_up>
    netif_set_link_up(netif);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f005 f9e4 	bl	800a438 <netif_set_link_up>
}
 8005070:	e001      	b.n	8005076 <low_level_init+0x24e>
    Error_Handler();
 8005072:	f7fb fbdf 	bl	8000834 <Error_Handler>
}
 8005076:	bf00      	nop
 8005078:	37b0      	adds	r7, #176	; 0xb0
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	24005318 	.word	0x24005318
 8005084:	40028000 	.word	0x40028000
 8005088:	30040060 	.word	0x30040060
 800508c:	30040000 	.word	0x30040000
 8005090:	240053a0 	.word	0x240053a0
 8005094:	08016e2c 	.word	0x08016e2c
 8005098:	30040200 	.word	0x30040200
 800509c:	240000b8 	.word	0x240000b8
 80050a0:	080142fc 	.word	0x080142fc
 80050a4:	080052b9 	.word	0x080052b9
 80050a8:	24000010 	.word	0x24000010
 80050ac:	240052f8 	.word	0x240052f8

080050b0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b092      	sub	sp, #72	; 0x48
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80050c4:	f107 030c 	add.w	r3, r7, #12
 80050c8:	2230      	movs	r2, #48	; 0x30
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f00e f8dd 	bl	801328c <memset>

  for(q = p; q != NULL; q = q->next)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	643b      	str	r3, [r7, #64]	; 0x40
 80050d6:	e049      	b.n	800516c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 80050d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d902      	bls.n	80050e4 <low_level_output+0x34>
      return ERR_IF;
 80050de:	f06f 030b 	mvn.w	r3, #11
 80050e2:	e056      	b.n	8005192 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 80050e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e6:	6859      	ldr	r1, [r3, #4]
 80050e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050f6:	4413      	add	r3, r2
 80050f8:	3b3c      	subs	r3, #60	; 0x3c
 80050fa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	895b      	ldrh	r3, [r3, #10]
 8005100:	4619      	mov	r1, r3
 8005102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005110:	4413      	add	r3, r2
 8005112:	3b38      	subs	r3, #56	; 0x38
 8005114:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005118:	2b00      	cmp	r3, #0
 800511a:	d012      	beq.n	8005142 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800511c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	f107 000c 	add.w	r0, r7, #12
 8005124:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005126:	460b      	mov	r3, r1
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	440b      	add	r3, r1
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	18c1      	adds	r1, r0, r3
 8005130:	4613      	mov	r3, r2
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800513c:	4413      	add	r3, r2
 800513e:	3b34      	subs	r3, #52	; 0x34
 8005140:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800514a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005158:	4413      	add	r3, r2
 800515a:	3b34      	subs	r3, #52	; 0x34
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005162:	3301      	adds	r3, #1
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1b2      	bne.n	80050d8 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	891b      	ldrh	r3, [r3, #8]
 8005176:	461a      	mov	r2, r3
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <low_level_output+0xec>)
 800517a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800517c:	4a07      	ldr	r2, [pc, #28]	; (800519c <low_level_output+0xec>)
 800517e:	f107 030c 	add.w	r3, r7, #12
 8005182:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005184:	2214      	movs	r2, #20
 8005186:	4905      	ldr	r1, [pc, #20]	; (800519c <low_level_output+0xec>)
 8005188:	4805      	ldr	r0, [pc, #20]	; (80051a0 <low_level_output+0xf0>)
 800518a:	f7fc fadf 	bl	800174c <HAL_ETH_Transmit>

  return errval;
 800518e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005192:	4618      	mov	r0, r3
 8005194:	3748      	adds	r7, #72	; 0x48
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	240053a0 	.word	0x240053a0
 80051a0:	24005318 	.word	0x24005318

080051a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b098      	sub	sp, #96	; 0x60
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	2300      	movs	r3, #0
 80051b6:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80051b8:	f107 030c 	add.w	r3, r7, #12
 80051bc:	2230      	movs	r2, #48	; 0x30
 80051be:	2100      	movs	r1, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f00e f863 	bl	801328c <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ca:	e015      	b.n	80051f8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 80051cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	f107 010c 	add.w	r1, r7, #12
 80051d4:	4613      	mov	r3, r2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4419      	add	r1, r3
 80051de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80051ec:	4413      	add	r3, r2
 80051ee:	3b44      	subs	r3, #68	; 0x44
 80051f0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80051f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f4:	3301      	adds	r3, #1
 80051f6:	653b      	str	r3, [r7, #80]	; 0x50
 80051f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d9e6      	bls.n	80051cc <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	4619      	mov	r1, r3
 8005204:	4828      	ldr	r0, [pc, #160]	; (80052a8 <low_level_input+0x104>)
 8005206:	f7fc fc1a 	bl	8001a3e <HAL_ETH_GetRxDataBuffer>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d145      	bne.n	800529c <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	4619      	mov	r1, r3
 8005216:	4824      	ldr	r0, [pc, #144]	; (80052a8 <low_level_input+0x104>)
 8005218:	f7fc fcaf 	bl	8001b7a <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800521c:	4822      	ldr	r0, [pc, #136]	; (80052a8 <low_level_input+0x104>)
 800521e:	f7fc fcdf 	bl	8001be0 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	64bb      	str	r3, [r7, #72]	; 0x48
 8005228:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800522a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522c:	2b00      	cmp	r3, #0
 800522e:	dd1d      	ble.n	800526c <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005232:	f003 021f 	and.w	r2, r3, #31
 8005236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005238:	4413      	add	r3, r2
 800523a:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800523c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8005240:	f3bf 8f4f 	dsb	sy
}
 8005244:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005246:	4a19      	ldr	r2, [pc, #100]	; (80052ac <low_level_input+0x108>)
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800524e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005250:	3320      	adds	r3, #32
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005256:	3b20      	subs	r3, #32
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800525a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	dcf2      	bgt.n	8005246 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8005260:	f3bf 8f4f 	dsb	sy
}
 8005264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005266:	f3bf 8f6f 	isb	sy
}
 800526a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800526c:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800526e:	4810      	ldr	r0, [pc, #64]	; (80052b0 <low_level_input+0x10c>)
 8005270:	f004 fdb8 	bl	8009de4 <memp_malloc_pool>
 8005274:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00f      	beq.n	800529c <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <low_level_input+0x110>)
 8005280:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	b299      	uxth	r1, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	b292      	uxth	r2, r2
 800528c:	9201      	str	r2, [sp, #4]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	2241      	movs	r2, #65	; 0x41
 8005294:	2000      	movs	r0, #0
 8005296:	f005 fb27 	bl	800a8e8 <pbuf_alloced_custom>
 800529a:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800529c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3758      	adds	r7, #88	; 0x58
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	24005318 	.word	0x24005318
 80052ac:	e000ed00 	.word	0xe000ed00
 80052b0:	08016e2c 	.word	0x08016e2c
 80052b4:	08005365 	.word	0x08005365

080052b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <ethernetif_input+0x4c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f04f 31ff 	mov.w	r1, #4294967295
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fc1d 	bl	8005b0c <osSemaphoreAcquire>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f5      	bne.n	80052c4 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff ff63 	bl	80051a4 <low_level_input>
 80052de:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	68b8      	ldr	r0, [r7, #8]
 80052ee:	4798      	blx	r3
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80052f6:	68b8      	ldr	r0, [r7, #8]
 80052f8:	f005 fcb0 	bl	800ac5c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1ea      	bne.n	80052d8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005302:	e7df      	b.n	80052c4 <ethernetif_input+0xc>
 8005304:	240000b8 	.word	0x240000b8

08005308 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <ethernetif_init+0x1c>
 8005316:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <ethernetif_init+0x48>)
 8005318:	f240 224d 	movw	r2, #589	; 0x24d
 800531c:	490d      	ldr	r1, [pc, #52]	; (8005354 <ethernetif_init+0x4c>)
 800531e:	480e      	ldr	r0, [pc, #56]	; (8005358 <ethernetif_init+0x50>)
 8005320:	f00d ffbc 	bl	801329c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2273      	movs	r2, #115	; 0x73
 8005328:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2274      	movs	r2, #116	; 0x74
 8005330:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <ethernetif_init+0x54>)
 8005338:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a08      	ldr	r2, [pc, #32]	; (8005360 <ethernetif_init+0x58>)
 800533e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fd71 	bl	8004e28 <low_level_init>

  return ERR_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	08014304 	.word	0x08014304
 8005354:	08014320 	.word	0x08014320
 8005358:	08014330 	.word	0x08014330
 800535c:	08011341 	.word	0x08011341
 8005360:	080050b1 	.word	0x080050b1

08005364 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	4803      	ldr	r0, [pc, #12]	; (8005380 <pbuf_free_custom+0x1c>)
 8005374:	f004 fdaa 	bl	8009ecc <memp_free_pool>
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	08016e2c 	.word	0x08016e2c

08005384 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005388:	f7fb fe3e 	bl	8001008 <HAL_GetTick>
 800538c:	4603      	mov	r3, r0
}
 800538e:	4618      	mov	r0, r3
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <ETH_PHY_IO_Init+0x10>)
 800539a:	f7fd f857 	bl	800244c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	24005318 	.word	0x24005318

080053a8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return 0;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	4807      	ldr	r0, [pc, #28]	; (80053e8 <ETH_PHY_IO_ReadReg+0x30>)
 80053cc:	f7fc fda8 	bl	8001f20 <HAL_ETH_ReadPHYRegister>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	e000      	b.n	80053de <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	24005318 	.word	0x24005318

080053ec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	4807      	ldr	r0, [pc, #28]	; (800541c <ETH_PHY_IO_WriteReg+0x30>)
 8005400:	f7fc fde2 	bl	8001fc8 <HAL_ETH_WritePHYRegister>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	e000      	b.n	8005412 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	24005318 	.word	0x24005318

08005420 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005424:	f7fb fdf0 	bl	8001008 <HAL_GetTick>
 8005428:	4603      	mov	r3, r0
}
 800542a:	4618      	mov	r0, r3
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b0a0      	sub	sp, #128	; 0x80
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8005438:	2300      	movs	r3, #0
 800543a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800543c:	2300      	movs	r3, #0
 800543e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005440:	2300      	movs	r3, #0
 8005442:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005448:	483a      	ldr	r0, [pc, #232]	; (8005534 <ethernet_link_thread+0x104>)
 800544a:	f7fb fd06 	bl	8000e5a <LAN8742_GetLinkState>
 800544e:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005456:	089b      	lsrs	r3, r3, #2
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00c      	beq.n	800547c <ethernet_link_thread+0x4c>
 8005462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005464:	2b01      	cmp	r3, #1
 8005466:	dc09      	bgt.n	800547c <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8005468:	4833      	ldr	r0, [pc, #204]	; (8005538 <ethernet_link_thread+0x108>)
 800546a:	f7fc f8f5 	bl	8001658 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800546e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005470:	f004 ffb0 	bl	800a3d4 <netif_set_down>
    netif_set_link_down(netif);
 8005474:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005476:	f005 f813 	bl	800a4a0 <netif_set_link_down>
 800547a:	e056      	b.n	800552a <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800547c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800547e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d14f      	bne.n	800552a <ethernet_link_thread+0xfa>
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	2b01      	cmp	r3, #1
 800548e:	dd4c      	ble.n	800552a <ethernet_link_thread+0xfa>
 8005490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005492:	3b02      	subs	r3, #2
 8005494:	2b03      	cmp	r3, #3
 8005496:	d82b      	bhi.n	80054f0 <ethernet_link_thread+0xc0>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <ethernet_link_thread+0x70>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054b1 	.word	0x080054b1
 80054a4:	080054c3 	.word	0x080054c3
 80054a8:	080054d3 	.word	0x080054d3
 80054ac:	080054e3 	.word	0x080054e3
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80054b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054bc:	2301      	movs	r3, #1
 80054be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054c0:	e017      	b.n	80054f2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054cc:	2301      	movs	r3, #1
 80054ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054d0:	e00f      	b.n	80054f2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80054d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054d6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054d8:	2300      	movs	r3, #0
 80054da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054dc:	2301      	movs	r3, #1
 80054de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054e0:	e007      	b.n	80054f2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054e6:	2300      	movs	r3, #0
 80054e8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054ee:	e000      	b.n	80054f2 <ethernet_link_thread+0xc2>
    default:
      break;
 80054f0:	bf00      	nop
    }

    if(linkchanged)
 80054f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d018      	beq.n	800552a <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80054f8:	f107 0308 	add.w	r3, r7, #8
 80054fc:	4619      	mov	r1, r3
 80054fe:	480e      	ldr	r0, [pc, #56]	; (8005538 <ethernet_link_thread+0x108>)
 8005500:	f7fc fdb6 	bl	8002070 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005506:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800550c:	f107 0308 	add.w	r3, r7, #8
 8005510:	4619      	mov	r1, r3
 8005512:	4809      	ldr	r0, [pc, #36]	; (8005538 <ethernet_link_thread+0x108>)
 8005514:	f7fc ff80 	bl	8002418 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8005518:	4807      	ldr	r0, [pc, #28]	; (8005538 <ethernet_link_thread+0x108>)
 800551a:	f7fc f818 	bl	800154e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800551e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005520:	f004 feec 	bl	800a2fc <netif_set_up>
      netif_set_link_up(netif);
 8005524:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005526:	f004 ff87 	bl	800a438 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800552a:	2064      	movs	r0, #100	; 0x64
 800552c:	f000 f93c 	bl	80057a8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005530:	e78a      	b.n	8005448 <ethernet_link_thread+0x18>
 8005532:	bf00      	nop
 8005534:	240052f8 	.word	0x240052f8
 8005538:	24005318 	.word	0x24005318

0800553c <__NVIC_SetPriority>:
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800554c:	2b00      	cmp	r3, #0
 800554e:	db0a      	blt.n	8005566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	490c      	ldr	r1, [pc, #48]	; (8005588 <__NVIC_SetPriority+0x4c>)
 8005556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	440b      	add	r3, r1
 8005560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005564:	e00a      	b.n	800557c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4908      	ldr	r1, [pc, #32]	; (800558c <__NVIC_SetPriority+0x50>)
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	3b04      	subs	r3, #4
 8005574:	0112      	lsls	r2, r2, #4
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	440b      	add	r3, r1
 800557a:	761a      	strb	r2, [r3, #24]
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000e100 	.word	0xe000e100
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <SysTick_Handler+0x1c>)
 8005596:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005598:	f002 fc6c 	bl	8007e74 <xTaskGetSchedulerState>
 800559c:	4603      	mov	r3, r0
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d001      	beq.n	80055a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055a2:	f003 fb51 	bl	8008c48 <xPortSysTickHandler>
  }
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	e000e010 	.word	0xe000e010

080055b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055b4:	2100      	movs	r1, #0
 80055b6:	f06f 0004 	mvn.w	r0, #4
 80055ba:	f7ff ffbf 	bl	800553c <__NVIC_SetPriority>
#endif
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ca:	f3ef 8305 	mrs	r3, IPSR
 80055ce:	603b      	str	r3, [r7, #0]
  return(result);
 80055d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055d6:	f06f 0305 	mvn.w	r3, #5
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	e00c      	b.n	80055f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <osKernelInitialize+0x44>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <osKernelInitialize+0x44>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	607b      	str	r3, [r7, #4]
 80055f0:	e002      	b.n	80055f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055f8:	687b      	ldr	r3, [r7, #4]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	240000c0 	.word	0x240000c0

0800560c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	603b      	str	r3, [r7, #0]
  return(result);
 8005618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osKernelStart+0x1a>
    stat = osErrorISR;
 800561e:	f06f 0305 	mvn.w	r3, #5
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	e010      	b.n	8005648 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <osKernelStart+0x48>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d109      	bne.n	8005642 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800562e:	f7ff ffbf 	bl	80055b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <osKernelStart+0x48>)
 8005634:	2202      	movs	r2, #2
 8005636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005638:	f001 ffb2 	bl	80075a0 <vTaskStartScheduler>
      stat = osOK;
 800563c:	2300      	movs	r3, #0
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	e002      	b.n	8005648 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005648:	687b      	ldr	r3, [r7, #4]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	240000c0 	.word	0x240000c0

08005658 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800565e:	f3ef 8305 	mrs	r3, IPSR
 8005662:	603b      	str	r3, [r7, #0]
  return(result);
 8005664:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800566a:	f002 f8bb 	bl	80077e4 <xTaskGetTickCountFromISR>
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	e002      	b.n	8005678 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005672:	f002 f8a7 	bl	80077c4 <xTaskGetTickCount>
 8005676:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005678:	687b      	ldr	r3, [r7, #4]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005682:	b580      	push	{r7, lr}
 8005684:	b08e      	sub	sp, #56	; 0x38
 8005686:	af04      	add	r7, sp, #16
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005692:	f3ef 8305 	mrs	r3, IPSR
 8005696:	617b      	str	r3, [r7, #20]
  return(result);
 8005698:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800569a:	2b00      	cmp	r3, #0
 800569c:	d17f      	bne.n	800579e <osThreadNew+0x11c>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d07c      	beq.n	800579e <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80056a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056aa:	2318      	movs	r3, #24
 80056ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d045      	beq.n	800574a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <osThreadNew+0x4a>
        name = attr->name;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <osThreadNew+0x70>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b38      	cmp	r3, #56	; 0x38
 80056e4:	d805      	bhi.n	80056f2 <osThreadNew+0x70>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <osThreadNew+0x74>
        return (NULL);
 80056f2:	2300      	movs	r3, #0
 80056f4:	e054      	b.n	80057a0 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <osThreadNew+0xaa>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b5b      	cmp	r3, #91	; 0x5b
 8005714:	d90a      	bls.n	800572c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <osThreadNew+0xaa>
        mem = 1;
 8005726:	2301      	movs	r3, #1
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	e010      	b.n	800574e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10c      	bne.n	800574e <osThreadNew+0xcc>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d108      	bne.n	800574e <osThreadNew+0xcc>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <osThreadNew+0xcc>
          mem = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	e001      	b.n	800574e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d110      	bne.n	8005776 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800575c:	9202      	str	r2, [sp, #8]
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6a3a      	ldr	r2, [r7, #32]
 8005768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f001 fd42 	bl	80071f4 <xTaskCreateStatic>
 8005770:	4603      	mov	r3, r0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e013      	b.n	800579e <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d110      	bne.n	800579e <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	b29a      	uxth	r2, r3
 8005780:	f107 0310 	add.w	r3, r7, #16
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f001 fd8d 	bl	80072ae <xTaskCreate>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d001      	beq.n	800579e <osThreadNew+0x11c>
            hTask = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800579e:	693b      	ldr	r3, [r7, #16]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3728      	adds	r7, #40	; 0x28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b0:	f3ef 8305 	mrs	r3, IPSR
 80057b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80057b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <osDelay+0x1c>
    stat = osErrorISR;
 80057bc:	f06f 0305 	mvn.w	r3, #5
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	e007      	b.n	80057d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 feb2 	bl	8007538 <vTaskDelay>
    }
  }

  return (stat);
 80057d4:	68fb      	ldr	r3, [r7, #12]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80057de:	b580      	push	{r7, lr}
 80057e0:	b088      	sub	sp, #32
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ea:	f3ef 8305 	mrs	r3, IPSR
 80057ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80057f0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d174      	bne.n	80058e0 <osMutexNew+0x102>
    if (attr != NULL) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <osMutexNew+0x26>
      type = attr->attr_bits;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e001      	b.n	8005808 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <osMutexNew+0x3a>
      rmtx = 1U;
 8005812:	2301      	movs	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e001      	b.n	800581c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d15c      	bne.n	80058e0 <osMutexNew+0x102>
      mem = -1;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d015      	beq.n	800585e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d006      	beq.n	8005848 <osMutexNew+0x6a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b4f      	cmp	r3, #79	; 0x4f
 8005840:	d902      	bls.n	8005848 <osMutexNew+0x6a>
          mem = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e00c      	b.n	8005862 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <osMutexNew+0x84>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <osMutexNew+0x84>
            mem = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e001      	b.n	8005862 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d112      	bne.n	800588e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4619      	mov	r1, r3
 8005874:	2004      	movs	r0, #4
 8005876:	f000 fd68 	bl	800634a <xQueueCreateMutexStatic>
 800587a:	61f8      	str	r0, [r7, #28]
 800587c:	e016      	b.n	80058ac <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4619      	mov	r1, r3
 8005884:	2001      	movs	r0, #1
 8005886:	f000 fd60 	bl	800634a <xQueueCreateMutexStatic>
 800588a:	61f8      	str	r0, [r7, #28]
 800588c:	e00e      	b.n	80058ac <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800589a:	2004      	movs	r0, #4
 800589c:	f000 fd3d 	bl	800631a <xQueueCreateMutex>
 80058a0:	61f8      	str	r0, [r7, #28]
 80058a2:	e003      	b.n	80058ac <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80058a4:	2001      	movs	r0, #1
 80058a6:	f000 fd38 	bl	800631a <xQueueCreateMutex>
 80058aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00c      	beq.n	80058cc <osMutexNew+0xee>
        if (attr != NULL) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <osMutexNew+0xe2>
          name = attr->name;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e001      	b.n	80058c4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	69f8      	ldr	r0, [r7, #28]
 80058c8:	f001 fc0c 	bl	80070e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <osMutexNew+0x102>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80058e0:	69fb      	ldr	r3, [r7, #28]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005908:	f3ef 8305 	mrs	r3, IPSR
 800590c:	60bb      	str	r3, [r7, #8]
  return(result);
 800590e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005914:	f06f 0305 	mvn.w	r3, #5
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e02c      	b.n	8005976 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005922:	f06f 0303 	mvn.w	r3, #3
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e025      	b.n	8005976 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d011      	beq.n	8005954 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	6938      	ldr	r0, [r7, #16]
 8005934:	f000 fd58 	bl	80063e8 <xQueueTakeMutexRecursive>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d01b      	beq.n	8005976 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005944:	f06f 0301 	mvn.w	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e014      	b.n	8005976 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800594c:	f06f 0302 	mvn.w	r3, #2
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	e010      	b.n	8005976 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6938      	ldr	r0, [r7, #16]
 8005958:	f001 f8ec 	bl	8006b34 <xQueueSemaphoreTake>
 800595c:	4603      	mov	r3, r0
 800595e:	2b01      	cmp	r3, #1
 8005960:	d009      	beq.n	8005976 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005968:	f06f 0301 	mvn.w	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e002      	b.n	8005976 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005970:	f06f 0302 	mvn.w	r3, #2
 8005974:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599c:	f3ef 8305 	mrs	r3, IPSR
 80059a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059a2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80059a8:	f06f 0305 	mvn.w	r3, #5
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e01f      	b.n	80059f0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80059b6:	f06f 0303 	mvn.w	r3, #3
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e018      	b.n	80059f0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80059c4:	6938      	ldr	r0, [r7, #16]
 80059c6:	f000 fcdb 	bl	8006380 <xQueueGiveMutexRecursive>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d00f      	beq.n	80059f0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80059d0:	f06f 0302 	mvn.w	r3, #2
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e00b      	b.n	80059f0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80059d8:	2300      	movs	r3, #0
 80059da:	2200      	movs	r2, #0
 80059dc:	2100      	movs	r1, #0
 80059de:	6938      	ldr	r0, [r7, #16]
 80059e0:	f000 fda2 	bl	8006528 <xQueueGenericSend>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d002      	beq.n	80059f0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80059ea:	f06f 0302 	mvn.w	r3, #2
 80059ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80059f0:	697b      	ldr	r3, [r7, #20]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b08a      	sub	sp, #40	; 0x28
 80059fe:	af02      	add	r7, sp, #8
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0a:	f3ef 8305 	mrs	r3, IPSR
 8005a0e:	613b      	str	r3, [r7, #16]
  return(result);
 8005a10:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d175      	bne.n	8005b02 <osSemaphoreNew+0x108>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d072      	beq.n	8005b02 <osSemaphoreNew+0x108>
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d86e      	bhi.n	8005b02 <osSemaphoreNew+0x108>
    mem = -1;
 8005a24:	f04f 33ff 	mov.w	r3, #4294967295
 8005a28:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d015      	beq.n	8005a5c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d006      	beq.n	8005a46 <osSemaphoreNew+0x4c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b4f      	cmp	r3, #79	; 0x4f
 8005a3e:	d902      	bls.n	8005a46 <osSemaphoreNew+0x4c>
        mem = 1;
 8005a40:	2301      	movs	r3, #1
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e00c      	b.n	8005a60 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d108      	bne.n	8005a60 <osSemaphoreNew+0x66>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <osSemaphoreNew+0x66>
          mem = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e001      	b.n	8005a60 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d04c      	beq.n	8005b02 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d128      	bne.n	8005ac0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d10a      	bne.n	8005a8a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	9200      	str	r2, [sp, #0]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2100      	movs	r1, #0
 8005a80:	2001      	movs	r0, #1
 8005a82:	f000 fb5b 	bl	800613c <xQueueGenericCreateStatic>
 8005a86:	61f8      	str	r0, [r7, #28]
 8005a88:	e005      	b.n	8005a96 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f000 fbcc 	bl	800622c <xQueueGenericCreate>
 8005a94:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d022      	beq.n	8005ae2 <osSemaphoreNew+0xe8>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01f      	beq.n	8005ae2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	69f8      	ldr	r0, [r7, #28]
 8005aaa:	f000 fd3d 	bl	8006528 <xQueueGenericSend>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d016      	beq.n	8005ae2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005ab4:	69f8      	ldr	r0, [r7, #28]
 8005ab6:	f001 f9c9 	bl	8006e4c <vQueueDelete>
            hSemaphore = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e010      	b.n	8005ae2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d108      	bne.n	8005ad8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	461a      	mov	r2, r3
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fcc0 	bl	8006454 <xQueueCreateCountingSemaphoreStatic>
 8005ad4:	61f8      	str	r0, [r7, #28]
 8005ad6:	e004      	b.n	8005ae2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fcf1 	bl	80064c2 <xQueueCreateCountingSemaphore>
 8005ae0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00c      	beq.n	8005b02 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e001      	b.n	8005afa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	69f8      	ldr	r0, [r7, #28]
 8005afe:	f001 faf1 	bl	80070e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b02:	69fb      	ldr	r3, [r7, #28]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b24:	f06f 0303 	mvn.w	r3, #3
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e039      	b.n	8005ba0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b2c:	f3ef 8305 	mrs	r3, IPSR
 8005b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b32:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d022      	beq.n	8005b7e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005b3e:	f06f 0303 	mvn.w	r3, #3
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e02c      	b.n	8005ba0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b4a:	f107 0308 	add.w	r3, r7, #8
 8005b4e:	461a      	mov	r2, r3
 8005b50:	2100      	movs	r1, #0
 8005b52:	6938      	ldr	r0, [r7, #16]
 8005b54:	f001 f8fa 	bl	8006d4c <xQueueReceiveFromISR>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d003      	beq.n	8005b66 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b5e:	f06f 0302 	mvn.w	r3, #2
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e01c      	b.n	8005ba0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d019      	beq.n	8005ba0 <osSemaphoreAcquire+0x94>
 8005b6c:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <osSemaphoreAcquire+0xa0>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	e010      	b.n	8005ba0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6938      	ldr	r0, [r7, #16]
 8005b82:	f000 ffd7 	bl	8006b34 <xQueueSemaphoreTake>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d009      	beq.n	8005ba0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005b92:	f06f 0301 	mvn.w	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e002      	b.n	8005ba0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005b9a:	f06f 0302 	mvn.w	r3, #2
 8005b9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ba0:	697b      	ldr	r3, [r7, #20]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005bc6:	f06f 0303 	mvn.w	r3, #3
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e02c      	b.n	8005c28 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01a      	beq.n	8005c10 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4619      	mov	r1, r3
 8005be4:	6938      	ldr	r0, [r7, #16]
 8005be6:	f000 fe38 	bl	800685a <xQueueGiveFromISR>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d003      	beq.n	8005bf8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005bf0:	f06f 0302 	mvn.w	r3, #2
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e017      	b.n	8005c28 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d014      	beq.n	8005c28 <osSemaphoreRelease+0x78>
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <osSemaphoreRelease+0x84>)
 8005c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	e00b      	b.n	8005c28 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c10:	2300      	movs	r3, #0
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	6938      	ldr	r0, [r7, #16]
 8005c18:	f000 fc86 	bl	8006528 <xQueueGenericSend>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d002      	beq.n	8005c28 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c22:	f06f 0302 	mvn.w	r3, #2
 8005c26:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c28:	697b      	ldr	r3, [r7, #20]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c48:	f3ef 8305 	mrs	r3, IPSR
 8005c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8005c4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d15f      	bne.n	8005d14 <osMessageQueueNew+0xdc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d05c      	beq.n	8005d14 <osMessageQueueNew+0xdc>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d059      	beq.n	8005d14 <osMessageQueueNew+0xdc>
    mem = -1;
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d029      	beq.n	8005cc0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d012      	beq.n	8005c9a <osMessageQueueNew+0x62>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	2b4f      	cmp	r3, #79	; 0x4f
 8005c7a:	d90e      	bls.n	8005c9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d302      	bcc.n	8005c9a <osMessageQueueNew+0x62>
        mem = 1;
 8005c94:	2301      	movs	r3, #1
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e014      	b.n	8005cc4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d110      	bne.n	8005cc4 <osMessageQueueNew+0x8c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10c      	bne.n	8005cc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d108      	bne.n	8005cc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <osMessageQueueNew+0x8c>
          mem = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	e001      	b.n	8005cc4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d10b      	bne.n	8005ce2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	9100      	str	r1, [sp, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fa2f 	bl	800613c <xQueueGenericCreateStatic>
 8005cde:	61f8      	str	r0, [r7, #28]
 8005ce0:	e008      	b.n	8005cf4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fa9d 	bl	800622c <xQueueGenericCreate>
 8005cf2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e001      	b.n	8005d0c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	69f8      	ldr	r0, [r7, #28]
 8005d10:	f001 f9e8 	bl	80070e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d14:	69fb      	ldr	r3, [r7, #28]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d38:	f3ef 8305 	mrs	r3, IPSR
 8005d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d3e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d028      	beq.n	8005d96 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <osMessageQueuePut+0x36>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <osMessageQueuePut+0x36>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005d56:	f06f 0303 	mvn.w	r3, #3
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e038      	b.n	8005dd0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005d62:	f107 0210 	add.w	r2, r7, #16
 8005d66:	2300      	movs	r3, #0
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	69b8      	ldr	r0, [r7, #24]
 8005d6c:	f000 fcda 	bl	8006724 <xQueueGenericSendFromISR>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d003      	beq.n	8005d7e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005d76:	f06f 0302 	mvn.w	r3, #2
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e028      	b.n	8005dd0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d025      	beq.n	8005dd0 <osMessageQueuePut+0xb0>
 8005d84:	4b15      	ldr	r3, [pc, #84]	; (8005ddc <osMessageQueuePut+0xbc>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	e01c      	b.n	8005dd0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <osMessageQueuePut+0x82>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d103      	bne.n	8005daa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005da2:	f06f 0303 	mvn.w	r3, #3
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e012      	b.n	8005dd0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005daa:	2300      	movs	r3, #0
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f000 fbb9 	bl	8006528 <xQueueGenericSend>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d009      	beq.n	8005dd0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005dc2:	f06f 0301 	mvn.w	r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e002      	b.n	8005dd0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005dca:	f06f 0302 	mvn.w	r3, #2
 8005dce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005dd0:	69fb      	ldr	r3, [r7, #28]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df6:	f3ef 8305 	mrs	r3, IPSR
 8005dfa:	617b      	str	r3, [r7, #20]
  return(result);
 8005dfc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d028      	beq.n	8005e54 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <osMessageQueueGet+0x34>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <osMessageQueueGet+0x34>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005e14:	f06f 0303 	mvn.w	r3, #3
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e037      	b.n	8005e8c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005e20:	f107 0310 	add.w	r3, r7, #16
 8005e24:	461a      	mov	r2, r3
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	69b8      	ldr	r0, [r7, #24]
 8005e2a:	f000 ff8f 	bl	8006d4c <xQueueReceiveFromISR>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d003      	beq.n	8005e3c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005e34:	f06f 0302 	mvn.w	r3, #2
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	e027      	b.n	8005e8c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d024      	beq.n	8005e8c <osMessageQueueGet+0xac>
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <osMessageQueueGet+0xb8>)
 8005e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	e01b      	b.n	8005e8c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <osMessageQueueGet+0x80>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005e60:	f06f 0303 	mvn.w	r3, #3
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	e011      	b.n	8005e8c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	69b8      	ldr	r0, [r7, #24]
 8005e6e:	f000 fd81 	bl	8006974 <xQueueReceive>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d009      	beq.n	8005e8c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005e7e:	f06f 0301 	mvn.w	r3, #1
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	e002      	b.n	8005e8c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005e86:	f06f 0302 	mvn.w	r3, #2
 8005e8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a07      	ldr	r2, [pc, #28]	; (8005ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4a06      	ldr	r2, [pc, #24]	; (8005ecc <vApplicationGetIdleTaskMemory+0x30>)
 8005eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eba:	601a      	str	r2, [r3, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	240000c4 	.word	0x240000c4
 8005ecc:	24000120 	.word	0x24000120

08005ed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a07      	ldr	r2, [pc, #28]	; (8005efc <vApplicationGetTimerTaskMemory+0x2c>)
 8005ee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <vApplicationGetTimerTaskMemory+0x30>)
 8005ee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eee:	601a      	str	r2, [r3, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	24000520 	.word	0x24000520
 8005f00:	2400057c 	.word	0x2400057c

08005f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f103 0208 	add.w	r2, r3, #8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f103 0208 	add.w	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f103 0208 	add.w	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d103      	bne.n	8005fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e00c      	b.n	8005fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e002      	b.n	8005fd4 <vListInsert+0x2e>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d2f6      	bcs.n	8005fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
}
 800600c:	bf00      	nop
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6892      	ldr	r2, [r2, #8]
 800602e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6852      	ldr	r2, [r2, #4]
 8006038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d103      	bne.n	800604c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	1e5a      	subs	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006096:	f002 fd45 	bl	8008b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	441a      	add	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	3b01      	subs	r3, #1
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d114      	bne.n	8006116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01a      	beq.n	800612a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3310      	adds	r3, #16
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 fced 	bl	8007ad8 <xTaskRemoveFromEventList>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d012      	beq.n	800612a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <xQueueGenericReset+0xcc>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	e009      	b.n	800612a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3310      	adds	r3, #16
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fef2 	bl	8005f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3324      	adds	r3, #36	; 0x24
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff feed 	bl	8005f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800612a:	f002 fd2b 	bl	8008b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800612e:	2301      	movs	r3, #1
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08e      	sub	sp, #56	; 0x38
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <xQueueGenericCreateStatic+0x52>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <xQueueGenericCreateStatic+0x56>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <xQueueGenericCreateStatic+0x58>
 8006192:	2300      	movs	r3, #0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	623b      	str	r3, [r7, #32]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <xQueueGenericCreateStatic+0x7e>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <xQueueGenericCreateStatic+0x82>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <xQueueGenericCreateStatic+0x84>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	61fb      	str	r3, [r7, #28]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061da:	2350      	movs	r3, #80	; 0x50
 80061dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b50      	cmp	r3, #80	; 0x50
 80061e2:	d00a      	beq.n	80061fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	61bb      	str	r3, [r7, #24]
}
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800620e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f83f 	bl	80062a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006224:	4618      	mov	r0, r3
 8006226:	3730      	adds	r7, #48	; 0x30
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	613b      	str	r3, [r7, #16]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	3350      	adds	r3, #80	; 0x50
 8006264:	4618      	mov	r0, r3
 8006266:	f002 fd7f 	bl	8008d68 <pvPortMalloc>
 800626a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d011      	beq.n	8006296 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	3350      	adds	r3, #80	; 0x50
 800627a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006284:	79fa      	ldrb	r2, [r7, #7]
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f805 	bl	80062a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006296:	69bb      	ldr	r3, [r7, #24]
	}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062ce:	2101      	movs	r1, #1
 80062d0:	69b8      	ldr	r0, [r7, #24]
 80062d2:	f7ff fecb 	bl	800606c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00e      	beq.n	8006312 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006306:	2300      	movs	r3, #0
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f90b 	bl	8006528 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	4603      	mov	r3, r0
 8006322:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006324:	2301      	movs	r3, #1
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	461a      	mov	r2, r3
 8006330:	6939      	ldr	r1, [r7, #16]
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f7ff ff7a 	bl	800622c <xQueueGenericCreate>
 8006338:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff ffd3 	bl	80062e6 <prvInitialiseMutex>

		return xNewQueue;
 8006340:	68fb      	ldr	r3, [r7, #12]
	}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800634a:	b580      	push	{r7, lr}
 800634c:	b088      	sub	sp, #32
 800634e:	af02      	add	r7, sp, #8
 8006350:	4603      	mov	r3, r0
 8006352:	6039      	str	r1, [r7, #0]
 8006354:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	2300      	movs	r3, #0
 800635c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2200      	movs	r2, #0
 8006366:	6939      	ldr	r1, [r7, #16]
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f7ff fee7 	bl	800613c <xQueueGenericCreateStatic>
 800636e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff ffb8 	bl	80062e6 <prvInitialiseMutex>

		return xNewQueue;
 8006376:	68fb      	ldr	r3, [r7, #12]
	}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60fb      	str	r3, [r7, #12]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	689c      	ldr	r4, [r3, #8]
 80063ac:	f001 fd52 	bl	8007e54 <xTaskGetCurrentTaskHandle>
 80063b0:	4603      	mov	r3, r0
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d111      	bne.n	80063da <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	1e5a      	subs	r2, r3, #1
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80063c8:	2300      	movs	r3, #0
 80063ca:	2200      	movs	r2, #0
 80063cc:	2100      	movs	r1, #0
 80063ce:	6938      	ldr	r0, [r7, #16]
 80063d0:	f000 f8aa 	bl	8006528 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80063d4:	2301      	movs	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e001      	b.n	80063de <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80063de:	697b      	ldr	r3, [r7, #20]
	}
 80063e0:	4618      	mov	r0, r3
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd90      	pop	{r4, r7, pc}

080063e8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	60fb      	str	r3, [r7, #12]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	689c      	ldr	r4, [r3, #8]
 8006416:	f001 fd1d 	bl	8007e54 <xTaskGetCurrentTaskHandle>
 800641a:	4603      	mov	r3, r0
 800641c:	429c      	cmp	r4, r3
 800641e:	d107      	bne.n	8006430 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800642a:	2301      	movs	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	e00c      	b.n	800644a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6938      	ldr	r0, [r7, #16]
 8006434:	f000 fb7e 	bl	8006b34 <xQueueSemaphoreTake>
 8006438:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800644a:	697b      	ldr	r3, [r7, #20]
	}
 800644c:	4618      	mov	r0, r3
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd90      	pop	{r4, r7, pc}

08006454 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	61bb      	str	r3, [r7, #24]
}
 8006478:	bf00      	nop
 800647a:	e7fe      	b.n	800647a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	d90a      	bls.n	800649a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	617b      	str	r3, [r7, #20]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800649a:	2302      	movs	r3, #2
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	2100      	movs	r1, #0
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fe49 	bl	800613c <xQueueGenericCreateStatic>
 80064aa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064b8:	69fb      	ldr	r3, [r7, #28]
	}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	613b      	str	r3, [r7, #16]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d90a      	bls.n	8006506 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006506:	2202      	movs	r2, #2
 8006508:	2100      	movs	r1, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fe8e 	bl	800622c <xQueueGenericCreate>
 8006510:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800651e:	697b      	ldr	r3, [r7, #20]
	}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08e      	sub	sp, #56	; 0x38
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006536:	2300      	movs	r3, #0
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <xQueueGenericSend+0x32>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <xQueueGenericSend+0x40>
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <xQueueGenericSend+0x44>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <xQueueGenericSend+0x46>
 800656c:	2300      	movs	r3, #0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <xQueueGenericSend+0x60>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d103      	bne.n	8006596 <xQueueGenericSend+0x6e>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <xQueueGenericSend+0x72>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <xQueueGenericSend+0x74>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	623b      	str	r3, [r7, #32]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065b6:	f001 fc5d 	bl	8007e74 <xTaskGetSchedulerState>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <xQueueGenericSend+0x9e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <xQueueGenericSend+0xa2>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <xQueueGenericSend+0xa4>
 80065ca:	2300      	movs	r3, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	61fb      	str	r3, [r7, #28]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065e6:	f002 fa9d 	bl	8008b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d302      	bcc.n	80065fc <xQueueGenericSend+0xd4>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d129      	bne.n	8006650 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006602:	f000 fc5e 	bl	8006ec2 <prvCopyDataToQueue>
 8006606:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	3324      	adds	r3, #36	; 0x24
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fa5f 	bl	8007ad8 <xTaskRemoveFromEventList>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d013      	beq.n	8006648 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006620:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <xQueueGenericSend+0x1f8>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	e00a      	b.n	8006648 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006638:	4b39      	ldr	r3, [pc, #228]	; (8006720 <xQueueGenericSend+0x1f8>)
 800663a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006648:	f002 fa9c 	bl	8008b84 <vPortExitCritical>
				return pdPASS;
 800664c:	2301      	movs	r3, #1
 800664e:	e063      	b.n	8006718 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d103      	bne.n	800665e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006656:	f002 fa95 	bl	8008b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800665a:	2300      	movs	r3, #0
 800665c:	e05c      	b.n	8006718 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006664:	f107 0314 	add.w	r3, r7, #20
 8006668:	4618      	mov	r0, r3
 800666a:	f001 fa99 	bl	8007ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006672:	f002 fa87 	bl	8008b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006676:	f000 fff9 	bl	800766c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800667a:	f002 fa53 	bl	8008b24 <vPortEnterCritical>
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006684:	b25b      	sxtb	r3, r3
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d103      	bne.n	8006694 <xQueueGenericSend+0x16c>
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800669a:	b25b      	sxtb	r3, r3
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d103      	bne.n	80066aa <xQueueGenericSend+0x182>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066aa:	f002 fa6b 	bl	8008b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ae:	1d3a      	adds	r2, r7, #4
 80066b0:	f107 0314 	add.w	r3, r7, #20
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 fa88 	bl	8007bcc <xTaskCheckForTimeOut>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d124      	bne.n	800670c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c4:	f000 fcf5 	bl	80070b2 <prvIsQueueFull>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d018      	beq.n	8006700 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	3310      	adds	r3, #16
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f9ae 	bl	8007a38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066de:	f000 fc80 	bl	8006fe2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066e2:	f000 ffd1 	bl	8007688 <xTaskResumeAll>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f47f af7c 	bne.w	80065e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066ee:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <xQueueGenericSend+0x1f8>)
 80066f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	e772      	b.n	80065e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006702:	f000 fc6e 	bl	8006fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006706:	f000 ffbf 	bl	8007688 <xTaskResumeAll>
 800670a:	e76c      	b.n	80065e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800670c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800670e:	f000 fc68 	bl	8006fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006712:	f000 ffb9 	bl	8007688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006716:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006718:	4618      	mov	r0, r3
 800671a:	3738      	adds	r7, #56	; 0x38
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b090      	sub	sp, #64	; 0x40
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <xQueueGenericSendFromISR+0x3c>
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <xQueueGenericSendFromISR+0x40>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <xQueueGenericSendFromISR+0x42>
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d103      	bne.n	800678e <xQueueGenericSendFromISR+0x6a>
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <xQueueGenericSendFromISR+0x6e>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueGenericSendFromISR+0x70>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	623b      	str	r3, [r7, #32]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067ae:	f002 fa9b 	bl	8008ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067b2:	f3ef 8211 	mrs	r2, BASEPRI
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <xQueueGenericSendFromISR+0xbc>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d12f      	bne.n	8006840 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067f6:	f000 fb64 	bl	8006ec2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d112      	bne.n	800682a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d016      	beq.n	800683a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	3324      	adds	r3, #36	; 0x24
 8006810:	4618      	mov	r0, r3
 8006812:	f001 f961 	bl	8007ad8 <xTaskRemoveFromEventList>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00e      	beq.n	800683a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e007      	b.n	800683a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800682a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800682e:	3301      	adds	r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	b25a      	sxtb	r2, r3
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800683a:	2301      	movs	r3, #1
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800683e:	e001      	b.n	8006844 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006840:	2300      	movs	r3, #0
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800684e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006852:	4618      	mov	r0, r3
 8006854:	3740      	adds	r7, #64	; 0x40
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b08e      	sub	sp, #56	; 0x38
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	623b      	str	r3, [r7, #32]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	61fb      	str	r3, [r7, #28]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <xQueueGiveFromISR+0x58>
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <xQueueGiveFromISR+0x5c>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <xQueueGiveFromISR+0x5e>
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	61bb      	str	r3, [r7, #24]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068d2:	f002 fa09 	bl	8008ce8 <vPortValidateInterruptPriority>
	__asm volatile
 80068d6:	f3ef 8211 	mrs	r2, BASEPRI
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	617a      	str	r2, [r7, #20]
 80068ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fe:	429a      	cmp	r2, r3
 8006900:	d22b      	bcs.n	800695a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006914:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d112      	bne.n	8006944 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d016      	beq.n	8006954 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	3324      	adds	r3, #36	; 0x24
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f8d4 	bl	8007ad8 <xTaskRemoveFromEventList>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00e      	beq.n	8006954 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e007      	b.n	8006954 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006948:	3301      	adds	r3, #1
 800694a:	b2db      	uxtb	r3, r3
 800694c:	b25a      	sxtb	r2, r3
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006954:	2301      	movs	r3, #1
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
 8006958:	e001      	b.n	800695e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800695a:	2300      	movs	r3, #0
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f383 8811 	msr	BASEPRI, r3
}
 8006968:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800696c:	4618      	mov	r0, r3
 800696e:	3738      	adds	r7, #56	; 0x38
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08c      	sub	sp, #48	; 0x30
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006980:	2300      	movs	r3, #0
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <xQueueReceive+0x30>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	623b      	str	r3, [r7, #32]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <xQueueReceive+0x3e>
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <xQueueReceive+0x42>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <xQueueReceive+0x44>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xQueueReceive+0x5e>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61fb      	str	r3, [r7, #28]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069d2:	f001 fa4f 	bl	8007e74 <xTaskGetSchedulerState>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <xQueueReceive+0x6e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <xQueueReceive+0x72>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <xQueueReceive+0x74>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <xQueueReceive+0x8e>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	61bb      	str	r3, [r7, #24]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a02:	f002 f88f 	bl	8008b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01f      	beq.n	8006a52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a16:	f000 fabe 	bl	8006f96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1e5a      	subs	r2, r3, #1
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00f      	beq.n	8006a4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f852 	bl	8007ad8 <xTaskRemoveFromEventList>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a3a:	4b3d      	ldr	r3, [pc, #244]	; (8006b30 <xQueueReceive+0x1bc>)
 8006a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a4a:	f002 f89b 	bl	8008b84 <vPortExitCritical>
				return pdPASS;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e069      	b.n	8006b26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a58:	f002 f894 	bl	8008b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e062      	b.n	8006b26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a66:	f107 0310 	add.w	r3, r7, #16
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 f898 	bl	8007ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a74:	f002 f886 	bl	8008b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a78:	f000 fdf8 	bl	800766c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a7c:	f002 f852 	bl	8008b24 <vPortEnterCritical>
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d103      	bne.n	8006a96 <xQueueReceive+0x122>
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a9c:	b25b      	sxtb	r3, r3
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d103      	bne.n	8006aac <xQueueReceive+0x138>
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aac:	f002 f86a 	bl	8008b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ab0:	1d3a      	adds	r2, r7, #4
 8006ab2:	f107 0310 	add.w	r3, r7, #16
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 f887 	bl	8007bcc <xTaskCheckForTimeOut>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d123      	bne.n	8006b0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac6:	f000 fade 	bl	8007086 <prvIsQueueEmpty>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d017      	beq.n	8006b00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	3324      	adds	r3, #36	; 0x24
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ffad 	bl	8007a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae0:	f000 fa7f 	bl	8006fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ae4:	f000 fdd0 	bl	8007688 <xTaskResumeAll>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d189      	bne.n	8006a02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <xQueueReceive+0x1bc>)
 8006af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	e780      	b.n	8006a02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b02:	f000 fa6e 	bl	8006fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b06:	f000 fdbf 	bl	8007688 <xTaskResumeAll>
 8006b0a:	e77a      	b.n	8006a02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b0e:	f000 fa68 	bl	8006fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b12:	f000 fdb9 	bl	8007688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b18:	f000 fab5 	bl	8007086 <prvIsQueueEmpty>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f43f af6f 	beq.w	8006a02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3730      	adds	r7, #48	; 0x30
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08e      	sub	sp, #56	; 0x38
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	623b      	str	r3, [r7, #32]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	61fb      	str	r3, [r7, #28]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b84:	f001 f976 	bl	8007e74 <xTaskGetSchedulerState>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <xQueueSemaphoreTake+0x60>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <xQueueSemaphoreTake+0x64>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <xQueueSemaphoreTake+0x66>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	61bb      	str	r3, [r7, #24]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bb4:	f001 ffb6 	bl	8008b24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d024      	beq.n	8006c0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	1e5a      	subs	r2, r3, #1
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bd4:	f001 fac4 	bl	8008160 <pvTaskIncrementMutexHeldCount>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00f      	beq.n	8006c06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	3310      	adds	r3, #16
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 ff74 	bl	8007ad8 <xTaskRemoveFromEventList>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bf6:	4b54      	ldr	r3, [pc, #336]	; (8006d48 <xQueueSemaphoreTake+0x214>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c06:	f001 ffbd 	bl	8008b84 <vPortExitCritical>
				return pdPASS;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e097      	b.n	8006d3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d111      	bne.n	8006c38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	617b      	str	r3, [r7, #20]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c30:	f001 ffa8 	bl	8008b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e082      	b.n	8006d3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c3e:	f107 030c 	add.w	r3, r7, #12
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 ffac 	bl	8007ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c4c:	f001 ff9a 	bl	8008b84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c50:	f000 fd0c 	bl	800766c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c54:	f001 ff66 	bl	8008b24 <vPortEnterCritical>
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d103      	bne.n	8006c6e <xQueueSemaphoreTake+0x13a>
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d103      	bne.n	8006c84 <xQueueSemaphoreTake+0x150>
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c84:	f001 ff7e 	bl	8008b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c88:	463a      	mov	r2, r7
 8006c8a:	f107 030c 	add.w	r3, r7, #12
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 ff9b 	bl	8007bcc <xTaskCheckForTimeOut>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d132      	bne.n	8006d02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c9e:	f000 f9f2 	bl	8007086 <prvIsQueueEmpty>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d026      	beq.n	8006cf6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d109      	bne.n	8006cc4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006cb0:	f001 ff38 	bl	8008b24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 f8f9 	bl	8007eb0 <xTaskPriorityInherit>
 8006cbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006cc0:	f001 ff60 	bl	8008b84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	3324      	adds	r3, #36	; 0x24
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 feb3 	bl	8007a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cd4:	f000 f985 	bl	8006fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cd8:	f000 fcd6 	bl	8007688 <xTaskResumeAll>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f47f af68 	bne.w	8006bb4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006ce4:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <xQueueSemaphoreTake+0x214>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	e75e      	b.n	8006bb4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf8:	f000 f973 	bl	8006fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfc:	f000 fcc4 	bl	8007688 <xTaskResumeAll>
 8006d00:	e758      	b.n	8006bb4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d04:	f000 f96d 	bl	8006fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d08:	f000 fcbe 	bl	8007688 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d0e:	f000 f9ba 	bl	8007086 <prvIsQueueEmpty>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f43f af4d 	beq.w	8006bb4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00d      	beq.n	8006d3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006d20:	f001 ff00 	bl	8008b24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d26:	f000 f8b4 	bl	8006e92 <prvGetDisinheritPriorityAfterTimeout>
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 f992 	bl	800805c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d38:	f001 ff24 	bl	8008b84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3738      	adds	r7, #56	; 0x38
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	; 0x38
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	623b      	str	r3, [r7, #32]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <xQueueReceiveFromISR+0x3a>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <xQueueReceiveFromISR+0x3e>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueReceiveFromISR+0x40>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	61fb      	str	r3, [r7, #28]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006da6:	f001 ff9f 	bl	8008ce8 <vPortValidateInterruptPriority>
	__asm volatile
 8006daa:	f3ef 8211 	mrs	r2, BASEPRI
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	61ba      	str	r2, [r7, #24]
 8006dc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006dc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d02f      	beq.n	8006e32 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de0:	f000 f8d9 	bl	8006f96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	1e5a      	subs	r2, r3, #1
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d112      	bne.n	8006e1c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	3310      	adds	r3, #16
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fe68 	bl	8007ad8 <xTaskRemoveFromEventList>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e007      	b.n	8006e2c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e20:	3301      	adds	r3, #1
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	b25a      	sxtb	r2, r3
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e30:	e001      	b.n	8006e36 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f383 8811 	msr	BASEPRI, r3
}
 8006e40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3738      	adds	r7, #56	; 0x38
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <vQueueDelete+0x28>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60bb      	str	r3, [r7, #8]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f95f 	bl	8007138 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f002 f83b 	bl	8008f00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e001      	b.n	8006eb4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
	}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d14d      	bne.n	8006f84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 f847 	bl	8007f80 <xTaskPriorityDisinherit>
 8006ef2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	609a      	str	r2, [r3, #8]
 8006efa:	e043      	b.n	8006f84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d119      	bne.n	8006f36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6858      	ldr	r0, [r3, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	f00c f9af 	bl	8013270 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	441a      	add	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d32b      	bcc.n	8006f84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	605a      	str	r2, [r3, #4]
 8006f34:	e026      	b.n	8006f84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68d8      	ldr	r0, [r3, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	f00c f995 	bl	8013270 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	425b      	negs	r3, r3
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d207      	bcs.n	8006f72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	425b      	negs	r3, r3
 8006f6c:	441a      	add	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d105      	bne.n	8006f84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f8c:	697b      	ldr	r3, [r7, #20]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d018      	beq.n	8006fda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	441a      	add	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d303      	bcc.n	8006fca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68d9      	ldr	r1, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6838      	ldr	r0, [r7, #0]
 8006fd6:	f00c f94b 	bl	8013270 <memcpy>
	}
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fea:	f001 fd9b 	bl	8008b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ff6:	e011      	b.n	800701c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d012      	beq.n	8007026 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3324      	adds	r3, #36	; 0x24
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fd67 	bl	8007ad8 <xTaskRemoveFromEventList>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007010:	f000 fe3e 	bl	8007c90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	3b01      	subs	r3, #1
 8007018:	b2db      	uxtb	r3, r3
 800701a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800701c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007020:	2b00      	cmp	r3, #0
 8007022:	dce9      	bgt.n	8006ff8 <prvUnlockQueue+0x16>
 8007024:	e000      	b.n	8007028 <prvUnlockQueue+0x46>
					break;
 8007026:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	22ff      	movs	r2, #255	; 0xff
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007030:	f001 fda8 	bl	8008b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007034:	f001 fd76 	bl	8008b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800703e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007040:	e011      	b.n	8007066 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d012      	beq.n	8007070 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3310      	adds	r3, #16
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fd42 	bl	8007ad8 <xTaskRemoveFromEventList>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800705a:	f000 fe19 	bl	8007c90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	3b01      	subs	r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	dce9      	bgt.n	8007042 <prvUnlockQueue+0x60>
 800706e:	e000      	b.n	8007072 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007070:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800707a:	f001 fd83 	bl	8008b84 <vPortExitCritical>
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800708e:	f001 fd49 	bl	8008b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800709a:	2301      	movs	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e001      	b.n	80070a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070a4:	f001 fd6e 	bl	8008b84 <vPortExitCritical>

	return xReturn;
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ba:	f001 fd33 	bl	8008b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d102      	bne.n	80070d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e001      	b.n	80070d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070d4:	f001 fd56 	bl	8008b84 <vPortExitCritical>

	return xReturn;
 80070d8:	68fb      	ldr	r3, [r7, #12]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	e014      	b.n	800711e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070f4:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <vQueueAddToRegistry+0x50>)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007100:	490c      	ldr	r1, [pc, #48]	; (8007134 <vQueueAddToRegistry+0x50>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800710a:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <vQueueAddToRegistry+0x50>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4413      	add	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007116:	e006      	b.n	8007126 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b07      	cmp	r3, #7
 8007122:	d9e7      	bls.n	80070f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	240053d4 	.word	0x240053d4

08007138 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e016      	b.n	8007174 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007146:	4a10      	ldr	r2, [pc, #64]	; (8007188 <vQueueUnregisterQueue+0x50>)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	4413      	add	r3, r2
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d10b      	bne.n	800716e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007156:	4a0c      	ldr	r2, [pc, #48]	; (8007188 <vQueueUnregisterQueue+0x50>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2100      	movs	r1, #0
 800715c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007160:	4a09      	ldr	r2, [pc, #36]	; (8007188 <vQueueUnregisterQueue+0x50>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4413      	add	r3, r2
 8007168:	2200      	movs	r2, #0
 800716a:	605a      	str	r2, [r3, #4]
				break;
 800716c:	e006      	b.n	800717c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b07      	cmp	r3, #7
 8007178:	d9e5      	bls.n	8007146 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	240053d4 	.word	0x240053d4

0800718c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800719c:	f001 fcc2 	bl	8008b24 <vPortEnterCritical>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d103      	bne.n	80071b6 <vQueueWaitForMessageRestricted+0x2a>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071bc:	b25b      	sxtb	r3, r3
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c2:	d103      	bne.n	80071cc <vQueueWaitForMessageRestricted+0x40>
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071cc:	f001 fcda 	bl	8008b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	3324      	adds	r3, #36	; 0x24
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fc4d 	bl	8007a80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071e6:	6978      	ldr	r0, [r7, #20]
 80071e8:	f7ff fefb 	bl	8006fe2 <prvUnlockQueue>
	}
 80071ec:	bf00      	nop
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08e      	sub	sp, #56	; 0x38
 80071f8:	af04      	add	r7, sp, #16
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	623b      	str	r3, [r7, #32]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xTaskCreateStatic+0x46>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61fb      	str	r3, [r7, #28]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800723a:	235c      	movs	r3, #92	; 0x5c
 800723c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b5c      	cmp	r3, #92	; 0x5c
 8007242:	d00a      	beq.n	800725a <xTaskCreateStatic+0x66>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	61bb      	str	r3, [r7, #24]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800725a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01e      	beq.n	80072a0 <xTaskCreateStatic+0xac>
 8007262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01b      	beq.n	80072a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007270:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	2202      	movs	r2, #2
 8007276:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800727a:	2300      	movs	r3, #0
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	9302      	str	r3, [sp, #8]
 8007282:	f107 0314 	add.w	r3, r7, #20
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f850 	bl	8007338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800729a:	f000 f8dd 	bl	8007458 <prvAddNewTaskToReadyList>
 800729e:	e001      	b.n	80072a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072a4:	697b      	ldr	r3, [r7, #20]
	}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3728      	adds	r7, #40	; 0x28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b08c      	sub	sp, #48	; 0x30
 80072b2:	af04      	add	r7, sp, #16
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	4613      	mov	r3, r2
 80072bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fd50 	bl	8008d68 <pvPortMalloc>
 80072c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00e      	beq.n	80072ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072d0:	205c      	movs	r0, #92	; 0x5c
 80072d2:	f001 fd49 	bl	8008d68 <pvPortMalloc>
 80072d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30
 80072e4:	e005      	b.n	80072f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072e6:	6978      	ldr	r0, [r7, #20]
 80072e8:	f001 fe0a 	bl	8008f00 <vPortFree>
 80072ec:	e001      	b.n	80072f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d017      	beq.n	8007328 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007300:	88fa      	ldrh	r2, [r7, #6]
 8007302:	2300      	movs	r3, #0
 8007304:	9303      	str	r3, [sp, #12]
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	9302      	str	r3, [sp, #8]
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f80e 	bl	8007338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800731c:	69f8      	ldr	r0, [r7, #28]
 800731e:	f000 f89b 	bl	8007458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007322:	2301      	movs	r3, #1
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e002      	b.n	800732e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007328:	f04f 33ff 	mov.w	r3, #4294967295
 800732c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800732e:	69bb      	ldr	r3, [r7, #24]
	}
 8007330:	4618      	mov	r0, r3
 8007332:	3720      	adds	r7, #32
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	461a      	mov	r2, r3
 8007350:	21a5      	movs	r1, #165	; 0xa5
 8007352:	f00b ff9b 	bl	801328c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007360:	440b      	add	r3, r1
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <prvInitialiseNewTask+0x58>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	617b      	str	r3, [r7, #20]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d01f      	beq.n	80073d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	e012      	b.n	80073c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	7819      	ldrb	r1, [r3, #0]
 80073a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	3334      	adds	r3, #52	; 0x34
 80073ac:	460a      	mov	r2, r1
 80073ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d006      	beq.n	80073ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	3301      	adds	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2b0f      	cmp	r3, #15
 80073c6:	d9e9      	bls.n	800739c <prvInitialiseNewTask+0x64>
 80073c8:	e000      	b.n	80073cc <prvInitialiseNewTask+0x94>
			{
				break;
 80073ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073d4:	e003      	b.n	80073de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	2b37      	cmp	r3, #55	; 0x37
 80073e2:	d901      	bls.n	80073e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073e4:	2337      	movs	r3, #55	; 0x37
 80073e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	2200      	movs	r2, #0
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	3304      	adds	r3, #4
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fda0 	bl	8005f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	3318      	adds	r3, #24
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fd9b 	bl	8005f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	2200      	movs	r2, #0
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	69b8      	ldr	r0, [r7, #24]
 8007438:	f001 fa48 	bl	80088cc <pxPortInitialiseStack>
 800743c:	4602      	mov	r2, r0
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800744e:	bf00      	nop
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007460:	f001 fb60 	bl	8008b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <prvAddNewTaskToReadyList+0xc4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3301      	adds	r3, #1
 800746a:	4a2c      	ldr	r2, [pc, #176]	; (800751c <prvAddNewTaskToReadyList+0xc4>)
 800746c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800746e:	4b2c      	ldr	r3, [pc, #176]	; (8007520 <prvAddNewTaskToReadyList+0xc8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007476:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <prvAddNewTaskToReadyList+0xc8>)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800747c:	4b27      	ldr	r3, [pc, #156]	; (800751c <prvAddNewTaskToReadyList+0xc4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d110      	bne.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007484:	f000 fc28 	bl	8007cd8 <prvInitialiseTaskLists>
 8007488:	e00d      	b.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <prvAddNewTaskToReadyList+0xcc>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007492:	4b23      	ldr	r3, [pc, #140]	; (8007520 <prvAddNewTaskToReadyList+0xc8>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d802      	bhi.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a0:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <prvAddNewTaskToReadyList+0xc8>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074a6:	4b20      	ldr	r3, [pc, #128]	; (8007528 <prvAddNewTaskToReadyList+0xd0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	4a1e      	ldr	r2, [pc, #120]	; (8007528 <prvAddNewTaskToReadyList+0xd0>)
 80074ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074b0:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <prvAddNewTaskToReadyList+0xd0>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b1b      	ldr	r3, [pc, #108]	; (800752c <prvAddNewTaskToReadyList+0xd4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <prvAddNewTaskToReadyList+0x74>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4a18      	ldr	r2, [pc, #96]	; (800752c <prvAddNewTaskToReadyList+0xd4>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <prvAddNewTaskToReadyList+0xd8>)
 80074da:	441a      	add	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe fd3b 	bl	8005f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074e8:	f001 fb4c 	bl	8008b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074ec:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <prvAddNewTaskToReadyList+0xcc>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00e      	beq.n	8007512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074f4:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <prvAddNewTaskToReadyList+0xc8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d207      	bcs.n	8007512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007502:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <prvAddNewTaskToReadyList+0xdc>)
 8007504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	24001250 	.word	0x24001250
 8007520:	24000d7c 	.word	0x24000d7c
 8007524:	2400125c 	.word	0x2400125c
 8007528:	2400126c 	.word	0x2400126c
 800752c:	24001258 	.word	0x24001258
 8007530:	24000d80 	.word	0x24000d80
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d017      	beq.n	800757a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <vTaskDelay+0x60>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <vTaskDelay+0x30>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60bb      	str	r3, [r7, #8]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007568:	f000 f880 	bl	800766c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800756c:	2100      	movs	r1, #0
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fe0a 	bl	8008188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007574:	f000 f888 	bl	8007688 <xTaskResumeAll>
 8007578:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d107      	bne.n	8007590 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007580:	4b06      	ldr	r3, [pc, #24]	; (800759c <vTaskDelay+0x64>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	24001278 	.word	0x24001278
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08a      	sub	sp, #40	; 0x28
 80075a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075ae:	463a      	mov	r2, r7
 80075b0:	1d39      	adds	r1, r7, #4
 80075b2:	f107 0308 	add.w	r3, r7, #8
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fc70 	bl	8005e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	9202      	str	r2, [sp, #8]
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	2300      	movs	r3, #0
 80075cc:	460a      	mov	r2, r1
 80075ce:	4921      	ldr	r1, [pc, #132]	; (8007654 <vTaskStartScheduler+0xb4>)
 80075d0:	4821      	ldr	r0, [pc, #132]	; (8007658 <vTaskStartScheduler+0xb8>)
 80075d2:	f7ff fe0f 	bl	80071f4 <xTaskCreateStatic>
 80075d6:	4603      	mov	r3, r0
 80075d8:	4a20      	ldr	r2, [pc, #128]	; (800765c <vTaskStartScheduler+0xbc>)
 80075da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <vTaskStartScheduler+0xbc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e001      	b.n	80075ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d102      	bne.n	80075fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075f4:	f000 fe1c 	bl	8008230 <xTimerCreateTimerTask>
 80075f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d116      	bne.n	800762e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	613b      	str	r3, [r7, #16]
}
 8007612:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007614:	4b12      	ldr	r3, [pc, #72]	; (8007660 <vTaskStartScheduler+0xc0>)
 8007616:	f04f 32ff 	mov.w	r2, #4294967295
 800761a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800761c:	4b11      	ldr	r3, [pc, #68]	; (8007664 <vTaskStartScheduler+0xc4>)
 800761e:	2201      	movs	r2, #1
 8007620:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <vTaskStartScheduler+0xc8>)
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007628:	f001 f9da 	bl	80089e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800762c:	e00e      	b.n	800764c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d10a      	bne.n	800764c <vTaskStartScheduler+0xac>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60fb      	str	r3, [r7, #12]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <vTaskStartScheduler+0xaa>
}
 800764c:	bf00      	nop
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	08014358 	.word	0x08014358
 8007658:	08007ca9 	.word	0x08007ca9
 800765c:	24001274 	.word	0x24001274
 8007660:	24001270 	.word	0x24001270
 8007664:	2400125c 	.word	0x2400125c
 8007668:	24001254 	.word	0x24001254

0800766c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007670:	4b04      	ldr	r3, [pc, #16]	; (8007684 <vTaskSuspendAll+0x18>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	4a03      	ldr	r2, [pc, #12]	; (8007684 <vTaskSuspendAll+0x18>)
 8007678:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800767a:	bf00      	nop
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	24001278 	.word	0x24001278

08007688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007696:	4b42      	ldr	r3, [pc, #264]	; (80077a0 <xTaskResumeAll+0x118>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	603b      	str	r3, [r7, #0]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076b4:	f001 fa36 	bl	8008b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076b8:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <xTaskResumeAll+0x118>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3b01      	subs	r3, #1
 80076be:	4a38      	ldr	r2, [pc, #224]	; (80077a0 <xTaskResumeAll+0x118>)
 80076c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c2:	4b37      	ldr	r3, [pc, #220]	; (80077a0 <xTaskResumeAll+0x118>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d162      	bne.n	8007790 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076ca:	4b36      	ldr	r3, [pc, #216]	; (80077a4 <xTaskResumeAll+0x11c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d05e      	beq.n	8007790 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076d2:	e02f      	b.n	8007734 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d4:	4b34      	ldr	r3, [pc, #208]	; (80077a8 <xTaskResumeAll+0x120>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3318      	adds	r3, #24
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe fc99 	bl	8006018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fc94 	bl	8006018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f4:	4b2d      	ldr	r3, [pc, #180]	; (80077ac <xTaskResumeAll+0x124>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d903      	bls.n	8007704 <xTaskResumeAll+0x7c>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	4a2a      	ldr	r2, [pc, #168]	; (80077ac <xTaskResumeAll+0x124>)
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4a27      	ldr	r2, [pc, #156]	; (80077b0 <xTaskResumeAll+0x128>)
 8007712:	441a      	add	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3304      	adds	r3, #4
 8007718:	4619      	mov	r1, r3
 800771a:	4610      	mov	r0, r2
 800771c:	f7fe fc1f 	bl	8005f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <xTaskResumeAll+0x12c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800772e:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <xTaskResumeAll+0x130>)
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007734:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <xTaskResumeAll+0x120>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1cb      	bne.n	80076d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007742:	f000 fb67 	bl	8007e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <xTaskResumeAll+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d010      	beq.n	8007774 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007752:	f000 f859 	bl	8007808 <xTaskIncrementTick>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800775c:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <xTaskResumeAll+0x130>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3b01      	subs	r3, #1
 8007766:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1f1      	bne.n	8007752 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <xTaskResumeAll+0x134>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <xTaskResumeAll+0x130>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d009      	beq.n	8007790 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007780:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <xTaskResumeAll+0x138>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007790:	f001 f9f8 	bl	8008b84 <vPortExitCritical>

	return xAlreadyYielded;
 8007794:	68bb      	ldr	r3, [r7, #8]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	24001278 	.word	0x24001278
 80077a4:	24001250 	.word	0x24001250
 80077a8:	24001210 	.word	0x24001210
 80077ac:	24001258 	.word	0x24001258
 80077b0:	24000d80 	.word	0x24000d80
 80077b4:	24000d7c 	.word	0x24000d7c
 80077b8:	24001264 	.word	0x24001264
 80077bc:	24001260 	.word	0x24001260
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <xTaskGetTickCount+0x1c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077d0:	687b      	ldr	r3, [r7, #4]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	24001254 	.word	0x24001254

080077e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ea:	f001 fa7d 	bl	8008ce8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80077ee:	2300      	movs	r3, #0
 80077f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80077f2:	4b04      	ldr	r3, [pc, #16]	; (8007804 <xTaskGetTickCountFromISR+0x20>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077f8:	683b      	ldr	r3, [r7, #0]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	24001254 	.word	0x24001254

08007808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007812:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <xTaskIncrementTick+0x148>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f040 808f 	bne.w	800793a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800781c:	4b4d      	ldr	r3, [pc, #308]	; (8007954 <xTaskIncrementTick+0x14c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3301      	adds	r3, #1
 8007822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007824:	4a4b      	ldr	r2, [pc, #300]	; (8007954 <xTaskIncrementTick+0x14c>)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d120      	bne.n	8007872 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007830:	4b49      	ldr	r3, [pc, #292]	; (8007958 <xTaskIncrementTick+0x150>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <xTaskIncrementTick+0x48>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	603b      	str	r3, [r7, #0]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xTaskIncrementTick+0x46>
 8007850:	4b41      	ldr	r3, [pc, #260]	; (8007958 <xTaskIncrementTick+0x150>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	4b41      	ldr	r3, [pc, #260]	; (800795c <xTaskIncrementTick+0x154>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a3f      	ldr	r2, [pc, #252]	; (8007958 <xTaskIncrementTick+0x150>)
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	4a3f      	ldr	r2, [pc, #252]	; (800795c <xTaskIncrementTick+0x154>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	4b3e      	ldr	r3, [pc, #248]	; (8007960 <xTaskIncrementTick+0x158>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3301      	adds	r3, #1
 800786a:	4a3d      	ldr	r2, [pc, #244]	; (8007960 <xTaskIncrementTick+0x158>)
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	f000 fad1 	bl	8007e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007872:	4b3c      	ldr	r3, [pc, #240]	; (8007964 <xTaskIncrementTick+0x15c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	429a      	cmp	r2, r3
 800787a:	d349      	bcc.n	8007910 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <xTaskIncrementTick+0x150>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007886:	4b37      	ldr	r3, [pc, #220]	; (8007964 <xTaskIncrementTick+0x15c>)
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	601a      	str	r2, [r3, #0]
					break;
 800788e:	e03f      	b.n	8007910 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007890:	4b31      	ldr	r3, [pc, #196]	; (8007958 <xTaskIncrementTick+0x150>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d203      	bcs.n	80078b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078a8:	4a2e      	ldr	r2, [pc, #184]	; (8007964 <xTaskIncrementTick+0x15c>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078ae:	e02f      	b.n	8007910 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe fbaf 	bl	8006018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	3318      	adds	r3, #24
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fba6 	bl	8006018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d0:	4b25      	ldr	r3, [pc, #148]	; (8007968 <xTaskIncrementTick+0x160>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d903      	bls.n	80078e0 <xTaskIncrementTick+0xd8>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	4a22      	ldr	r2, [pc, #136]	; (8007968 <xTaskIncrementTick+0x160>)
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4a1f      	ldr	r2, [pc, #124]	; (800796c <xTaskIncrementTick+0x164>)
 80078ee:	441a      	add	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7fe fb31 	bl	8005f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4b1b      	ldr	r3, [pc, #108]	; (8007970 <xTaskIncrementTick+0x168>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	429a      	cmp	r2, r3
 8007908:	d3b8      	bcc.n	800787c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800790a:	2301      	movs	r3, #1
 800790c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800790e:	e7b5      	b.n	800787c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007910:	4b17      	ldr	r3, [pc, #92]	; (8007970 <xTaskIncrementTick+0x168>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007916:	4915      	ldr	r1, [pc, #84]	; (800796c <xTaskIncrementTick+0x164>)
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d901      	bls.n	800792c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007928:	2301      	movs	r3, #1
 800792a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800792c:	4b11      	ldr	r3, [pc, #68]	; (8007974 <xTaskIncrementTick+0x16c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007934:	2301      	movs	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e004      	b.n	8007944 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800793a:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <xTaskIncrementTick+0x170>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	4a0d      	ldr	r2, [pc, #52]	; (8007978 <xTaskIncrementTick+0x170>)
 8007942:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007944:	697b      	ldr	r3, [r7, #20]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	24001278 	.word	0x24001278
 8007954:	24001254 	.word	0x24001254
 8007958:	24001208 	.word	0x24001208
 800795c:	2400120c 	.word	0x2400120c
 8007960:	24001268 	.word	0x24001268
 8007964:	24001270 	.word	0x24001270
 8007968:	24001258 	.word	0x24001258
 800796c:	24000d80 	.word	0x24000d80
 8007970:	24000d7c 	.word	0x24000d7c
 8007974:	24001264 	.word	0x24001264
 8007978:	24001260 	.word	0x24001260

0800797c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007982:	4b28      	ldr	r3, [pc, #160]	; (8007a24 <vTaskSwitchContext+0xa8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800798a:	4b27      	ldr	r3, [pc, #156]	; (8007a28 <vTaskSwitchContext+0xac>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007990:	e041      	b.n	8007a16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007992:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <vTaskSwitchContext+0xac>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007998:	4b24      	ldr	r3, [pc, #144]	; (8007a2c <vTaskSwitchContext+0xb0>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e010      	b.n	80079c2 <vTaskSwitchContext+0x46>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <vTaskSwitchContext+0x40>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	607b      	str	r3, [r7, #4]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <vTaskSwitchContext+0x3e>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3b01      	subs	r3, #1
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	491b      	ldr	r1, [pc, #108]	; (8007a30 <vTaskSwitchContext+0xb4>)
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0e4      	beq.n	80079a0 <vTaskSwitchContext+0x24>
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <vTaskSwitchContext+0xb4>)
 80079e2:	4413      	add	r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	605a      	str	r2, [r3, #4]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	3308      	adds	r3, #8
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d104      	bne.n	8007a06 <vTaskSwitchContext+0x8a>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	605a      	str	r2, [r3, #4]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	4a09      	ldr	r2, [pc, #36]	; (8007a34 <vTaskSwitchContext+0xb8>)
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	4a06      	ldr	r2, [pc, #24]	; (8007a2c <vTaskSwitchContext+0xb0>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6013      	str	r3, [r2, #0]
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	24001278 	.word	0x24001278
 8007a28:	24001264 	.word	0x24001264
 8007a2c:	24001258 	.word	0x24001258
 8007a30:	24000d80 	.word	0x24000d80
 8007a34:	24000d7c 	.word	0x24000d7c

08007a38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	60fb      	str	r3, [r7, #12]
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a5e:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <vTaskPlaceOnEventList+0x44>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3318      	adds	r3, #24
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fe fa9d 	bl	8005fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	6838      	ldr	r0, [r7, #0]
 8007a70:	f000 fb8a 	bl	8008188 <prvAddCurrentTaskToDelayedList>
}
 8007a74:	bf00      	nop
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	24000d7c 	.word	0x24000d7c

08007a80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	617b      	str	r3, [r7, #20]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3318      	adds	r3, #24
 8007aae:	4619      	mov	r1, r3
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7fe fa54 	bl	8005f5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	68b8      	ldr	r0, [r7, #8]
 8007ac6:	f000 fb5f 	bl	8008188 <prvAddCurrentTaskToDelayedList>
	}
 8007aca:	bf00      	nop
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	24000d7c 	.word	0x24000d7c

08007ad8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	60fb      	str	r3, [r7, #12]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	3318      	adds	r3, #24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fe fa85 	bl	8006018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <xTaskRemoveFromEventList+0xb0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d11d      	bne.n	8007b52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fa7c 	bl	8006018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <xTaskRemoveFromEventList+0xb4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d903      	bls.n	8007b34 <xTaskRemoveFromEventList+0x5c>
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a16      	ldr	r2, [pc, #88]	; (8007b8c <xTaskRemoveFromEventList+0xb4>)
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <xTaskRemoveFromEventList+0xb8>)
 8007b42:	441a      	add	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f7fe fa07 	bl	8005f5e <vListInsertEnd>
 8007b50:	e005      	b.n	8007b5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3318      	adds	r3, #24
 8007b56:	4619      	mov	r1, r3
 8007b58:	480e      	ldr	r0, [pc, #56]	; (8007b94 <xTaskRemoveFromEventList+0xbc>)
 8007b5a:	f7fe fa00 	bl	8005f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <xTaskRemoveFromEventList+0xc0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d905      	bls.n	8007b78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <xTaskRemoveFromEventList+0xc4>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e001      	b.n	8007b7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b7c:	697b      	ldr	r3, [r7, #20]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	24001278 	.word	0x24001278
 8007b8c:	24001258 	.word	0x24001258
 8007b90:	24000d80 	.word	0x24000d80
 8007b94:	24001210 	.word	0x24001210
 8007b98:	24000d7c 	.word	0x24000d7c
 8007b9c:	24001264 	.word	0x24001264

08007ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ba8:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <vTaskInternalSetTimeOutState+0x24>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <vTaskInternalSetTimeOutState+0x28>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	605a      	str	r2, [r3, #4]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	24001268 	.word	0x24001268
 8007bc8:	24001254 	.word	0x24001254

08007bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	613b      	str	r3, [r7, #16]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10a      	bne.n	8007c0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	60fb      	str	r3, [r7, #12]
}
 8007c0a:	bf00      	nop
 8007c0c:	e7fe      	b.n	8007c0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c0e:	f000 ff89 	bl	8008b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c12:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <xTaskCheckForTimeOut+0xbc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d102      	bne.n	8007c32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	e023      	b.n	8007c7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <xTaskCheckForTimeOut+0xc0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d007      	beq.n	8007c4e <xTaskCheckForTimeOut+0x82>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d302      	bcc.n	8007c4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e015      	b.n	8007c7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d20b      	bcs.n	8007c70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff ff9b 	bl	8007ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	e004      	b.n	8007c7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c7a:	f000 ff83 	bl	8008b84 <vPortExitCritical>

	return xReturn;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	24001254 	.word	0x24001254
 8007c8c:	24001268 	.word	0x24001268

08007c90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c94:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <vTaskMissedYield+0x14>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
}
 8007c9a:	bf00      	nop
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	24001264 	.word	0x24001264

08007ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cb0:	f000 f852 	bl	8007d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <prvIdleTask+0x28>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d9f9      	bls.n	8007cb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <prvIdleTask+0x2c>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ccc:	e7f0      	b.n	8007cb0 <prvIdleTask+0x8>
 8007cce:	bf00      	nop
 8007cd0:	24000d80 	.word	0x24000d80
 8007cd4:	e000ed04 	.word	0xe000ed04

08007cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cde:	2300      	movs	r3, #0
 8007ce0:	607b      	str	r3, [r7, #4]
 8007ce2:	e00c      	b.n	8007cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4a12      	ldr	r2, [pc, #72]	; (8007d38 <prvInitialiseTaskLists+0x60>)
 8007cf0:	4413      	add	r3, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe f906 	bl	8005f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	607b      	str	r3, [r7, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b37      	cmp	r3, #55	; 0x37
 8007d02:	d9ef      	bls.n	8007ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d04:	480d      	ldr	r0, [pc, #52]	; (8007d3c <prvInitialiseTaskLists+0x64>)
 8007d06:	f7fe f8fd 	bl	8005f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d0a:	480d      	ldr	r0, [pc, #52]	; (8007d40 <prvInitialiseTaskLists+0x68>)
 8007d0c:	f7fe f8fa 	bl	8005f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d10:	480c      	ldr	r0, [pc, #48]	; (8007d44 <prvInitialiseTaskLists+0x6c>)
 8007d12:	f7fe f8f7 	bl	8005f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d16:	480c      	ldr	r0, [pc, #48]	; (8007d48 <prvInitialiseTaskLists+0x70>)
 8007d18:	f7fe f8f4 	bl	8005f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d1c:	480b      	ldr	r0, [pc, #44]	; (8007d4c <prvInitialiseTaskLists+0x74>)
 8007d1e:	f7fe f8f1 	bl	8005f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <prvInitialiseTaskLists+0x78>)
 8007d24:	4a05      	ldr	r2, [pc, #20]	; (8007d3c <prvInitialiseTaskLists+0x64>)
 8007d26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <prvInitialiseTaskLists+0x7c>)
 8007d2a:	4a05      	ldr	r2, [pc, #20]	; (8007d40 <prvInitialiseTaskLists+0x68>)
 8007d2c:	601a      	str	r2, [r3, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	24000d80 	.word	0x24000d80
 8007d3c:	240011e0 	.word	0x240011e0
 8007d40:	240011f4 	.word	0x240011f4
 8007d44:	24001210 	.word	0x24001210
 8007d48:	24001224 	.word	0x24001224
 8007d4c:	2400123c 	.word	0x2400123c
 8007d50:	24001208 	.word	0x24001208
 8007d54:	2400120c 	.word	0x2400120c

08007d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d5e:	e019      	b.n	8007d94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d60:	f000 fee0 	bl	8008b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d64:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <prvCheckTasksWaitingTermination+0x50>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe f951 	bl	8006018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d76:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <prvCheckTasksWaitingTermination+0x54>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	4a0b      	ldr	r2, [pc, #44]	; (8007dac <prvCheckTasksWaitingTermination+0x54>)
 8007d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <prvCheckTasksWaitingTermination+0x58>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	4a0a      	ldr	r2, [pc, #40]	; (8007db0 <prvCheckTasksWaitingTermination+0x58>)
 8007d88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d8a:	f000 fefb 	bl	8008b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f810 	bl	8007db4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <prvCheckTasksWaitingTermination+0x58>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e1      	bne.n	8007d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	24001224 	.word	0x24001224
 8007dac:	24001250 	.word	0x24001250
 8007db0:	24001238 	.word	0x24001238

08007db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d108      	bne.n	8007dd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f001 f898 	bl	8008f00 <vPortFree>
				vPortFree( pxTCB );
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 f895 	bl	8008f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dd6:	e018      	b.n	8007e0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d103      	bne.n	8007dea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 f88c 	bl	8008f00 <vPortFree>
	}
 8007de8:	e00f      	b.n	8007e0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d00a      	beq.n	8007e0a <prvDeleteTCB+0x56>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	60fb      	str	r3, [r7, #12]
}
 8007e06:	bf00      	nop
 8007e08:	e7fe      	b.n	8007e08 <prvDeleteTCB+0x54>
	}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <prvResetNextTaskUnblockTime+0x38>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <prvResetNextTaskUnblockTime+0x3c>)
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e2c:	e008      	b.n	8007e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <prvResetNextTaskUnblockTime+0x38>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <prvResetNextTaskUnblockTime+0x3c>)
 8007e3e:	6013      	str	r3, [r2, #0]
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	24001208 	.word	0x24001208
 8007e50:	24001270 	.word	0x24001270

08007e54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007e5a:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <xTaskGetCurrentTaskHandle+0x1c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007e60:	687b      	ldr	r3, [r7, #4]
	}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	24000d7c 	.word	0x24000d7c

08007e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <xTaskGetSchedulerState+0x34>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d102      	bne.n	8007e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e82:	2301      	movs	r3, #1
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	e008      	b.n	8007e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e88:	4b08      	ldr	r3, [pc, #32]	; (8007eac <xTaskGetSchedulerState+0x38>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e90:	2302      	movs	r3, #2
 8007e92:	607b      	str	r3, [r7, #4]
 8007e94:	e001      	b.n	8007e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e96:	2300      	movs	r3, #0
 8007e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e9a:	687b      	ldr	r3, [r7, #4]
	}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	2400125c 	.word	0x2400125c
 8007eac:	24001278 	.word	0x24001278

08007eb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d051      	beq.n	8007f6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <xTaskPriorityInherit+0xc4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d241      	bcs.n	8007f58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	db06      	blt.n	8007eea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <xTaskPriorityInherit+0xc4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6959      	ldr	r1, [r3, #20]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4a1f      	ldr	r2, [pc, #124]	; (8007f78 <xTaskPriorityInherit+0xc8>)
 8007efc:	4413      	add	r3, r2
 8007efe:	4299      	cmp	r1, r3
 8007f00:	d122      	bne.n	8007f48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	3304      	adds	r3, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe f886 	bl	8006018 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f0c:	4b19      	ldr	r3, [pc, #100]	; (8007f74 <xTaskPriorityInherit+0xc4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <xTaskPriorityInherit+0xcc>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d903      	bls.n	8007f2a <xTaskPriorityInherit+0x7a>
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	4a15      	ldr	r2, [pc, #84]	; (8007f7c <xTaskPriorityInherit+0xcc>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <xTaskPriorityInherit+0xc8>)
 8007f38:	441a      	add	r2, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7fe f80c 	bl	8005f5e <vListInsertEnd>
 8007f46:	e004      	b.n	8007f52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <xTaskPriorityInherit+0xc4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e008      	b.n	8007f6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <xTaskPriorityInherit+0xc4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d201      	bcs.n	8007f6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f66:	2301      	movs	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
	}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	24000d7c 	.word	0x24000d7c
 8007f78:	24000d80 	.word	0x24000d80
 8007f7c:	24001258 	.word	0x24001258

08007f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d056      	beq.n	8008044 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f96:	4b2e      	ldr	r3, [pc, #184]	; (8008050 <xTaskPriorityDisinherit+0xd0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d00a      	beq.n	8007fb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	60fb      	str	r3, [r7, #12]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60bb      	str	r3, [r7, #8]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd8:	1e5a      	subs	r2, r3, #1
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d02c      	beq.n	8008044 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d128      	bne.n	8008044 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe f80e 	bl	8006018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008014:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <xTaskPriorityDisinherit+0xd4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	429a      	cmp	r2, r3
 800801a:	d903      	bls.n	8008024 <xTaskPriorityDisinherit+0xa4>
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	4a0c      	ldr	r2, [pc, #48]	; (8008054 <xTaskPriorityDisinherit+0xd4>)
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4a09      	ldr	r2, [pc, #36]	; (8008058 <xTaskPriorityDisinherit+0xd8>)
 8008032:	441a      	add	r2, r3
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	3304      	adds	r3, #4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fd ff8f 	bl	8005f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008040:	2301      	movs	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008044:	697b      	ldr	r3, [r7, #20]
	}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	24000d7c 	.word	0x24000d7c
 8008054:	24001258 	.word	0x24001258
 8008058:	24000d80 	.word	0x24000d80

0800805c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800806a:	2301      	movs	r3, #1
 800806c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d06a      	beq.n	800814a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60fb      	str	r3, [r7, #12]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	d902      	bls.n	80080a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	e002      	b.n	80080a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d04b      	beq.n	800814a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d146      	bne.n	800814a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80080bc:	4b25      	ldr	r3, [pc, #148]	; (8008154 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d10a      	bne.n	80080dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	60bb      	str	r3, [r7, #8]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	db04      	blt.n	80080fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	6959      	ldr	r1, [r3, #20]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4a13      	ldr	r2, [pc, #76]	; (8008158 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800810a:	4413      	add	r3, r2
 800810c:	4299      	cmp	r1, r3
 800810e:	d11c      	bne.n	800814a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fd ff7f 	bl	8006018 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d903      	bls.n	800812e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	4a0c      	ldr	r2, [pc, #48]	; (800815c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4a07      	ldr	r2, [pc, #28]	; (8008158 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800813c:	441a      	add	r2, r3
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	3304      	adds	r3, #4
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f7fd ff0a 	bl	8005f5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800814a:	bf00      	nop
 800814c:	3720      	adds	r7, #32
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	24000d7c 	.word	0x24000d7c
 8008158:	24000d80 	.word	0x24000d80
 800815c:	24001258 	.word	0x24001258

08008160 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008164:	4b07      	ldr	r3, [pc, #28]	; (8008184 <pvTaskIncrementMutexHeldCount+0x24>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800816c:	4b05      	ldr	r3, [pc, #20]	; (8008184 <pvTaskIncrementMutexHeldCount+0x24>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008172:	3201      	adds	r2, #1
 8008174:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008176:	4b03      	ldr	r3, [pc, #12]	; (8008184 <pvTaskIncrementMutexHeldCount+0x24>)
 8008178:	681b      	ldr	r3, [r3, #0]
	}
 800817a:	4618      	mov	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	24000d7c 	.word	0x24000d7c

08008188 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008192:	4b21      	ldr	r3, [pc, #132]	; (8008218 <prvAddCurrentTaskToDelayedList+0x90>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008198:	4b20      	ldr	r3, [pc, #128]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fd ff3a 	bl	8006018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d10a      	bne.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b2:	4b1a      	ldr	r3, [pc, #104]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4619      	mov	r1, r3
 80081ba:	4819      	ldr	r0, [pc, #100]	; (8008220 <prvAddCurrentTaskToDelayedList+0x98>)
 80081bc:	f7fd fecf 	bl	8005f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081c0:	e026      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4413      	add	r3, r2
 80081c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d209      	bcs.n	80081ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081da:	4b12      	ldr	r3, [pc, #72]	; (8008224 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	f7fd fedd 	bl	8005fa6 <vListInsert>
}
 80081ec:	e010      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f7fd fed3 	bl	8005fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d202      	bcs.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800820a:	4a08      	ldr	r2, [pc, #32]	; (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6013      	str	r3, [r2, #0]
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	24001254 	.word	0x24001254
 800821c:	24000d7c 	.word	0x24000d7c
 8008220:	2400123c 	.word	0x2400123c
 8008224:	2400120c 	.word	0x2400120c
 8008228:	24001208 	.word	0x24001208
 800822c:	24001270 	.word	0x24001270

08008230 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08a      	sub	sp, #40	; 0x28
 8008234:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800823a:	f000 fb07 	bl	800884c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800823e:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <xTimerCreateTimerTask+0x80>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d021      	beq.n	800828a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800824e:	1d3a      	adds	r2, r7, #4
 8008250:	f107 0108 	add.w	r1, r7, #8
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd fe39 	bl	8005ed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	9202      	str	r2, [sp, #8]
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	2302      	movs	r3, #2
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	2300      	movs	r3, #0
 800826e:	460a      	mov	r2, r1
 8008270:	4910      	ldr	r1, [pc, #64]	; (80082b4 <xTimerCreateTimerTask+0x84>)
 8008272:	4811      	ldr	r0, [pc, #68]	; (80082b8 <xTimerCreateTimerTask+0x88>)
 8008274:	f7fe ffbe 	bl	80071f4 <xTaskCreateStatic>
 8008278:	4603      	mov	r3, r0
 800827a:	4a10      	ldr	r2, [pc, #64]	; (80082bc <xTimerCreateTimerTask+0x8c>)
 800827c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <xTimerCreateTimerTask+0x8c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008286:	2301      	movs	r3, #1
 8008288:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	613b      	str	r3, [r7, #16]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082a6:	697b      	ldr	r3, [r7, #20]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	240012ac 	.word	0x240012ac
 80082b4:	08014360 	.word	0x08014360
 80082b8:	080083f5 	.word	0x080083f5
 80082bc:	240012b0 	.word	0x240012b0

080082c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	; 0x28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	623b      	str	r3, [r7, #32]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <xTimerGenericCommand+0x98>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d02a      	beq.n	800834c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b05      	cmp	r3, #5
 8008306:	dc18      	bgt.n	800833a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008308:	f7ff fdb4 	bl	8007e74 <xTaskGetSchedulerState>
 800830c:	4603      	mov	r3, r0
 800830e:	2b02      	cmp	r3, #2
 8008310:	d109      	bne.n	8008326 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <xTimerGenericCommand+0x98>)
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f107 0110 	add.w	r1, r7, #16
 800831a:	2300      	movs	r3, #0
 800831c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831e:	f7fe f903 	bl	8006528 <xQueueGenericSend>
 8008322:	6278      	str	r0, [r7, #36]	; 0x24
 8008324:	e012      	b.n	800834c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <xTimerGenericCommand+0x98>)
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	f107 0110 	add.w	r1, r7, #16
 800832e:	2300      	movs	r3, #0
 8008330:	2200      	movs	r2, #0
 8008332:	f7fe f8f9 	bl	8006528 <xQueueGenericSend>
 8008336:	6278      	str	r0, [r7, #36]	; 0x24
 8008338:	e008      	b.n	800834c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <xTimerGenericCommand+0x98>)
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	f107 0110 	add.w	r1, r7, #16
 8008342:	2300      	movs	r3, #0
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	f7fe f9ed 	bl	8006724 <xQueueGenericSendFromISR>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800834e:	4618      	mov	r0, r3
 8008350:	3728      	adds	r7, #40	; 0x28
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	240012ac 	.word	0x240012ac

0800835c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af02      	add	r7, sp, #8
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008366:	4b22      	ldr	r3, [pc, #136]	; (80083f0 <prvProcessExpiredTimer+0x94>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3304      	adds	r3, #4
 8008374:	4618      	mov	r0, r3
 8008376:	f7fd fe4f 	bl	8006018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d022      	beq.n	80083ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	699a      	ldr	r2, [r3, #24]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	18d1      	adds	r1, r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	6978      	ldr	r0, [r7, #20]
 8008396:	f000 f8d1 	bl	800853c <prvInsertTimerInActiveList>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01f      	beq.n	80083e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	2100      	movs	r1, #0
 80083aa:	6978      	ldr	r0, [r7, #20]
 80083ac:	f7ff ff88 	bl	80082c0 <xTimerGenericCommand>
 80083b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d113      	bne.n	80083e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	60fb      	str	r3, [r7, #12]
}
 80083ca:	bf00      	nop
 80083cc:	e7fe      	b.n	80083cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d4:	f023 0301 	bic.w	r3, r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	6978      	ldr	r0, [r7, #20]
 80083e6:	4798      	blx	r3
}
 80083e8:	bf00      	nop
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	240012a4 	.word	0x240012a4

080083f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083fc:	f107 0308 	add.w	r3, r7, #8
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f857 	bl	80084b4 <prvGetNextExpireTime>
 8008406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4619      	mov	r1, r3
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f803 	bl	8008418 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008412:	f000 f8d5 	bl	80085c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008416:	e7f1      	b.n	80083fc <prvTimerTask+0x8>

08008418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008422:	f7ff f923 	bl	800766c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008426:	f107 0308 	add.w	r3, r7, #8
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f866 	bl	80084fc <prvSampleTimeNow>
 8008430:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d130      	bne.n	800849a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <prvProcessTimerOrBlockTask+0x3c>
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	429a      	cmp	r2, r3
 8008444:	d806      	bhi.n	8008454 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008446:	f7ff f91f 	bl	8007688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff ff85 	bl	800835c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008452:	e024      	b.n	800849e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d008      	beq.n	800846c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <prvProcessTimerOrBlockTask+0x90>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <prvProcessTimerOrBlockTask+0x50>
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <prvProcessTimerOrBlockTask+0x52>
 8008468:	2300      	movs	r3, #0
 800846a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800846c:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <prvProcessTimerOrBlockTask+0x94>)
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	4619      	mov	r1, r3
 800847a:	f7fe fe87 	bl	800718c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800847e:	f7ff f903 	bl	8007688 <xTaskResumeAll>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008488:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <prvProcessTimerOrBlockTask+0x98>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
}
 8008498:	e001      	b.n	800849e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800849a:	f7ff f8f5 	bl	8007688 <xTaskResumeAll>
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	240012a8 	.word	0x240012a8
 80084ac:	240012ac 	.word	0x240012ac
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <prvGetNextExpireTime+0x44>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <prvGetNextExpireTime+0x16>
 80084c6:	2201      	movs	r2, #1
 80084c8:	e000      	b.n	80084cc <prvGetNextExpireTime+0x18>
 80084ca:	2200      	movs	r2, #0
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084d8:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <prvGetNextExpireTime+0x44>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e001      	b.n	80084e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	240012a4 	.word	0x240012a4

080084fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008504:	f7ff f95e 	bl	80077c4 <xTaskGetTickCount>
 8008508:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <prvSampleTimeNow+0x3c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	429a      	cmp	r2, r3
 8008512:	d205      	bcs.n	8008520 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008514:	f000 f936 	bl	8008784 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e002      	b.n	8008526 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008526:	4a04      	ldr	r2, [pc, #16]	; (8008538 <prvSampleTimeNow+0x3c>)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	240012b4 	.word	0x240012b4

0800853c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	429a      	cmp	r2, r3
 8008560:	d812      	bhi.n	8008588 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	429a      	cmp	r2, r3
 800856e:	d302      	bcc.n	8008576 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008570:	2301      	movs	r3, #1
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e01b      	b.n	80085ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008576:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <prvInsertTimerInActiveList+0x7c>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3304      	adds	r3, #4
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f7fd fd10 	bl	8005fa6 <vListInsert>
 8008586:	e012      	b.n	80085ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d206      	bcs.n	800859e <prvInsertTimerInActiveList+0x62>
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d302      	bcc.n	800859e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]
 800859c:	e007      	b.n	80085ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800859e:	4b07      	ldr	r3, [pc, #28]	; (80085bc <prvInsertTimerInActiveList+0x80>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7fd fcfc 	bl	8005fa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085ae:	697b      	ldr	r3, [r7, #20]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	240012a8 	.word	0x240012a8
 80085bc:	240012a4 	.word	0x240012a4

080085c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08e      	sub	sp, #56	; 0x38
 80085c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085c6:	e0ca      	b.n	800875e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da18      	bge.n	8008600 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085ce:	1d3b      	adds	r3, r7, #4
 80085d0:	3304      	adds	r3, #4
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10a      	bne.n	80085f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	61fb      	str	r3, [r7, #28]
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f6:	6850      	ldr	r0, [r2, #4]
 80085f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fa:	6892      	ldr	r2, [r2, #8]
 80085fc:	4611      	mov	r1, r2
 80085fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f2c0 80aa 	blt.w	800875c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fd fcfd 	bl	8006018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800861e:	463b      	mov	r3, r7
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff ff6b 	bl	80084fc <prvSampleTimeNow>
 8008626:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b09      	cmp	r3, #9
 800862c:	f200 8097 	bhi.w	800875e <prvProcessReceivedCommands+0x19e>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <prvProcessReceivedCommands+0x78>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	08008661 	.word	0x08008661
 800863c:	08008661 	.word	0x08008661
 8008640:	08008661 	.word	0x08008661
 8008644:	080086d5 	.word	0x080086d5
 8008648:	080086e9 	.word	0x080086e9
 800864c:	08008733 	.word	0x08008733
 8008650:	08008661 	.word	0x08008661
 8008654:	08008661 	.word	0x08008661
 8008658:	080086d5 	.word	0x080086d5
 800865c:	080086e9 	.word	0x080086e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008666:	f043 0301 	orr.w	r3, r3, #1
 800866a:	b2da      	uxtb	r2, r3
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	18d1      	adds	r1, r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008680:	f7ff ff5c 	bl	800853c <prvInsertTimerInActiveList>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d069      	beq.n	800875e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d05e      	beq.n	800875e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	441a      	add	r2, r3
 80086a8:	2300      	movs	r3, #0
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	2300      	movs	r3, #0
 80086ae:	2100      	movs	r1, #0
 80086b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b2:	f7ff fe05 	bl	80082c0 <xTimerGenericCommand>
 80086b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d14f      	bne.n	800875e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61bb      	str	r3, [r7, #24]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086da:	f023 0301 	bic.w	r3, r3, #1
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086e6:	e03a      	b.n	800875e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	617b      	str	r3, [r7, #20]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	18d1      	adds	r1, r2, r3
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800872c:	f7ff ff06 	bl	800853c <prvInsertTimerInActiveList>
					break;
 8008730:	e015      	b.n	800875e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008742:	f000 fbdd 	bl	8008f00 <vPortFree>
 8008746:	e00a      	b.n	800875e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800874e:	f023 0301 	bic.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800875a:	e000      	b.n	800875e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800875c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <prvProcessReceivedCommands+0x1c0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	1d39      	adds	r1, r7, #4
 8008764:	2200      	movs	r2, #0
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe f904 	bl	8006974 <xQueueReceive>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	f47f af2a 	bne.w	80085c8 <prvProcessReceivedCommands+0x8>
	}
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	3730      	adds	r7, #48	; 0x30
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	240012ac 	.word	0x240012ac

08008784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800878a:	e048      	b.n	800881e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <prvSwitchTimerLists+0xc0>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008796:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <prvSwitchTimerLists+0xc0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3304      	adds	r3, #4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd fc37 	bl	8006018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d02e      	beq.n	800881e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4413      	add	r3, r2
 80087c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d90e      	bls.n	80087f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087de:	4b19      	ldr	r3, [pc, #100]	; (8008844 <prvSwitchTimerLists+0xc0>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7fd fbdc 	bl	8005fa6 <vListInsert>
 80087ee:	e016      	b.n	800881e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087f0:	2300      	movs	r3, #0
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	2300      	movs	r3, #0
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff fd60 	bl	80082c0 <xTimerGenericCommand>
 8008800:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	603b      	str	r3, [r7, #0]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <prvSwitchTimerLists+0xc0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1b1      	bne.n	800878c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008828:	4b06      	ldr	r3, [pc, #24]	; (8008844 <prvSwitchTimerLists+0xc0>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800882e:	4b06      	ldr	r3, [pc, #24]	; (8008848 <prvSwitchTimerLists+0xc4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a04      	ldr	r2, [pc, #16]	; (8008844 <prvSwitchTimerLists+0xc0>)
 8008834:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008836:	4a04      	ldr	r2, [pc, #16]	; (8008848 <prvSwitchTimerLists+0xc4>)
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	6013      	str	r3, [r2, #0]
}
 800883c:	bf00      	nop
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	240012a4 	.word	0x240012a4
 8008848:	240012a8 	.word	0x240012a8

0800884c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008852:	f000 f967 	bl	8008b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008856:	4b15      	ldr	r3, [pc, #84]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d120      	bne.n	80088a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800885e:	4814      	ldr	r0, [pc, #80]	; (80088b0 <prvCheckForValidListAndQueue+0x64>)
 8008860:	f7fd fb50 	bl	8005f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008864:	4813      	ldr	r0, [pc, #76]	; (80088b4 <prvCheckForValidListAndQueue+0x68>)
 8008866:	f7fd fb4d 	bl	8005f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800886a:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <prvCheckForValidListAndQueue+0x6c>)
 800886c:	4a10      	ldr	r2, [pc, #64]	; (80088b0 <prvCheckForValidListAndQueue+0x64>)
 800886e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008870:	4b12      	ldr	r3, [pc, #72]	; (80088bc <prvCheckForValidListAndQueue+0x70>)
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <prvCheckForValidListAndQueue+0x68>)
 8008874:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008876:	2300      	movs	r3, #0
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <prvCheckForValidListAndQueue+0x74>)
 800887c:	4a11      	ldr	r2, [pc, #68]	; (80088c4 <prvCheckForValidListAndQueue+0x78>)
 800887e:	2110      	movs	r1, #16
 8008880:	200a      	movs	r0, #10
 8008882:	f7fd fc5b 	bl	800613c <xQueueGenericCreateStatic>
 8008886:	4603      	mov	r3, r0
 8008888:	4a08      	ldr	r2, [pc, #32]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 800888a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800888c:	4b07      	ldr	r3, [pc, #28]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	490b      	ldr	r1, [pc, #44]	; (80088c8 <prvCheckForValidListAndQueue+0x7c>)
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fc22 	bl	80070e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088a0:	f000 f970 	bl	8008b84 <vPortExitCritical>
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	240012ac 	.word	0x240012ac
 80088b0:	2400127c 	.word	0x2400127c
 80088b4:	24001290 	.word	0x24001290
 80088b8:	240012a4 	.word	0x240012a4
 80088bc:	240012a8 	.word	0x240012a8
 80088c0:	24001358 	.word	0x24001358
 80088c4:	240012b8 	.word	0x240012b8
 80088c8:	08014368 	.word	0x08014368

080088cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3b04      	subs	r3, #4
 80088dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3b04      	subs	r3, #4
 80088ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f023 0201 	bic.w	r2, r3, #1
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3b04      	subs	r3, #4
 80088fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088fc:	4a0c      	ldr	r2, [pc, #48]	; (8008930 <pxPortInitialiseStack+0x64>)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3b14      	subs	r3, #20
 8008906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3b04      	subs	r3, #4
 8008912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f06f 0202 	mvn.w	r2, #2
 800891a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3b20      	subs	r3, #32
 8008920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008922:	68fb      	ldr	r3, [r7, #12]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	08008935 	.word	0x08008935

08008934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <prvTaskExitError+0x54>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008946:	d00a      	beq.n	800895e <prvTaskExitError+0x2a>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	60fb      	str	r3, [r7, #12]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <prvTaskExitError+0x28>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	60bb      	str	r3, [r7, #8]
}
 8008970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008972:	bf00      	nop
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0fc      	beq.n	8008974 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800897a:	bf00      	nop
 800897c:	bf00      	nop
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	24000024 	.word	0x24000024
 800898c:	00000000 	.word	0x00000000

08008990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <pxCurrentTCBConst2>)
 8008992:	6819      	ldr	r1, [r3, #0]
 8008994:	6808      	ldr	r0, [r1, #0]
 8008996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	f380 8809 	msr	PSP, r0
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f04f 0000 	mov.w	r0, #0
 80089a6:	f380 8811 	msr	BASEPRI, r0
 80089aa:	4770      	bx	lr
 80089ac:	f3af 8000 	nop.w

080089b0 <pxCurrentTCBConst2>:
 80089b0:	24000d7c 	.word	0x24000d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop

080089b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089b8:	4808      	ldr	r0, [pc, #32]	; (80089dc <prvPortStartFirstTask+0x24>)
 80089ba:	6800      	ldr	r0, [r0, #0]
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	f380 8808 	msr	MSP, r0
 80089c2:	f04f 0000 	mov.w	r0, #0
 80089c6:	f380 8814 	msr	CONTROL, r0
 80089ca:	b662      	cpsie	i
 80089cc:	b661      	cpsie	f
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	df00      	svc	0
 80089d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089da:	bf00      	nop
 80089dc:	e000ed08 	.word	0xe000ed08

080089e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089e6:	4b46      	ldr	r3, [pc, #280]	; (8008b00 <xPortStartScheduler+0x120>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a46      	ldr	r2, [pc, #280]	; (8008b04 <xPortStartScheduler+0x124>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d10a      	bne.n	8008a06 <xPortStartScheduler+0x26>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	613b      	str	r3, [r7, #16]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a06:	4b3e      	ldr	r3, [pc, #248]	; (8008b00 <xPortStartScheduler+0x120>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a3f      	ldr	r2, [pc, #252]	; (8008b08 <xPortStartScheduler+0x128>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10a      	bne.n	8008a26 <xPortStartScheduler+0x46>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	60fb      	str	r3, [r7, #12]
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a26:	4b39      	ldr	r3, [pc, #228]	; (8008b0c <xPortStartScheduler+0x12c>)
 8008a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	22ff      	movs	r2, #255	; 0xff
 8008a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	4b31      	ldr	r3, [pc, #196]	; (8008b10 <xPortStartScheduler+0x130>)
 8008a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a4e:	4b31      	ldr	r3, [pc, #196]	; (8008b14 <xPortStartScheduler+0x134>)
 8008a50:	2207      	movs	r2, #7
 8008a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a54:	e009      	b.n	8008a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a56:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <xPortStartScheduler+0x134>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	4a2d      	ldr	r2, [pc, #180]	; (8008b14 <xPortStartScheduler+0x134>)
 8008a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b80      	cmp	r3, #128	; 0x80
 8008a74:	d0ef      	beq.n	8008a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a76:	4b27      	ldr	r3, [pc, #156]	; (8008b14 <xPortStartScheduler+0x134>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f1c3 0307 	rsb	r3, r3, #7
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d00a      	beq.n	8008a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60bb      	str	r3, [r7, #8]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a98:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <xPortStartScheduler+0x134>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	4a1d      	ldr	r2, [pc, #116]	; (8008b14 <xPortStartScheduler+0x134>)
 8008aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aa2:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <xPortStartScheduler+0x134>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aaa:	4a1a      	ldr	r2, [pc, #104]	; (8008b14 <xPortStartScheduler+0x134>)
 8008aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ab6:	4b18      	ldr	r3, [pc, #96]	; (8008b18 <xPortStartScheduler+0x138>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a17      	ldr	r2, [pc, #92]	; (8008b18 <xPortStartScheduler+0x138>)
 8008abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ac2:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <xPortStartScheduler+0x138>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a14      	ldr	r2, [pc, #80]	; (8008b18 <xPortStartScheduler+0x138>)
 8008ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ace:	f000 f8dd 	bl	8008c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ad2:	4b12      	ldr	r3, [pc, #72]	; (8008b1c <xPortStartScheduler+0x13c>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ad8:	f000 f8fc 	bl	8008cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008adc:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <xPortStartScheduler+0x140>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a0f      	ldr	r2, [pc, #60]	; (8008b20 <xPortStartScheduler+0x140>)
 8008ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ae8:	f7ff ff66 	bl	80089b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008aec:	f7fe ff46 	bl	800797c <vTaskSwitchContext>
	prvTaskExitError();
 8008af0:	f7ff ff20 	bl	8008934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	e000ed00 	.word	0xe000ed00
 8008b04:	410fc271 	.word	0x410fc271
 8008b08:	410fc270 	.word	0x410fc270
 8008b0c:	e000e400 	.word	0xe000e400
 8008b10:	240013a8 	.word	0x240013a8
 8008b14:	240013ac 	.word	0x240013ac
 8008b18:	e000ed20 	.word	0xe000ed20
 8008b1c:	24000024 	.word	0x24000024
 8008b20:	e000ef34 	.word	0xe000ef34

08008b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	607b      	str	r3, [r7, #4]
}
 8008b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <vPortEnterCritical+0x58>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	4a0d      	ldr	r2, [pc, #52]	; (8008b7c <vPortEnterCritical+0x58>)
 8008b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b48:	4b0c      	ldr	r3, [pc, #48]	; (8008b7c <vPortEnterCritical+0x58>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d10f      	bne.n	8008b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <vPortEnterCritical+0x5c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	603b      	str	r3, [r7, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <vPortEnterCritical+0x4a>
	}
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	24000024 	.word	0x24000024
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b8a:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <vPortExitCritical+0x50>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10a      	bne.n	8008ba8 <vPortExitCritical+0x24>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	607b      	str	r3, [r7, #4]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <vPortExitCritical+0x50>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	4a09      	ldr	r2, [pc, #36]	; (8008bd4 <vPortExitCritical+0x50>)
 8008bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bb2:	4b08      	ldr	r3, [pc, #32]	; (8008bd4 <vPortExitCritical+0x50>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <vPortExitCritical+0x42>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	f383 8811 	msr	BASEPRI, r3
}
 8008bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	24000024 	.word	0x24000024
	...

08008be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008be0:	f3ef 8009 	mrs	r0, PSP
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <pxCurrentTCBConst>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	f01e 0f10 	tst.w	lr, #16
 8008bf0:	bf08      	it	eq
 8008bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	6010      	str	r0, [r2, #0]
 8008bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c04:	f380 8811 	msr	BASEPRI, r0
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f7fe feb4 	bl	800797c <vTaskSwitchContext>
 8008c14:	f04f 0000 	mov.w	r0, #0
 8008c18:	f380 8811 	msr	BASEPRI, r0
 8008c1c:	bc09      	pop	{r0, r3}
 8008c1e:	6819      	ldr	r1, [r3, #0]
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c26:	f01e 0f10 	tst.w	lr, #16
 8008c2a:	bf08      	it	eq
 8008c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c30:	f380 8809 	msr	PSP, r0
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	f3af 8000 	nop.w

08008c40 <pxCurrentTCBConst>:
 8008c40:	24000d7c 	.word	0x24000d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop

08008c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	607b      	str	r3, [r7, #4]
}
 8008c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c62:	f7fe fdd1 	bl	8007808 <xTaskIncrementTick>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <xPortSysTickHandler+0x40>)
 8008c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	2300      	movs	r3, #0
 8008c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f383 8811 	msr	BASEPRI, r3
}
 8008c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <vPortSetupTimerInterrupt+0x34>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c96:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <vPortSetupTimerInterrupt+0x38>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <vPortSetupTimerInterrupt+0x3c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <vPortSetupTimerInterrupt+0x40>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	099b      	lsrs	r3, r3, #6
 8008ca8:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <vPortSetupTimerInterrupt+0x44>)
 8008caa:	3b01      	subs	r3, #1
 8008cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cae:	4b04      	ldr	r3, [pc, #16]	; (8008cc0 <vPortSetupTimerInterrupt+0x34>)
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	601a      	str	r2, [r3, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	e000e010 	.word	0xe000e010
 8008cc4:	e000e018 	.word	0xe000e018
 8008cc8:	24000000 	.word	0x24000000
 8008ccc:	10624dd3 	.word	0x10624dd3
 8008cd0:	e000e014 	.word	0xe000e014

08008cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ce4 <vPortEnableVFP+0x10>
 8008cd8:	6801      	ldr	r1, [r0, #0]
 8008cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cde:	6001      	str	r1, [r0, #0]
 8008ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ce2:	bf00      	nop
 8008ce4:	e000ed88 	.word	0xe000ed88

08008ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cee:	f3ef 8305 	mrs	r3, IPSR
 8008cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b0f      	cmp	r3, #15
 8008cf8:	d914      	bls.n	8008d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cfa:	4a17      	ldr	r2, [pc, #92]	; (8008d58 <vPortValidateInterruptPriority+0x70>)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d04:	4b15      	ldr	r3, [pc, #84]	; (8008d5c <vPortValidateInterruptPriority+0x74>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	7afa      	ldrb	r2, [r7, #11]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d20a      	bcs.n	8008d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d24:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <vPortValidateInterruptPriority+0x78>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <vPortValidateInterruptPriority+0x7c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d90a      	bls.n	8008d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	603b      	str	r3, [r7, #0]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <vPortValidateInterruptPriority+0x60>
	}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	e000e3f0 	.word	0xe000e3f0
 8008d5c:	240013a8 	.word	0x240013a8
 8008d60:	e000ed0c 	.word	0xe000ed0c
 8008d64:	240013ac 	.word	0x240013ac

08008d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d74:	f7fe fc7a 	bl	800766c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d78:	4b5b      	ldr	r3, [pc, #364]	; (8008ee8 <pvPortMalloc+0x180>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d80:	f000 f920 	bl	8008fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d84:	4b59      	ldr	r3, [pc, #356]	; (8008eec <pvPortMalloc+0x184>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 8093 	bne.w	8008eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01d      	beq.n	8008dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d98:	2208      	movs	r2, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d014      	beq.n	8008dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f023 0307 	bic.w	r3, r3, #7
 8008db0:	3308      	adds	r3, #8
 8008db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	617b      	str	r3, [r7, #20]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d06e      	beq.n	8008eb8 <pvPortMalloc+0x150>
 8008dda:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <pvPortMalloc+0x188>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d869      	bhi.n	8008eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008de4:	4b43      	ldr	r3, [pc, #268]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008de8:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dee:	e004      	b.n	8008dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <pvPortMalloc+0xa4>
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f1      	bne.n	8008df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e0c:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <pvPortMalloc+0x180>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d050      	beq.n	8008eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	4413      	add	r3, r2
 8008e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	2308      	movs	r3, #8
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d91f      	bls.n	8008e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <pvPortMalloc+0xf8>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	613b      	str	r3, [r7, #16]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e72:	69b8      	ldr	r0, [r7, #24]
 8008e74:	f000 f908 	bl	8009088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e78:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d203      	bcs.n	8008e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e92:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <pvPortMalloc+0x184>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <pvPortMalloc+0x194>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4a11      	ldr	r2, [pc, #68]	; (8008efc <pvPortMalloc+0x194>)
 8008eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008eb8:	f7fe fbe6 	bl	8007688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <pvPortMalloc+0x174>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <pvPortMalloc+0x172>
	return pvReturn;
 8008edc:	69fb      	ldr	r3, [r7, #28]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3728      	adds	r7, #40	; 0x28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	24004fb8 	.word	0x24004fb8
 8008eec:	24004fcc 	.word	0x24004fcc
 8008ef0:	24004fbc 	.word	0x24004fbc
 8008ef4:	24004fb0 	.word	0x24004fb0
 8008ef8:	24004fc0 	.word	0x24004fc0
 8008efc:	24004fc4 	.word	0x24004fc4

08008f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d04d      	beq.n	8008fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f12:	2308      	movs	r3, #8
 8008f14:	425b      	negs	r3, r3
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <vPortFree+0xb8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <vPortFree+0x44>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	60fb      	str	r3, [r7, #12]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <vPortFree+0x62>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	60bb      	str	r3, [r7, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <vPortFree+0xb8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01e      	beq.n	8008fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d11a      	bne.n	8008fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <vPortFree+0xb8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f88:	f7fe fb70 	bl	800766c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <vPortFree+0xbc>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <vPortFree+0xbc>)
 8008f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f000 f874 	bl	8009088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vPortFree+0xc0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vPortFree+0xc0>)
 8008fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008faa:	f7fe fb6d 	bl	8007688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fae:	bf00      	nop
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	24004fcc 	.word	0x24004fcc
 8008fbc:	24004fbc 	.word	0x24004fbc
 8008fc0:	24004fc8 	.word	0x24004fc8

08008fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvHeapInit+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvHeapInit+0xac>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <prvHeapInit+0xb0>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <prvHeapInit+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009010:	2208      	movs	r2, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvHeapInit+0xb4>)
 8009024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvHeapInit+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvHeapInit+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvHeapInit+0xb4>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvHeapInit+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <prvHeapInit+0xbc>)
 800905a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <prvHeapInit+0xc0>)
 800905e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	240013b0 	.word	0x240013b0
 8009074:	24004fb0 	.word	0x24004fb0
 8009078:	24004fb8 	.word	0x24004fb8
 800907c:	24004fc0 	.word	0x24004fc0
 8009080:	24004fbc 	.word	0x24004fbc
 8009084:	24004fcc 	.word	0x24004fcc

08009088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <prvInsertBlockIntoFreeList+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e002      	b.n	800909c <prvInsertBlockIntoFreeList+0x14>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8f7      	bhi.n	8009096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d108      	bne.n	80090ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d118      	bne.n	8009110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d00d      	beq.n	8009106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e008      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e003      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	24004fb0 	.word	0x24004fb0
 8009138:	24004fb8 	.word	0x24004fb8

0800913c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009146:	f007 fabd 	bl	80106c4 <sys_timeouts_sleeptime>
 800914a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009152:	d10b      	bne.n	800916c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009154:	4813      	ldr	r0, [pc, #76]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009156:	f00a f80e 	bl	8013176 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800915a:	2200      	movs	r2, #0
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f009 ff96 	bl	8013090 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009164:	480f      	ldr	r0, [pc, #60]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009166:	f009 fff7 	bl	8013158 <sys_mutex_lock>
    return;
 800916a:	e018      	b.n	800919e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d102      	bne.n	8009178 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009172:	f007 fa6d 	bl	8010650 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009176:	e7e6      	b.n	8009146 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009178:	480a      	ldr	r0, [pc, #40]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800917a:	f009 fffc 	bl	8013176 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f009 ff84 	bl	8013090 <sys_arch_mbox_fetch>
 8009188:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800918a:	4806      	ldr	r0, [pc, #24]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800918c:	f009 ffe4 	bl	8013158 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d102      	bne.n	800919e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009198:	f007 fa5a 	bl	8010650 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800919c:	e7d3      	b.n	8009146 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	24005414 	.word	0x24005414

080091a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80091b0:	4810      	ldr	r0, [pc, #64]	; (80091f4 <tcpip_thread+0x4c>)
 80091b2:	f009 ffd1 	bl	8013158 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80091b6:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <tcpip_thread+0x50>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80091be:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <tcpip_thread+0x50>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a0e      	ldr	r2, [pc, #56]	; (80091fc <tcpip_thread+0x54>)
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	4610      	mov	r0, r2
 80091c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80091ca:	f107 030c 	add.w	r3, r7, #12
 80091ce:	4619      	mov	r1, r3
 80091d0:	480b      	ldr	r0, [pc, #44]	; (8009200 <tcpip_thread+0x58>)
 80091d2:	f7ff ffb3 	bl	800913c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d106      	bne.n	80091ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <tcpip_thread+0x5c>)
 80091de:	2291      	movs	r2, #145	; 0x91
 80091e0:	4909      	ldr	r1, [pc, #36]	; (8009208 <tcpip_thread+0x60>)
 80091e2:	480a      	ldr	r0, [pc, #40]	; (800920c <tcpip_thread+0x64>)
 80091e4:	f00a f85a 	bl	801329c <iprintf>
      continue;
 80091e8:	e003      	b.n	80091f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 f80f 	bl	8009210 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80091f2:	e7ea      	b.n	80091ca <tcpip_thread+0x22>
 80091f4:	24005414 	.word	0x24005414
 80091f8:	24004fd0 	.word	0x24004fd0
 80091fc:	24004fd4 	.word	0x24004fd4
 8009200:	24004fd8 	.word	0x24004fd8
 8009204:	08014370 	.word	0x08014370
 8009208:	080143a0 	.word	0x080143a0
 800920c:	080143c0 	.word	0x080143c0

08009210 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d026      	beq.n	800926e <tcpip_thread_handle_msg+0x5e>
 8009220:	2b02      	cmp	r3, #2
 8009222:	dc2b      	bgt.n	800927c <tcpip_thread_handle_msg+0x6c>
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <tcpip_thread_handle_msg+0x1e>
 8009228:	2b01      	cmp	r3, #1
 800922a:	d015      	beq.n	8009258 <tcpip_thread_handle_msg+0x48>
 800922c:	e026      	b.n	800927c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6850      	ldr	r0, [r2, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6892      	ldr	r2, [r2, #8]
 800923a:	4611      	mov	r1, r2
 800923c:	4798      	blx	r3
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	f001 fd07 	bl	800ac5c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	2009      	movs	r0, #9
 8009252:	f000 fe5f 	bl	8009f14 <memp_free>
      break;
 8009256:	e018      	b.n	800928a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6892      	ldr	r2, [r2, #8]
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	2008      	movs	r0, #8
 8009268:	f000 fe54 	bl	8009f14 <memp_free>
      break;
 800926c:	e00d      	b.n	800928a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6892      	ldr	r2, [r2, #8]
 8009276:	4610      	mov	r0, r2
 8009278:	4798      	blx	r3
      break;
 800927a:	e006      	b.n	800928a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <tcpip_thread_handle_msg+0x84>)
 800927e:	22cf      	movs	r2, #207	; 0xcf
 8009280:	4905      	ldr	r1, [pc, #20]	; (8009298 <tcpip_thread_handle_msg+0x88>)
 8009282:	4806      	ldr	r0, [pc, #24]	; (800929c <tcpip_thread_handle_msg+0x8c>)
 8009284:	f00a f80a 	bl	801329c <iprintf>
      break;
 8009288:	bf00      	nop
  }
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	08014370 	.word	0x08014370
 8009298:	080143a0 	.word	0x080143a0
 800929c:	080143c0 	.word	0x080143c0

080092a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80092ac:	481a      	ldr	r0, [pc, #104]	; (8009318 <tcpip_inpkt+0x78>)
 80092ae:	f009 ff20 	bl	80130f2 <sys_mbox_valid>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d105      	bne.n	80092c4 <tcpip_inpkt+0x24>
 80092b8:	4b18      	ldr	r3, [pc, #96]	; (800931c <tcpip_inpkt+0x7c>)
 80092ba:	22fc      	movs	r2, #252	; 0xfc
 80092bc:	4918      	ldr	r1, [pc, #96]	; (8009320 <tcpip_inpkt+0x80>)
 80092be:	4819      	ldr	r0, [pc, #100]	; (8009324 <tcpip_inpkt+0x84>)
 80092c0:	f009 ffec 	bl	801329c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80092c4:	2009      	movs	r0, #9
 80092c6:	f000 fdaf 	bl	8009e28 <memp_malloc>
 80092ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80092d2:	f04f 33ff 	mov.w	r3, #4294967295
 80092d6:	e01a      	b.n	800930e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80092f0:	6979      	ldr	r1, [r7, #20]
 80092f2:	4809      	ldr	r0, [pc, #36]	; (8009318 <tcpip_inpkt+0x78>)
 80092f4:	f009 feb2 	bl	801305c <sys_mbox_trypost>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d006      	beq.n	800930c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	2009      	movs	r0, #9
 8009302:	f000 fe07 	bl	8009f14 <memp_free>
    return ERR_MEM;
 8009306:	f04f 33ff 	mov.w	r3, #4294967295
 800930a:	e000      	b.n	800930e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800930c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	24004fd8 	.word	0x24004fd8
 800931c:	08014370 	.word	0x08014370
 8009320:	080143e8 	.word	0x080143e8
 8009324:	080143c0 	.word	0x080143c0

08009328 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009338:	f003 0318 	and.w	r3, r3, #24
 800933c:	2b00      	cmp	r3, #0
 800933e:	d006      	beq.n	800934e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009340:	4a08      	ldr	r2, [pc, #32]	; (8009364 <tcpip_input+0x3c>)
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ffab 	bl	80092a0 <tcpip_inpkt>
 800934a:	4603      	mov	r3, r0
 800934c:	e005      	b.n	800935a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800934e:	4a06      	ldr	r2, [pc, #24]	; (8009368 <tcpip_input+0x40>)
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff ffa4 	bl	80092a0 <tcpip_inpkt>
 8009358:	4603      	mov	r3, r0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	08012e7d 	.word	0x08012e7d
 8009368:	08011d91 	.word	0x08011d91

0800936c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009376:	4819      	ldr	r0, [pc, #100]	; (80093dc <tcpip_try_callback+0x70>)
 8009378:	f009 febb 	bl	80130f2 <sys_mbox_valid>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <tcpip_try_callback+0x24>
 8009382:	4b17      	ldr	r3, [pc, #92]	; (80093e0 <tcpip_try_callback+0x74>)
 8009384:	f240 125d 	movw	r2, #349	; 0x15d
 8009388:	4916      	ldr	r1, [pc, #88]	; (80093e4 <tcpip_try_callback+0x78>)
 800938a:	4817      	ldr	r0, [pc, #92]	; (80093e8 <tcpip_try_callback+0x7c>)
 800938c:	f009 ff86 	bl	801329c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009390:	2008      	movs	r0, #8
 8009392:	f000 fd49 	bl	8009e28 <memp_malloc>
 8009396:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d102      	bne.n	80093a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800939e:	f04f 33ff 	mov.w	r3, #4294967295
 80093a2:	e017      	b.n	80093d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	4808      	ldr	r0, [pc, #32]	; (80093dc <tcpip_try_callback+0x70>)
 80093ba:	f009 fe4f 	bl	801305c <sys_mbox_trypost>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d006      	beq.n	80093d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80093c4:	68f9      	ldr	r1, [r7, #12]
 80093c6:	2008      	movs	r0, #8
 80093c8:	f000 fda4 	bl	8009f14 <memp_free>
    return ERR_MEM;
 80093cc:	f04f 33ff 	mov.w	r3, #4294967295
 80093d0:	e000      	b.n	80093d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	24004fd8 	.word	0x24004fd8
 80093e0:	08014370 	.word	0x08014370
 80093e4:	080143e8 	.word	0x080143e8
 80093e8:	080143c0 	.word	0x080143c0

080093ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80093f6:	f000 f871 	bl	80094dc <lwip_init>

  tcpip_init_done = initfunc;
 80093fa:	4a17      	ldr	r2, [pc, #92]	; (8009458 <tcpip_init+0x6c>)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009400:	4a16      	ldr	r2, [pc, #88]	; (800945c <tcpip_init+0x70>)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009406:	2106      	movs	r1, #6
 8009408:	4815      	ldr	r0, [pc, #84]	; (8009460 <tcpip_init+0x74>)
 800940a:	f009 fe0d 	bl	8013028 <sys_mbox_new>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d006      	beq.n	8009422 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009414:	4b13      	ldr	r3, [pc, #76]	; (8009464 <tcpip_init+0x78>)
 8009416:	f240 2261 	movw	r2, #609	; 0x261
 800941a:	4913      	ldr	r1, [pc, #76]	; (8009468 <tcpip_init+0x7c>)
 800941c:	4813      	ldr	r0, [pc, #76]	; (800946c <tcpip_init+0x80>)
 800941e:	f009 ff3d 	bl	801329c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009422:	4813      	ldr	r0, [pc, #76]	; (8009470 <tcpip_init+0x84>)
 8009424:	f009 fe82 	bl	801312c <sys_mutex_new>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <tcpip_init+0x78>)
 8009430:	f240 2265 	movw	r2, #613	; 0x265
 8009434:	490f      	ldr	r1, [pc, #60]	; (8009474 <tcpip_init+0x88>)
 8009436:	480d      	ldr	r0, [pc, #52]	; (800946c <tcpip_init+0x80>)
 8009438:	f009 ff30 	bl	801329c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800943c:	2318      	movs	r3, #24
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009444:	2200      	movs	r2, #0
 8009446:	490c      	ldr	r1, [pc, #48]	; (8009478 <tcpip_init+0x8c>)
 8009448:	480c      	ldr	r0, [pc, #48]	; (800947c <tcpip_init+0x90>)
 800944a:	f009 fea1 	bl	8013190 <sys_thread_new>
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	24004fd0 	.word	0x24004fd0
 800945c:	24004fd4 	.word	0x24004fd4
 8009460:	24004fd8 	.word	0x24004fd8
 8009464:	08014370 	.word	0x08014370
 8009468:	080143f8 	.word	0x080143f8
 800946c:	080143c0 	.word	0x080143c0
 8009470:	24005414 	.word	0x24005414
 8009474:	0801441c 	.word	0x0801441c
 8009478:	080091a9 	.word	0x080091a9
 800947c:	08014440 	.word	0x08014440

08009480 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	b21a      	sxth	r2, r3
 8009490:	88fb      	ldrh	r3, [r7, #6]
 8009492:	0a1b      	lsrs	r3, r3, #8
 8009494:	b29b      	uxth	r3, r3
 8009496:	b21b      	sxth	r3, r3
 8009498:	4313      	orrs	r3, r2
 800949a:	b21b      	sxth	r3, r3
 800949c:	b29b      	uxth	r3, r3
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	061a      	lsls	r2, r3, #24
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094be:	431a      	orrs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	0e1b      	lsrs	r3, r3, #24
 80094ce:	4313      	orrs	r3, r2
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80094e6:	f009 fe15 	bl	8013114 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80094ea:	f000 f8d5 	bl	8009698 <mem_init>
  memp_init();
 80094ee:	f000 fc2d 	bl	8009d4c <memp_init>
  pbuf_init();
  netif_init();
 80094f2:	f000 fd39 	bl	8009f68 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80094f6:	f007 f91d 	bl	8010734 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80094fa:	f001 fe49 	bl	800b190 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80094fe:	f007 f85f 	bl	80105c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <ptr_to_mem+0x20>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	4413      	add	r3, r2
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	24004fdc 	.word	0x24004fdc

08009530 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <mem_to_ptr+0x20>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	b29b      	uxth	r3, r3
}
 8009542:	4618      	mov	r0, r3
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	24004fdc 	.word	0x24004fdc

08009554 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009554:	b590      	push	{r4, r7, lr}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800955c:	4b45      	ldr	r3, [pc, #276]	; (8009674 <plug_holes+0x120>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d206      	bcs.n	8009574 <plug_holes+0x20>
 8009566:	4b44      	ldr	r3, [pc, #272]	; (8009678 <plug_holes+0x124>)
 8009568:	f240 12df 	movw	r2, #479	; 0x1df
 800956c:	4943      	ldr	r1, [pc, #268]	; (800967c <plug_holes+0x128>)
 800956e:	4844      	ldr	r0, [pc, #272]	; (8009680 <plug_holes+0x12c>)
 8009570:	f009 fe94 	bl	801329c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009574:	4b43      	ldr	r3, [pc, #268]	; (8009684 <plug_holes+0x130>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	429a      	cmp	r2, r3
 800957c:	d306      	bcc.n	800958c <plug_holes+0x38>
 800957e:	4b3e      	ldr	r3, [pc, #248]	; (8009678 <plug_holes+0x124>)
 8009580:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009584:	4940      	ldr	r1, [pc, #256]	; (8009688 <plug_holes+0x134>)
 8009586:	483e      	ldr	r0, [pc, #248]	; (8009680 <plug_holes+0x12c>)
 8009588:	f009 fe88 	bl	801329c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <plug_holes+0x4e>
 8009594:	4b38      	ldr	r3, [pc, #224]	; (8009678 <plug_holes+0x124>)
 8009596:	f240 12e1 	movw	r2, #481	; 0x1e1
 800959a:	493c      	ldr	r1, [pc, #240]	; (800968c <plug_holes+0x138>)
 800959c:	4838      	ldr	r0, [pc, #224]	; (8009680 <plug_holes+0x12c>)
 800959e:	f009 fe7d 	bl	801329c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095aa:	d906      	bls.n	80095ba <plug_holes+0x66>
 80095ac:	4b32      	ldr	r3, [pc, #200]	; (8009678 <plug_holes+0x124>)
 80095ae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80095b2:	4937      	ldr	r1, [pc, #220]	; (8009690 <plug_holes+0x13c>)
 80095b4:	4832      	ldr	r0, [pc, #200]	; (8009680 <plug_holes+0x12c>)
 80095b6:	f009 fe71 	bl	801329c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff ffa4 	bl	800950c <ptr_to_mem>
 80095c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d024      	beq.n	8009618 <plug_holes+0xc4>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	791b      	ldrb	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d120      	bne.n	8009618 <plug_holes+0xc4>
 80095d6:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <plug_holes+0x130>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d01b      	beq.n	8009618 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80095e0:	4b2c      	ldr	r3, [pc, #176]	; (8009694 <plug_holes+0x140>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d102      	bne.n	80095f0 <plug_holes+0x9c>
      lfree = mem;
 80095ea:	4a2a      	ldr	r2, [pc, #168]	; (8009694 <plug_holes+0x140>)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	881a      	ldrh	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009600:	d00a      	beq.n	8009618 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff ff80 	bl	800950c <ptr_to_mem>
 800960c:	4604      	mov	r4, r0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff ff8e 	bl	8009530 <mem_to_ptr>
 8009614:	4603      	mov	r3, r0
 8009616:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	885b      	ldrh	r3, [r3, #2]
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff ff75 	bl	800950c <ptr_to_mem>
 8009622:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d01f      	beq.n	800966c <plug_holes+0x118>
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	791b      	ldrb	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11b      	bne.n	800966c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <plug_holes+0x140>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d102      	bne.n	8009644 <plug_holes+0xf0>
      lfree = pmem;
 800963e:	4a15      	ldr	r2, [pc, #84]	; (8009694 <plug_holes+0x140>)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	881a      	ldrh	r2, [r3, #0]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009654:	d00a      	beq.n	800966c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff ff56 	bl	800950c <ptr_to_mem>
 8009660:	4604      	mov	r4, r0
 8009662:	68b8      	ldr	r0, [r7, #8]
 8009664:	f7ff ff64 	bl	8009530 <mem_to_ptr>
 8009668:	4603      	mov	r3, r0
 800966a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800966c:	bf00      	nop
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	bd90      	pop	{r4, r7, pc}
 8009674:	24004fdc 	.word	0x24004fdc
 8009678:	08014450 	.word	0x08014450
 800967c:	08014480 	.word	0x08014480
 8009680:	08014498 	.word	0x08014498
 8009684:	24004fe0 	.word	0x24004fe0
 8009688:	080144c0 	.word	0x080144c0
 800968c:	080144dc 	.word	0x080144dc
 8009690:	080144f8 	.word	0x080144f8
 8009694:	24004fe8 	.word	0x24004fe8

08009698 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800969e:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <mem_init+0x7c>)
 80096a0:	4a1d      	ldr	r2, [pc, #116]	; (8009718 <mem_init+0x80>)
 80096a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80096a4:	4b1b      	ldr	r3, [pc, #108]	; (8009714 <mem_init+0x7c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096b0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80096be:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80096c2:	f7ff ff23 	bl	800950c <ptr_to_mem>
 80096c6:	4603      	mov	r3, r0
 80096c8:	4a14      	ldr	r2, [pc, #80]	; (800971c <mem_init+0x84>)
 80096ca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80096cc:	4b13      	ldr	r3, [pc, #76]	; (800971c <mem_init+0x84>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2201      	movs	r2, #1
 80096d2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80096d4:	4b11      	ldr	r3, [pc, #68]	; (800971c <mem_init+0x84>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096dc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <mem_init+0x84>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096e6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <mem_init+0x7c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <mem_init+0x88>)
 80096ee:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80096f0:	480c      	ldr	r0, [pc, #48]	; (8009724 <mem_init+0x8c>)
 80096f2:	f009 fd1b 	bl	801312c <sys_mutex_new>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d006      	beq.n	800970a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <mem_init+0x90>)
 80096fe:	f240 221f 	movw	r2, #543	; 0x21f
 8009702:	490a      	ldr	r1, [pc, #40]	; (800972c <mem_init+0x94>)
 8009704:	480a      	ldr	r0, [pc, #40]	; (8009730 <mem_init+0x98>)
 8009706:	f009 fdc9 	bl	801329c <iprintf>
  }
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	24004fdc 	.word	0x24004fdc
 8009718:	30044000 	.word	0x30044000
 800971c:	24004fe0 	.word	0x24004fe0
 8009720:	24004fe8 	.word	0x24004fe8
 8009724:	24004fe4 	.word	0x24004fe4
 8009728:	08014450 	.word	0x08014450
 800972c:	08014524 	.word	0x08014524
 8009730:	08014498 	.word	0x08014498

08009734 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff fef7 	bl	8009530 <mem_to_ptr>
 8009742:	4603      	mov	r3, r0
 8009744:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff fede 	bl	800950c <ptr_to_mem>
 8009750:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	885b      	ldrh	r3, [r3, #2]
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fed8 	bl	800950c <ptr_to_mem>
 800975c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009766:	d818      	bhi.n	800979a <mem_link_valid+0x66>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	885b      	ldrh	r3, [r3, #2]
 800976c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009770:	d813      	bhi.n	800979a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009776:	8afa      	ldrh	r2, [r7, #22]
 8009778:	429a      	cmp	r2, r3
 800977a:	d004      	beq.n	8009786 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	8afa      	ldrh	r2, [r7, #22]
 8009782:	429a      	cmp	r2, r3
 8009784:	d109      	bne.n	800979a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009786:	4b08      	ldr	r3, [pc, #32]	; (80097a8 <mem_link_valid+0x74>)
 8009788:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	429a      	cmp	r2, r3
 800978e:	d006      	beq.n	800979e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	885b      	ldrh	r3, [r3, #2]
 8009794:	8afa      	ldrh	r2, [r7, #22]
 8009796:	429a      	cmp	r2, r3
 8009798:	d001      	beq.n	800979e <mem_link_valid+0x6a>
    return 0;
 800979a:	2300      	movs	r3, #0
 800979c:	e000      	b.n	80097a0 <mem_link_valid+0x6c>
  }
  return 1;
 800979e:	2301      	movs	r3, #1
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	24004fe0 	.word	0x24004fe0

080097ac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d070      	beq.n	800989c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f003 0303 	and.w	r3, r3, #3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00d      	beq.n	80097e0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80097c4:	4b37      	ldr	r3, [pc, #220]	; (80098a4 <mem_free+0xf8>)
 80097c6:	f240 2273 	movw	r2, #627	; 0x273
 80097ca:	4937      	ldr	r1, [pc, #220]	; (80098a8 <mem_free+0xfc>)
 80097cc:	4837      	ldr	r0, [pc, #220]	; (80098ac <mem_free+0x100>)
 80097ce:	f009 fd65 	bl	801329c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80097d2:	f009 fcfd 	bl	80131d0 <sys_arch_protect>
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f009 fd07 	bl	80131ec <sys_arch_unprotect>
    return;
 80097de:	e05e      	b.n	800989e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3b08      	subs	r3, #8
 80097e4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80097e6:	4b32      	ldr	r3, [pc, #200]	; (80098b0 <mem_free+0x104>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d306      	bcc.n	80097fe <mem_free+0x52>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f103 020c 	add.w	r2, r3, #12
 80097f6:	4b2f      	ldr	r3, [pc, #188]	; (80098b4 <mem_free+0x108>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d90d      	bls.n	800981a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80097fe:	4b29      	ldr	r3, [pc, #164]	; (80098a4 <mem_free+0xf8>)
 8009800:	f240 227f 	movw	r2, #639	; 0x27f
 8009804:	492c      	ldr	r1, [pc, #176]	; (80098b8 <mem_free+0x10c>)
 8009806:	4829      	ldr	r0, [pc, #164]	; (80098ac <mem_free+0x100>)
 8009808:	f009 fd48 	bl	801329c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800980c:	f009 fce0 	bl	80131d0 <sys_arch_protect>
 8009810:	6138      	str	r0, [r7, #16]
 8009812:	6938      	ldr	r0, [r7, #16]
 8009814:	f009 fcea 	bl	80131ec <sys_arch_unprotect>
    return;
 8009818:	e041      	b.n	800989e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800981a:	4828      	ldr	r0, [pc, #160]	; (80098bc <mem_free+0x110>)
 800981c:	f009 fc9c 	bl	8013158 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	791b      	ldrb	r3, [r3, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d110      	bne.n	800984a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <mem_free+0xf8>)
 800982a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800982e:	4924      	ldr	r1, [pc, #144]	; (80098c0 <mem_free+0x114>)
 8009830:	481e      	ldr	r0, [pc, #120]	; (80098ac <mem_free+0x100>)
 8009832:	f009 fd33 	bl	801329c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009836:	4821      	ldr	r0, [pc, #132]	; (80098bc <mem_free+0x110>)
 8009838:	f009 fc9d 	bl	8013176 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800983c:	f009 fcc8 	bl	80131d0 <sys_arch_protect>
 8009840:	6178      	str	r0, [r7, #20]
 8009842:	6978      	ldr	r0, [r7, #20]
 8009844:	f009 fcd2 	bl	80131ec <sys_arch_unprotect>
    return;
 8009848:	e029      	b.n	800989e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800984a:	69f8      	ldr	r0, [r7, #28]
 800984c:	f7ff ff72 	bl	8009734 <mem_link_valid>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d110      	bne.n	8009878 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009856:	4b13      	ldr	r3, [pc, #76]	; (80098a4 <mem_free+0xf8>)
 8009858:	f240 2295 	movw	r2, #661	; 0x295
 800985c:	4919      	ldr	r1, [pc, #100]	; (80098c4 <mem_free+0x118>)
 800985e:	4813      	ldr	r0, [pc, #76]	; (80098ac <mem_free+0x100>)
 8009860:	f009 fd1c 	bl	801329c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009864:	4815      	ldr	r0, [pc, #84]	; (80098bc <mem_free+0x110>)
 8009866:	f009 fc86 	bl	8013176 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800986a:	f009 fcb1 	bl	80131d0 <sys_arch_protect>
 800986e:	61b8      	str	r0, [r7, #24]
 8009870:	69b8      	ldr	r0, [r7, #24]
 8009872:	f009 fcbb 	bl	80131ec <sys_arch_unprotect>
    return;
 8009876:	e012      	b.n	800989e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	2200      	movs	r2, #0
 800987c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800987e:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <mem_free+0x11c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69fa      	ldr	r2, [r7, #28]
 8009884:	429a      	cmp	r2, r3
 8009886:	d202      	bcs.n	800988e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009888:	4a0f      	ldr	r2, [pc, #60]	; (80098c8 <mem_free+0x11c>)
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800988e:	69f8      	ldr	r0, [r7, #28]
 8009890:	f7ff fe60 	bl	8009554 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009894:	4809      	ldr	r0, [pc, #36]	; (80098bc <mem_free+0x110>)
 8009896:	f009 fc6e 	bl	8013176 <sys_mutex_unlock>
 800989a:	e000      	b.n	800989e <mem_free+0xf2>
    return;
 800989c:	bf00      	nop
}
 800989e:	3720      	adds	r7, #32
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	08014450 	.word	0x08014450
 80098a8:	08014540 	.word	0x08014540
 80098ac:	08014498 	.word	0x08014498
 80098b0:	24004fdc 	.word	0x24004fdc
 80098b4:	24004fe0 	.word	0x24004fe0
 80098b8:	08014564 	.word	0x08014564
 80098bc:	24004fe4 	.word	0x24004fe4
 80098c0:	08014580 	.word	0x08014580
 80098c4:	080145a8 	.word	0x080145a8
 80098c8:	24004fe8 	.word	0x24004fe8

080098cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80098d8:	887b      	ldrh	r3, [r7, #2]
 80098da:	3303      	adds	r3, #3
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80098e4:	8bfb      	ldrh	r3, [r7, #30]
 80098e6:	2b0b      	cmp	r3, #11
 80098e8:	d801      	bhi.n	80098ee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80098ea:	230c      	movs	r3, #12
 80098ec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80098ee:	8bfb      	ldrh	r3, [r7, #30]
 80098f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098f4:	d803      	bhi.n	80098fe <mem_trim+0x32>
 80098f6:	8bfa      	ldrh	r2, [r7, #30]
 80098f8:	887b      	ldrh	r3, [r7, #2]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d201      	bcs.n	8009902 <mem_trim+0x36>
    return NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	e0d8      	b.n	8009ab4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009902:	4b6e      	ldr	r3, [pc, #440]	; (8009abc <mem_trim+0x1f0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d304      	bcc.n	8009916 <mem_trim+0x4a>
 800990c:	4b6c      	ldr	r3, [pc, #432]	; (8009ac0 <mem_trim+0x1f4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d306      	bcc.n	8009924 <mem_trim+0x58>
 8009916:	4b6b      	ldr	r3, [pc, #428]	; (8009ac4 <mem_trim+0x1f8>)
 8009918:	f240 22d1 	movw	r2, #721	; 0x2d1
 800991c:	496a      	ldr	r1, [pc, #424]	; (8009ac8 <mem_trim+0x1fc>)
 800991e:	486b      	ldr	r0, [pc, #428]	; (8009acc <mem_trim+0x200>)
 8009920:	f009 fcbc 	bl	801329c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009924:	4b65      	ldr	r3, [pc, #404]	; (8009abc <mem_trim+0x1f0>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	429a      	cmp	r2, r3
 800992c:	d304      	bcc.n	8009938 <mem_trim+0x6c>
 800992e:	4b64      	ldr	r3, [pc, #400]	; (8009ac0 <mem_trim+0x1f4>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	429a      	cmp	r2, r3
 8009936:	d307      	bcc.n	8009948 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009938:	f009 fc4a 	bl	80131d0 <sys_arch_protect>
 800993c:	60b8      	str	r0, [r7, #8]
 800993e:	68b8      	ldr	r0, [r7, #8]
 8009940:	f009 fc54 	bl	80131ec <sys_arch_unprotect>
    return rmem;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	e0b5      	b.n	8009ab4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3b08      	subs	r3, #8
 800994c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800994e:	69b8      	ldr	r0, [r7, #24]
 8009950:	f7ff fdee 	bl	8009530 <mem_to_ptr>
 8009954:	4603      	mov	r3, r0
 8009956:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	881a      	ldrh	r2, [r3, #0]
 800995c:	8afb      	ldrh	r3, [r7, #22]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b08      	subs	r3, #8
 8009964:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009966:	8bfa      	ldrh	r2, [r7, #30]
 8009968:	8abb      	ldrh	r3, [r7, #20]
 800996a:	429a      	cmp	r2, r3
 800996c:	d906      	bls.n	800997c <mem_trim+0xb0>
 800996e:	4b55      	ldr	r3, [pc, #340]	; (8009ac4 <mem_trim+0x1f8>)
 8009970:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009974:	4956      	ldr	r1, [pc, #344]	; (8009ad0 <mem_trim+0x204>)
 8009976:	4855      	ldr	r0, [pc, #340]	; (8009acc <mem_trim+0x200>)
 8009978:	f009 fc90 	bl	801329c <iprintf>
  if (newsize > size) {
 800997c:	8bfa      	ldrh	r2, [r7, #30]
 800997e:	8abb      	ldrh	r3, [r7, #20]
 8009980:	429a      	cmp	r2, r3
 8009982:	d901      	bls.n	8009988 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009984:	2300      	movs	r3, #0
 8009986:	e095      	b.n	8009ab4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009988:	8bfa      	ldrh	r2, [r7, #30]
 800998a:	8abb      	ldrh	r3, [r7, #20]
 800998c:	429a      	cmp	r2, r3
 800998e:	d101      	bne.n	8009994 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	e08f      	b.n	8009ab4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009994:	484f      	ldr	r0, [pc, #316]	; (8009ad4 <mem_trim+0x208>)
 8009996:	f009 fbdf 	bl	8013158 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff fdb4 	bl	800950c <ptr_to_mem>
 80099a4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	791b      	ldrb	r3, [r3, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d13f      	bne.n	8009a2e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099b6:	d106      	bne.n	80099c6 <mem_trim+0xfa>
 80099b8:	4b42      	ldr	r3, [pc, #264]	; (8009ac4 <mem_trim+0x1f8>)
 80099ba:	f240 22f5 	movw	r2, #757	; 0x2f5
 80099be:	4946      	ldr	r1, [pc, #280]	; (8009ad8 <mem_trim+0x20c>)
 80099c0:	4842      	ldr	r0, [pc, #264]	; (8009acc <mem_trim+0x200>)
 80099c2:	f009 fc6b 	bl	801329c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80099cc:	8afa      	ldrh	r2, [r7, #22]
 80099ce:	8bfb      	ldrh	r3, [r7, #30]
 80099d0:	4413      	add	r3, r2
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3308      	adds	r3, #8
 80099d6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80099d8:	4b40      	ldr	r3, [pc, #256]	; (8009adc <mem_trim+0x210>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d106      	bne.n	80099f0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80099e2:	89fb      	ldrh	r3, [r7, #14]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff fd91 	bl	800950c <ptr_to_mem>
 80099ea:	4603      	mov	r3, r0
 80099ec:	4a3b      	ldr	r2, [pc, #236]	; (8009adc <mem_trim+0x210>)
 80099ee:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80099f0:	89fb      	ldrh	r3, [r7, #14]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff fd8a 	bl	800950c <ptr_to_mem>
 80099f8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2200      	movs	r2, #0
 80099fe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	89ba      	ldrh	r2, [r7, #12]
 8009a04:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	8afa      	ldrh	r2, [r7, #22]
 8009a0a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	89fa      	ldrh	r2, [r7, #14]
 8009a10:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a1a:	d047      	beq.n	8009aac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff fd73 	bl	800950c <ptr_to_mem>
 8009a26:	4602      	mov	r2, r0
 8009a28:	89fb      	ldrh	r3, [r7, #14]
 8009a2a:	8053      	strh	r3, [r2, #2]
 8009a2c:	e03e      	b.n	8009aac <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009a2e:	8bfb      	ldrh	r3, [r7, #30]
 8009a30:	f103 0214 	add.w	r2, r3, #20
 8009a34:	8abb      	ldrh	r3, [r7, #20]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d838      	bhi.n	8009aac <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009a3a:	8afa      	ldrh	r2, [r7, #22]
 8009a3c:	8bfb      	ldrh	r3, [r7, #30]
 8009a3e:	4413      	add	r3, r2
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3308      	adds	r3, #8
 8009a44:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a4e:	d106      	bne.n	8009a5e <mem_trim+0x192>
 8009a50:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <mem_trim+0x1f8>)
 8009a52:	f240 3216 	movw	r2, #790	; 0x316
 8009a56:	4920      	ldr	r1, [pc, #128]	; (8009ad8 <mem_trim+0x20c>)
 8009a58:	481c      	ldr	r0, [pc, #112]	; (8009acc <mem_trim+0x200>)
 8009a5a:	f009 fc1f 	bl	801329c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009a5e:	89fb      	ldrh	r3, [r7, #14]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fd53 	bl	800950c <ptr_to_mem>
 8009a66:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009a68:	4b1c      	ldr	r3, [pc, #112]	; (8009adc <mem_trim+0x210>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d202      	bcs.n	8009a78 <mem_trim+0x1ac>
      lfree = mem2;
 8009a72:	4a1a      	ldr	r2, [pc, #104]	; (8009adc <mem_trim+0x210>)
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	881a      	ldrh	r2, [r3, #0]
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	8afa      	ldrh	r2, [r7, #22]
 8009a8a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	89fa      	ldrh	r2, [r7, #14]
 8009a90:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a9a:	d007      	beq.n	8009aac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff fd33 	bl	800950c <ptr_to_mem>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	89fb      	ldrh	r3, [r7, #14]
 8009aaa:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009aac:	4809      	ldr	r0, [pc, #36]	; (8009ad4 <mem_trim+0x208>)
 8009aae:	f009 fb62 	bl	8013176 <sys_mutex_unlock>
  return rmem;
 8009ab2:	687b      	ldr	r3, [r7, #4]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3720      	adds	r7, #32
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	24004fdc 	.word	0x24004fdc
 8009ac0:	24004fe0 	.word	0x24004fe0
 8009ac4:	08014450 	.word	0x08014450
 8009ac8:	080145dc 	.word	0x080145dc
 8009acc:	08014498 	.word	0x08014498
 8009ad0:	080145f4 	.word	0x080145f4
 8009ad4:	24004fe4 	.word	0x24004fe4
 8009ad8:	08014614 	.word	0x08014614
 8009adc:	24004fe8 	.word	0x24004fe8

08009ae0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009aea:	88fb      	ldrh	r3, [r7, #6]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <mem_malloc+0x14>
    return NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	e0e2      	b.n	8009cba <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009af4:	88fb      	ldrh	r3, [r7, #6]
 8009af6:	3303      	adds	r3, #3
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009b00:	8bbb      	ldrh	r3, [r7, #28]
 8009b02:	2b0b      	cmp	r3, #11
 8009b04:	d801      	bhi.n	8009b0a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009b06:	230c      	movs	r3, #12
 8009b08:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009b0a:	8bbb      	ldrh	r3, [r7, #28]
 8009b0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b10:	d803      	bhi.n	8009b1a <mem_malloc+0x3a>
 8009b12:	8bba      	ldrh	r2, [r7, #28]
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d201      	bcs.n	8009b1e <mem_malloc+0x3e>
    return NULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e0cd      	b.n	8009cba <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009b1e:	4869      	ldr	r0, [pc, #420]	; (8009cc4 <mem_malloc+0x1e4>)
 8009b20:	f009 fb1a 	bl	8013158 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009b24:	4b68      	ldr	r3, [pc, #416]	; (8009cc8 <mem_malloc+0x1e8>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fd01 	bl	8009530 <mem_to_ptr>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	83fb      	strh	r3, [r7, #30]
 8009b32:	e0b7      	b.n	8009ca4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009b34:	8bfb      	ldrh	r3, [r7, #30]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fce8 	bl	800950c <ptr_to_mem>
 8009b3c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	791b      	ldrb	r3, [r3, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 80a7 	bne.w	8009c96 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	8bfb      	ldrh	r3, [r7, #30]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	f1a3 0208 	sub.w	r2, r3, #8
 8009b56:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	f0c0 809c 	bcc.w	8009c96 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	8bfb      	ldrh	r3, [r7, #30]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	f1a3 0208 	sub.w	r2, r3, #8
 8009b6c:	8bbb      	ldrh	r3, [r7, #28]
 8009b6e:	3314      	adds	r3, #20
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d333      	bcc.n	8009bdc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009b74:	8bfa      	ldrh	r2, [r7, #30]
 8009b76:	8bbb      	ldrh	r3, [r7, #28]
 8009b78:	4413      	add	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009b80:	8a7b      	ldrh	r3, [r7, #18]
 8009b82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b86:	d106      	bne.n	8009b96 <mem_malloc+0xb6>
 8009b88:	4b50      	ldr	r3, [pc, #320]	; (8009ccc <mem_malloc+0x1ec>)
 8009b8a:	f240 3287 	movw	r2, #903	; 0x387
 8009b8e:	4950      	ldr	r1, [pc, #320]	; (8009cd0 <mem_malloc+0x1f0>)
 8009b90:	4850      	ldr	r0, [pc, #320]	; (8009cd4 <mem_malloc+0x1f4>)
 8009b92:	f009 fb83 	bl	801329c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009b96:	8a7b      	ldrh	r3, [r7, #18]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff fcb7 	bl	800950c <ptr_to_mem>
 8009b9e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	881a      	ldrh	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8bfa      	ldrh	r2, [r7, #30]
 8009bb2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	8a7a      	ldrh	r2, [r7, #18]
 8009bb8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009bc8:	d00b      	beq.n	8009be2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff fc9c 	bl	800950c <ptr_to_mem>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	8a7b      	ldrh	r3, [r7, #18]
 8009bd8:	8053      	strh	r3, [r2, #2]
 8009bda:	e002      	b.n	8009be2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2201      	movs	r2, #1
 8009be0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009be2:	4b39      	ldr	r3, [pc, #228]	; (8009cc8 <mem_malloc+0x1e8>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d127      	bne.n	8009c3c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009bec:	4b36      	ldr	r3, [pc, #216]	; (8009cc8 <mem_malloc+0x1e8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009bf2:	e005      	b.n	8009c00 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fc87 	bl	800950c <ptr_to_mem>
 8009bfe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	791b      	ldrb	r3, [r3, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d004      	beq.n	8009c12 <mem_malloc+0x132>
 8009c08:	4b33      	ldr	r3, [pc, #204]	; (8009cd8 <mem_malloc+0x1f8>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d1f0      	bne.n	8009bf4 <mem_malloc+0x114>
          }
          lfree = cur;
 8009c12:	4a2d      	ldr	r2, [pc, #180]	; (8009cc8 <mem_malloc+0x1e8>)
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009c18:	4b2b      	ldr	r3, [pc, #172]	; (8009cc8 <mem_malloc+0x1e8>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	4b2e      	ldr	r3, [pc, #184]	; (8009cd8 <mem_malloc+0x1f8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d00b      	beq.n	8009c3c <mem_malloc+0x15c>
 8009c24:	4b28      	ldr	r3, [pc, #160]	; (8009cc8 <mem_malloc+0x1e8>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	791b      	ldrb	r3, [r3, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d006      	beq.n	8009c3c <mem_malloc+0x15c>
 8009c2e:	4b27      	ldr	r3, [pc, #156]	; (8009ccc <mem_malloc+0x1ec>)
 8009c30:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009c34:	4929      	ldr	r1, [pc, #164]	; (8009cdc <mem_malloc+0x1fc>)
 8009c36:	4827      	ldr	r0, [pc, #156]	; (8009cd4 <mem_malloc+0x1f4>)
 8009c38:	f009 fb30 	bl	801329c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009c3c:	4821      	ldr	r0, [pc, #132]	; (8009cc4 <mem_malloc+0x1e4>)
 8009c3e:	f009 fa9a 	bl	8013176 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c42:	8bba      	ldrh	r2, [r7, #28]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	4413      	add	r3, r2
 8009c48:	3308      	adds	r3, #8
 8009c4a:	4a23      	ldr	r2, [pc, #140]	; (8009cd8 <mem_malloc+0x1f8>)
 8009c4c:	6812      	ldr	r2, [r2, #0]
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d906      	bls.n	8009c60 <mem_malloc+0x180>
 8009c52:	4b1e      	ldr	r3, [pc, #120]	; (8009ccc <mem_malloc+0x1ec>)
 8009c54:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009c58:	4921      	ldr	r1, [pc, #132]	; (8009ce0 <mem_malloc+0x200>)
 8009c5a:	481e      	ldr	r0, [pc, #120]	; (8009cd4 <mem_malloc+0x1f4>)
 8009c5c:	f009 fb1e 	bl	801329c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d006      	beq.n	8009c78 <mem_malloc+0x198>
 8009c6a:	4b18      	ldr	r3, [pc, #96]	; (8009ccc <mem_malloc+0x1ec>)
 8009c6c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009c70:	491c      	ldr	r1, [pc, #112]	; (8009ce4 <mem_malloc+0x204>)
 8009c72:	4818      	ldr	r0, [pc, #96]	; (8009cd4 <mem_malloc+0x1f4>)
 8009c74:	f009 fb12 	bl	801329c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f003 0303 	and.w	r3, r3, #3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d006      	beq.n	8009c90 <mem_malloc+0x1b0>
 8009c82:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <mem_malloc+0x1ec>)
 8009c84:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009c88:	4917      	ldr	r1, [pc, #92]	; (8009ce8 <mem_malloc+0x208>)
 8009c8a:	4812      	ldr	r0, [pc, #72]	; (8009cd4 <mem_malloc+0x1f4>)
 8009c8c:	f009 fb06 	bl	801329c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	3308      	adds	r3, #8
 8009c94:	e011      	b.n	8009cba <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009c96:	8bfb      	ldrh	r3, [r7, #30]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff fc37 	bl	800950c <ptr_to_mem>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009ca4:	8bfa      	ldrh	r2, [r7, #30]
 8009ca6:	8bbb      	ldrh	r3, [r7, #28]
 8009ca8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009cac:	429a      	cmp	r2, r3
 8009cae:	f4ff af41 	bcc.w	8009b34 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009cb2:	4804      	ldr	r0, [pc, #16]	; (8009cc4 <mem_malloc+0x1e4>)
 8009cb4:	f009 fa5f 	bl	8013176 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	24004fe4 	.word	0x24004fe4
 8009cc8:	24004fe8 	.word	0x24004fe8
 8009ccc:	08014450 	.word	0x08014450
 8009cd0:	08014614 	.word	0x08014614
 8009cd4:	08014498 	.word	0x08014498
 8009cd8:	24004fe0 	.word	0x24004fe0
 8009cdc:	08014628 	.word	0x08014628
 8009ce0:	08014644 	.word	0x08014644
 8009ce4:	08014674 	.word	0x08014674
 8009ce8:	080146a4 	.word	0x080146a4

08009cec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	3303      	adds	r3, #3
 8009d02:	f023 0303 	bic.w	r3, r3, #3
 8009d06:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e011      	b.n	8009d32 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	4413      	add	r3, r2
 8009d2a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	885b      	ldrh	r3, [r3, #2]
 8009d36:	461a      	mov	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	dbe7      	blt.n	8009d0e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d52:	2300      	movs	r3, #0
 8009d54:	80fb      	strh	r3, [r7, #6]
 8009d56:	e009      	b.n	8009d6c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	4a08      	ldr	r2, [pc, #32]	; (8009d7c <memp_init+0x30>)
 8009d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff ffc3 	bl	8009cec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	80fb      	strh	r3, [r7, #6]
 8009d6c:	88fb      	ldrh	r3, [r7, #6]
 8009d6e:	2b0c      	cmp	r3, #12
 8009d70:	d9f2      	bls.n	8009d58 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009d72:	bf00      	nop
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	08016ed4 	.word	0x08016ed4

08009d80 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009d88:	f009 fa22 	bl	80131d0 <sys_arch_protect>
 8009d8c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d015      	beq.n	8009dc8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	6812      	ldr	r2, [r2, #0]
 8009da4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f003 0303 	and.w	r3, r3, #3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d006      	beq.n	8009dbe <do_memp_malloc_pool+0x3e>
 8009db0:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <do_memp_malloc_pool+0x58>)
 8009db2:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009db6:	4909      	ldr	r1, [pc, #36]	; (8009ddc <do_memp_malloc_pool+0x5c>)
 8009db8:	4809      	ldr	r0, [pc, #36]	; (8009de0 <do_memp_malloc_pool+0x60>)
 8009dba:	f009 fa6f 	bl	801329c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f009 fa14 	bl	80131ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	e003      	b.n	8009dd0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f009 fa0f 	bl	80131ec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	080146c8 	.word	0x080146c8
 8009ddc:	080146f8 	.word	0x080146f8
 8009de0:	0801471c 	.word	0x0801471c

08009de4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d106      	bne.n	8009e00 <memp_malloc_pool+0x1c>
 8009df2:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <memp_malloc_pool+0x38>)
 8009df4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009df8:	4909      	ldr	r1, [pc, #36]	; (8009e20 <memp_malloc_pool+0x3c>)
 8009dfa:	480a      	ldr	r0, [pc, #40]	; (8009e24 <memp_malloc_pool+0x40>)
 8009dfc:	f009 fa4e 	bl	801329c <iprintf>
  if (desc == NULL) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <memp_malloc_pool+0x26>
    return NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e003      	b.n	8009e12 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff ffb8 	bl	8009d80 <do_memp_malloc_pool>
 8009e10:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	080146c8 	.word	0x080146c8
 8009e20:	08014744 	.word	0x08014744
 8009e24:	0801471c 	.word	0x0801471c

08009e28 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	2b0c      	cmp	r3, #12
 8009e36:	d908      	bls.n	8009e4a <memp_malloc+0x22>
 8009e38:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <memp_malloc+0x3c>)
 8009e3a:	f240 1257 	movw	r2, #343	; 0x157
 8009e3e:	490a      	ldr	r1, [pc, #40]	; (8009e68 <memp_malloc+0x40>)
 8009e40:	480a      	ldr	r0, [pc, #40]	; (8009e6c <memp_malloc+0x44>)
 8009e42:	f009 fa2b 	bl	801329c <iprintf>
 8009e46:	2300      	movs	r3, #0
 8009e48:	e008      	b.n	8009e5c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	4a08      	ldr	r2, [pc, #32]	; (8009e70 <memp_malloc+0x48>)
 8009e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff ff94 	bl	8009d80 <do_memp_malloc_pool>
 8009e58:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	080146c8 	.word	0x080146c8
 8009e68:	08014758 	.word	0x08014758
 8009e6c:	0801471c 	.word	0x0801471c
 8009e70:	08016ed4 	.word	0x08016ed4

08009e74 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d006      	beq.n	8009e96 <do_memp_free_pool+0x22>
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <do_memp_free_pool+0x4c>)
 8009e8a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009e8e:	490d      	ldr	r1, [pc, #52]	; (8009ec4 <do_memp_free_pool+0x50>)
 8009e90:	480d      	ldr	r0, [pc, #52]	; (8009ec8 <do_memp_free_pool+0x54>)
 8009e92:	f009 fa03 	bl	801329c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009e9a:	f009 f999 	bl	80131d0 <sys_arch_protect>
 8009e9e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009eb2:	68b8      	ldr	r0, [r7, #8]
 8009eb4:	f009 f99a 	bl	80131ec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009eb8:	bf00      	nop
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	080146c8 	.word	0x080146c8
 8009ec4:	08014778 	.word	0x08014778
 8009ec8:	0801471c 	.word	0x0801471c

08009ecc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <memp_free_pool+0x1e>
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <memp_free_pool+0x3c>)
 8009ede:	f240 1295 	movw	r2, #405	; 0x195
 8009ee2:	490a      	ldr	r1, [pc, #40]	; (8009f0c <memp_free_pool+0x40>)
 8009ee4:	480a      	ldr	r0, [pc, #40]	; (8009f10 <memp_free_pool+0x44>)
 8009ee6:	f009 f9d9 	bl	801329c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d007      	beq.n	8009f00 <memp_free_pool+0x34>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ffbb 	bl	8009e74 <do_memp_free_pool>
 8009efe:	e000      	b.n	8009f02 <memp_free_pool+0x36>
    return;
 8009f00:	bf00      	nop
}
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	080146c8 	.word	0x080146c8
 8009f0c:	08014744 	.word	0x08014744
 8009f10:	0801471c 	.word	0x0801471c

08009f14 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b0c      	cmp	r3, #12
 8009f24:	d907      	bls.n	8009f36 <memp_free+0x22>
 8009f26:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <memp_free+0x44>)
 8009f28:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009f2c:	490b      	ldr	r1, [pc, #44]	; (8009f5c <memp_free+0x48>)
 8009f2e:	480c      	ldr	r0, [pc, #48]	; (8009f60 <memp_free+0x4c>)
 8009f30:	f009 f9b4 	bl	801329c <iprintf>
 8009f34:	e00c      	b.n	8009f50 <memp_free+0x3c>

  if (mem == NULL) {
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d008      	beq.n	8009f4e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	4a09      	ldr	r2, [pc, #36]	; (8009f64 <memp_free+0x50>)
 8009f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff ff94 	bl	8009e74 <do_memp_free_pool>
 8009f4c:	e000      	b.n	8009f50 <memp_free+0x3c>
    return;
 8009f4e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	080146c8 	.word	0x080146c8
 8009f5c:	08014798 	.word	0x08014798
 8009f60:	0801471c 	.word	0x0801471c
 8009f64:	08016ed4 	.word	0x08016ed4

08009f68 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009f6c:	bf00      	nop
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
	...

08009f78 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
 8009f84:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d108      	bne.n	8009f9e <netif_add+0x26>
 8009f8c:	4b57      	ldr	r3, [pc, #348]	; (800a0ec <netif_add+0x174>)
 8009f8e:	f240 1227 	movw	r2, #295	; 0x127
 8009f92:	4957      	ldr	r1, [pc, #348]	; (800a0f0 <netif_add+0x178>)
 8009f94:	4857      	ldr	r0, [pc, #348]	; (800a0f4 <netif_add+0x17c>)
 8009f96:	f009 f981 	bl	801329c <iprintf>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e0a2      	b.n	800a0e4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d108      	bne.n	8009fb6 <netif_add+0x3e>
 8009fa4:	4b51      	ldr	r3, [pc, #324]	; (800a0ec <netif_add+0x174>)
 8009fa6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009faa:	4953      	ldr	r1, [pc, #332]	; (800a0f8 <netif_add+0x180>)
 8009fac:	4851      	ldr	r0, [pc, #324]	; (800a0f4 <netif_add+0x17c>)
 8009fae:	f009 f975 	bl	801329c <iprintf>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e096      	b.n	800a0e4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009fbc:	4b4f      	ldr	r3, [pc, #316]	; (800a0fc <netif_add+0x184>)
 8009fbe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009fc6:	4b4d      	ldr	r3, [pc, #308]	; (800a0fc <netif_add+0x184>)
 8009fc8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009fd0:	4b4a      	ldr	r3, [pc, #296]	; (800a0fc <netif_add+0x184>)
 8009fd2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	4a45      	ldr	r2, [pc, #276]	; (800a100 <netif_add+0x188>)
 8009fea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a3a      	ldr	r2, [r7, #32]
 800a004:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a006:	4b3f      	ldr	r3, [pc, #252]	; (800a104 <netif_add+0x18c>)
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a014:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 f913 	bl	800a248 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	4798      	blx	r3
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <netif_add+0xba>
    return NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	e058      	b.n	800a0e4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a038:	2bff      	cmp	r3, #255	; 0xff
 800a03a:	d103      	bne.n	800a044 <netif_add+0xcc>
        netif->num = 0;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a048:	4b2f      	ldr	r3, [pc, #188]	; (800a108 <netif_add+0x190>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	e02b      	b.n	800a0a8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d106      	bne.n	800a066 <netif_add+0xee>
 800a058:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <netif_add+0x174>)
 800a05a:	f240 128b 	movw	r2, #395	; 0x18b
 800a05e:	492b      	ldr	r1, [pc, #172]	; (800a10c <netif_add+0x194>)
 800a060:	4824      	ldr	r0, [pc, #144]	; (800a0f4 <netif_add+0x17c>)
 800a062:	f009 f91b 	bl	801329c <iprintf>
        num_netifs++;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3301      	adds	r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2bff      	cmp	r3, #255	; 0xff
 800a070:	dd06      	ble.n	800a080 <netif_add+0x108>
 800a072:	4b1e      	ldr	r3, [pc, #120]	; (800a0ec <netif_add+0x174>)
 800a074:	f240 128d 	movw	r2, #397	; 0x18d
 800a078:	4925      	ldr	r1, [pc, #148]	; (800a110 <netif_add+0x198>)
 800a07a:	481e      	ldr	r0, [pc, #120]	; (800a0f4 <netif_add+0x17c>)
 800a07c:	f009 f90e 	bl	801329c <iprintf>
        if (netif2->num == netif->num) {
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d108      	bne.n	800a0a2 <netif_add+0x12a>
          netif->num++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a096:	3301      	adds	r3, #1
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a0a0:	e005      	b.n	800a0ae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1d0      	bne.n	800a050 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1be      	bne.n	800a032 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0ba:	2bfe      	cmp	r3, #254	; 0xfe
 800a0bc:	d103      	bne.n	800a0c6 <netif_add+0x14e>
    netif_num = 0;
 800a0be:	4b11      	ldr	r3, [pc, #68]	; (800a104 <netif_add+0x18c>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	701a      	strb	r2, [r3, #0]
 800a0c4:	e006      	b.n	800a0d4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <netif_add+0x18c>)
 800a0d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <netif_add+0x190>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a0dc:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <netif_add+0x190>)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	080147b4 	.word	0x080147b4
 800a0f0:	08014848 	.word	0x08014848
 800a0f4:	08014804 	.word	0x08014804
 800a0f8:	08014864 	.word	0x08014864
 800a0fc:	08016f48 	.word	0x08016f48
 800a100:	0800a523 	.word	0x0800a523
 800a104:	24005020 	.word	0x24005020
 800a108:	240084c8 	.word	0x240084c8
 800a10c:	08014888 	.word	0x08014888
 800a110:	0801489c 	.word	0x0801489c

0800a114 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f002 fb7d 	bl	800c820 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f006 fc8d 	bl	8010a48 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d106      	bne.n	800a158 <netif_do_set_ipaddr+0x20>
 800a14a:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <netif_do_set_ipaddr+0x88>)
 800a14c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a150:	491c      	ldr	r1, [pc, #112]	; (800a1c4 <netif_do_set_ipaddr+0x8c>)
 800a152:	481d      	ldr	r0, [pc, #116]	; (800a1c8 <netif_do_set_ipaddr+0x90>)
 800a154:	f009 f8a2 	bl	801329c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d106      	bne.n	800a16c <netif_do_set_ipaddr+0x34>
 800a15e:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <netif_do_set_ipaddr+0x88>)
 800a160:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a164:	4917      	ldr	r1, [pc, #92]	; (800a1c4 <netif_do_set_ipaddr+0x8c>)
 800a166:	4818      	ldr	r0, [pc, #96]	; (800a1c8 <netif_do_set_ipaddr+0x90>)
 800a168:	f009 f898 	bl	801329c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3304      	adds	r3, #4
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d01c      	beq.n	800a1b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	3304      	adds	r3, #4
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a18a:	f107 0314 	add.w	r3, r7, #20
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ffbf 	bl	800a114 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <netif_do_set_ipaddr+0x6a>
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	e000      	b.n	800a1a4 <netif_do_set_ipaddr+0x6c>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 f8d2 	bl	800a354 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	080147b4 	.word	0x080147b4
 800a1c4:	080148cc 	.word	0x080148cc
 800a1c8:	08014804 	.word	0x08014804

0800a1cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3308      	adds	r3, #8
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d00a      	beq.n	800a1fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d002      	beq.n	800a1f2 <netif_do_set_netmask+0x26>
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	e000      	b.n	800a1f4 <netif_do_set_netmask+0x28>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	330c      	adds	r3, #12
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d00a      	beq.n	800a23a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <netif_do_set_gw+0x26>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	e000      	b.n	800a232 <netif_do_set_gw+0x28>
 800a230:	2300      	movs	r3, #0
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a236:	2301      	movs	r3, #1
 800a238:	e000      	b.n	800a23c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a264:	4b1c      	ldr	r3, [pc, #112]	; (800a2d8 <netif_set_addr+0x90>)
 800a266:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a26e:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <netif_set_addr+0x90>)
 800a270:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a278:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <netif_set_addr+0x90>)
 800a27a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <netif_set_addr+0x42>
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <netif_set_addr+0x46>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <netif_set_addr+0x48>
 800a28e:	2300      	movs	r3, #0
 800a290:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d006      	beq.n	800a2a6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a298:	f107 0310 	add.w	r3, r7, #16
 800a29c:	461a      	mov	r2, r3
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f7ff ff49 	bl	800a138 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	6879      	ldr	r1, [r7, #4]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff ff8e 	bl	800a1cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff ffa8 	bl	800a20a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d106      	bne.n	800a2ce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a2c0:	f107 0310 	add.w	r3, r7, #16
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff ff35 	bl	800a138 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a2ce:	bf00      	nop
 800a2d0:	3720      	adds	r7, #32
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	08016f48 	.word	0x08016f48

0800a2dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a2e4:	4a04      	ldr	r2, [pc, #16]	; (800a2f8 <netif_set_default+0x1c>)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	240084cc 	.word	0x240084cc

0800a2fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d107      	bne.n	800a31a <netif_set_up+0x1e>
 800a30a:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <netif_set_up+0x4c>)
 800a30c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a310:	490e      	ldr	r1, [pc, #56]	; (800a34c <netif_set_up+0x50>)
 800a312:	480f      	ldr	r0, [pc, #60]	; (800a350 <netif_set_up+0x54>)
 800a314:	f008 ffc2 	bl	801329c <iprintf>
 800a318:	e013      	b.n	800a342 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10c      	bne.n	800a342 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a32e:	f043 0301 	orr.w	r3, r3, #1
 800a332:	b2da      	uxtb	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a33a:	2103      	movs	r1, #3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f809 	bl	800a354 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	080147b4 	.word	0x080147b4
 800a34c:	0801493c 	.word	0x0801493c
 800a350:	08014804 	.word	0x08014804

0800a354 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <netif_issue_reports+0x20>
 800a366:	4b18      	ldr	r3, [pc, #96]	; (800a3c8 <netif_issue_reports+0x74>)
 800a368:	f240 326d 	movw	r2, #877	; 0x36d
 800a36c:	4917      	ldr	r1, [pc, #92]	; (800a3cc <netif_issue_reports+0x78>)
 800a36e:	4818      	ldr	r0, [pc, #96]	; (800a3d0 <netif_issue_reports+0x7c>)
 800a370:	f008 ff94 	bl	801329c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a37a:	f003 0304 	and.w	r3, r3, #4
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d01e      	beq.n	800a3c0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a388:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d017      	beq.n	800a3c0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d013      	beq.n	800a3c2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3304      	adds	r3, #4
 800a39e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00e      	beq.n	800a3c2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3aa:	f003 0308 	and.w	r3, r3, #8
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d007      	beq.n	800a3c2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f007 faaf 	bl	801191c <etharp_request>
 800a3be:	e000      	b.n	800a3c2 <netif_issue_reports+0x6e>
    return;
 800a3c0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	080147b4 	.word	0x080147b4
 800a3cc:	08014958 	.word	0x08014958
 800a3d0:	08014804 	.word	0x08014804

0800a3d4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d107      	bne.n	800a3f2 <netif_set_down+0x1e>
 800a3e2:	4b12      	ldr	r3, [pc, #72]	; (800a42c <netif_set_down+0x58>)
 800a3e4:	f240 329b 	movw	r2, #923	; 0x39b
 800a3e8:	4911      	ldr	r1, [pc, #68]	; (800a430 <netif_set_down+0x5c>)
 800a3ea:	4812      	ldr	r0, [pc, #72]	; (800a434 <netif_set_down+0x60>)
 800a3ec:	f008 ff56 	bl	801329c <iprintf>
 800a3f0:	e019      	b.n	800a426 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d012      	beq.n	800a426 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a406:	f023 0301 	bic.w	r3, r3, #1
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f006 fe39 	bl	8011098 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	080147b4 	.word	0x080147b4
 800a430:	0801497c 	.word	0x0801497c
 800a434:	08014804 	.word	0x08014804

0800a438 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d107      	bne.n	800a456 <netif_set_link_up+0x1e>
 800a446:	4b13      	ldr	r3, [pc, #76]	; (800a494 <netif_set_link_up+0x5c>)
 800a448:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a44c:	4912      	ldr	r1, [pc, #72]	; (800a498 <netif_set_link_up+0x60>)
 800a44e:	4813      	ldr	r0, [pc, #76]	; (800a49c <netif_set_link_up+0x64>)
 800a450:	f008 ff24 	bl	801329c <iprintf>
 800a454:	e01b      	b.n	800a48e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d114      	bne.n	800a48e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a46a:	f043 0304 	orr.w	r3, r3, #4
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a476:	2103      	movs	r1, #3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff ff6b 	bl	800a354 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <netif_set_link_up+0x56>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	080147b4 	.word	0x080147b4
 800a498:	0801499c 	.word	0x0801499c
 800a49c:	08014804 	.word	0x08014804

0800a4a0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d107      	bne.n	800a4be <netif_set_link_down+0x1e>
 800a4ae:	4b11      	ldr	r3, [pc, #68]	; (800a4f4 <netif_set_link_down+0x54>)
 800a4b0:	f240 4206 	movw	r2, #1030	; 0x406
 800a4b4:	4910      	ldr	r1, [pc, #64]	; (800a4f8 <netif_set_link_down+0x58>)
 800a4b6:	4811      	ldr	r0, [pc, #68]	; (800a4fc <netif_set_link_down+0x5c>)
 800a4b8:	f008 fef0 	bl	801329c <iprintf>
 800a4bc:	e017      	b.n	800a4ee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d010      	beq.n	800a4ee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4d2:	f023 0304 	bic.w	r3, r3, #4
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <netif_set_link_down+0x4e>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	080147b4 	.word	0x080147b4
 800a4f8:	080149c0 	.word	0x080149c0
 800a4fc:	08014804 	.word	0x08014804

0800a500 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	61da      	str	r2, [r3, #28]
  }
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a522:	b480      	push	{r7}
 800a524:	b085      	sub	sp, #20
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a52e:	f06f 030b 	mvn.w	r3, #11
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d013      	beq.n	800a578 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a550:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <netif_get_by_index+0x48>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e00c      	b.n	800a572 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a55e:	3301      	adds	r3, #1
 800a560:	b2db      	uxtb	r3, r3
 800a562:	79fa      	ldrb	r2, [r7, #7]
 800a564:	429a      	cmp	r2, r3
 800a566:	d101      	bne.n	800a56c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	e006      	b.n	800a57a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1ef      	bne.n	800a558 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	240084c8 	.word	0x240084c8

0800a58c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a592:	f008 fe1d 	bl	80131d0 <sys_arch_protect>
 800a596:	6038      	str	r0, [r7, #0]
 800a598:	4b0d      	ldr	r3, [pc, #52]	; (800a5d0 <pbuf_free_ooseq+0x44>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	701a      	strb	r2, [r3, #0]
 800a59e:	6838      	ldr	r0, [r7, #0]
 800a5a0:	f008 fe24 	bl	80131ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a5a4:	4b0b      	ldr	r3, [pc, #44]	; (800a5d4 <pbuf_free_ooseq+0x48>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	607b      	str	r3, [r7, #4]
 800a5aa:	e00a      	b.n	800a5c2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f002 f971 	bl	800c89c <tcp_free_ooseq>
      return;
 800a5ba:	e005      	b.n	800a5c8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	607b      	str	r3, [r7, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1f1      	bne.n	800a5ac <pbuf_free_ooseq+0x20>
    }
  }
}
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	240084d0 	.word	0x240084d0
 800a5d4:	240084d8 	.word	0x240084d8

0800a5d8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a5e0:	f7ff ffd4 	bl	800a58c <pbuf_free_ooseq>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a5f2:	f008 fded 	bl	80131d0 <sys_arch_protect>
 800a5f6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a5f8:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <pbuf_pool_is_empty+0x4c>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a5fe:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <pbuf_pool_is_empty+0x4c>)
 800a600:	2201      	movs	r2, #1
 800a602:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f008 fdf1 	bl	80131ec <sys_arch_unprotect>

  if (!queued) {
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10f      	bne.n	800a630 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a610:	2100      	movs	r1, #0
 800a612:	480a      	ldr	r0, [pc, #40]	; (800a63c <pbuf_pool_is_empty+0x50>)
 800a614:	f7fe feaa 	bl	800936c <tcpip_try_callback>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <pbuf_pool_is_empty+0x44>
 800a61e:	f008 fdd7 	bl	80131d0 <sys_arch_protect>
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	4b04      	ldr	r3, [pc, #16]	; (800a638 <pbuf_pool_is_empty+0x4c>)
 800a626:	2200      	movs	r2, #0
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f008 fdde 	bl	80131ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	240084d0 	.word	0x240084d0
 800a63c:	0800a5d9 	.word	0x0800a5d9

0800a640 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	4611      	mov	r1, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	460b      	mov	r3, r1
 800a650:	80fb      	strh	r3, [r7, #6]
 800a652:	4613      	mov	r3, r2
 800a654:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	88fa      	ldrh	r2, [r7, #6]
 800a666:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	88ba      	ldrh	r2, [r7, #4]
 800a66c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a66e:	8b3b      	ldrh	r3, [r7, #24]
 800a670:	b2da      	uxtb	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	7f3a      	ldrb	r2, [r7, #28]
 800a67a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2201      	movs	r2, #1
 800a680:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	73da      	strb	r2, [r3, #15]
}
 800a688:	bf00      	nop
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08c      	sub	sp, #48	; 0x30
 800a698:	af02      	add	r7, sp, #8
 800a69a:	4603      	mov	r3, r0
 800a69c:	71fb      	strb	r3, [r7, #7]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	80bb      	strh	r3, [r7, #4]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a6aa:	887b      	ldrh	r3, [r7, #2]
 800a6ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a6b0:	d07f      	beq.n	800a7b2 <pbuf_alloc+0x11e>
 800a6b2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a6b6:	f300 80c8 	bgt.w	800a84a <pbuf_alloc+0x1b6>
 800a6ba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a6be:	d010      	beq.n	800a6e2 <pbuf_alloc+0x4e>
 800a6c0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a6c4:	f300 80c1 	bgt.w	800a84a <pbuf_alloc+0x1b6>
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d002      	beq.n	800a6d2 <pbuf_alloc+0x3e>
 800a6cc:	2b41      	cmp	r3, #65	; 0x41
 800a6ce:	f040 80bc 	bne.w	800a84a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a6d2:	887a      	ldrh	r2, [r7, #2]
 800a6d4:	88bb      	ldrh	r3, [r7, #4]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f000 f8d1 	bl	800a880 <pbuf_alloc_reference>
 800a6de:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a6e0:	e0bd      	b.n	800a85e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a6ea:	88bb      	ldrh	r3, [r7, #4]
 800a6ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a6ee:	200c      	movs	r0, #12
 800a6f0:	f7ff fb9a 	bl	8009e28 <memp_malloc>
 800a6f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d109      	bne.n	800a710 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a6fc:	f7ff ff76 	bl	800a5ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <pbuf_alloc+0x78>
            pbuf_free(p);
 800a706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a708:	f000 faa8 	bl	800ac5c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	e0a7      	b.n	800a860 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a712:	3303      	adds	r3, #3
 800a714:	b29b      	uxth	r3, r3
 800a716:	f023 0303 	bic.w	r3, r3, #3
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a720:	b29b      	uxth	r3, r3
 800a722:	8b7a      	ldrh	r2, [r7, #26]
 800a724:	4293      	cmp	r3, r2
 800a726:	bf28      	it	cs
 800a728:	4613      	movcs	r3, r2
 800a72a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a72c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a72e:	3310      	adds	r3, #16
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	4413      	add	r3, r2
 800a734:	3303      	adds	r3, #3
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	4618      	mov	r0, r3
 800a73c:	89f9      	ldrh	r1, [r7, #14]
 800a73e:	8b7a      	ldrh	r2, [r7, #26]
 800a740:	2300      	movs	r3, #0
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	887b      	ldrh	r3, [r7, #2]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	460b      	mov	r3, r1
 800a74a:	4601      	mov	r1, r0
 800a74c:	6938      	ldr	r0, [r7, #16]
 800a74e:	f7ff ff77 	bl	800a640 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f003 0303 	and.w	r3, r3, #3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d006      	beq.n	800a76c <pbuf_alloc+0xd8>
 800a75e:	4b42      	ldr	r3, [pc, #264]	; (800a868 <pbuf_alloc+0x1d4>)
 800a760:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a764:	4941      	ldr	r1, [pc, #260]	; (800a86c <pbuf_alloc+0x1d8>)
 800a766:	4842      	ldr	r0, [pc, #264]	; (800a870 <pbuf_alloc+0x1dc>)
 800a768:	f008 fd98 	bl	801329c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a76e:	3303      	adds	r3, #3
 800a770:	f023 0303 	bic.w	r3, r3, #3
 800a774:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a778:	d106      	bne.n	800a788 <pbuf_alloc+0xf4>
 800a77a:	4b3b      	ldr	r3, [pc, #236]	; (800a868 <pbuf_alloc+0x1d4>)
 800a77c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a780:	493c      	ldr	r1, [pc, #240]	; (800a874 <pbuf_alloc+0x1e0>)
 800a782:	483b      	ldr	r0, [pc, #236]	; (800a870 <pbuf_alloc+0x1dc>)
 800a784:	f008 fd8a 	bl	801329c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	627b      	str	r3, [r7, #36]	; 0x24
 800a792:	e002      	b.n	800a79a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a79e:	8b7a      	ldrh	r2, [r7, #26]
 800a7a0:	89fb      	ldrh	r3, [r7, #14]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a7aa:	8b7b      	ldrh	r3, [r7, #26]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d19e      	bne.n	800a6ee <pbuf_alloc+0x5a>
      break;
 800a7b0:	e055      	b.n	800a85e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a7b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7b4:	3303      	adds	r3, #3
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	f023 0303 	bic.w	r3, r3, #3
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	88bb      	ldrh	r3, [r7, #4]
 800a7c0:	3303      	adds	r3, #3
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	4413      	add	r3, r2
 800a7cc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a7ce:	8b3b      	ldrh	r3, [r7, #24]
 800a7d0:	3310      	adds	r3, #16
 800a7d2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a7d4:	8b3a      	ldrh	r2, [r7, #24]
 800a7d6:	88bb      	ldrh	r3, [r7, #4]
 800a7d8:	3303      	adds	r3, #3
 800a7da:	f023 0303 	bic.w	r3, r3, #3
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d306      	bcc.n	800a7f0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a7e2:	8afa      	ldrh	r2, [r7, #22]
 800a7e4:	88bb      	ldrh	r3, [r7, #4]
 800a7e6:	3303      	adds	r3, #3
 800a7e8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d201      	bcs.n	800a7f4 <pbuf_alloc+0x160>
        return NULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e035      	b.n	800a860 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a7f4:	8afb      	ldrh	r3, [r7, #22]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff f972 	bl	8009ae0 <mem_malloc>
 800a7fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <pbuf_alloc+0x174>
        return NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	e02b      	b.n	800a860 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a80a:	3310      	adds	r3, #16
 800a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80e:	4413      	add	r3, r2
 800a810:	3303      	adds	r3, #3
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	4618      	mov	r0, r3
 800a818:	88b9      	ldrh	r1, [r7, #4]
 800a81a:	88ba      	ldrh	r2, [r7, #4]
 800a81c:	2300      	movs	r3, #0
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	887b      	ldrh	r3, [r7, #2]
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	460b      	mov	r3, r1
 800a826:	4601      	mov	r1, r0
 800a828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a82a:	f7ff ff09 	bl	800a640 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <pbuf_alloc+0x1c8>
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <pbuf_alloc+0x1d4>)
 800a83c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a840:	490d      	ldr	r1, [pc, #52]	; (800a878 <pbuf_alloc+0x1e4>)
 800a842:	480b      	ldr	r0, [pc, #44]	; (800a870 <pbuf_alloc+0x1dc>)
 800a844:	f008 fd2a 	bl	801329c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a848:	e008      	b.n	800a85c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <pbuf_alloc+0x1d4>)
 800a84c:	f240 1227 	movw	r2, #295	; 0x127
 800a850:	490a      	ldr	r1, [pc, #40]	; (800a87c <pbuf_alloc+0x1e8>)
 800a852:	4807      	ldr	r0, [pc, #28]	; (800a870 <pbuf_alloc+0x1dc>)
 800a854:	f008 fd22 	bl	801329c <iprintf>
      return NULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	e001      	b.n	800a860 <pbuf_alloc+0x1cc>
      break;
 800a85c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a860:	4618      	mov	r0, r3
 800a862:	3728      	adds	r7, #40	; 0x28
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	080149e4 	.word	0x080149e4
 800a86c:	08014a14 	.word	0x08014a14
 800a870:	08014a44 	.word	0x08014a44
 800a874:	08014a6c 	.word	0x08014a6c
 800a878:	08014aa0 	.word	0x08014aa0
 800a87c:	08014acc 	.word	0x08014acc

0800a880 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af02      	add	r7, sp, #8
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	807b      	strh	r3, [r7, #2]
 800a88c:	4613      	mov	r3, r2
 800a88e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a890:	883b      	ldrh	r3, [r7, #0]
 800a892:	2b41      	cmp	r3, #65	; 0x41
 800a894:	d009      	beq.n	800a8aa <pbuf_alloc_reference+0x2a>
 800a896:	883b      	ldrh	r3, [r7, #0]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d006      	beq.n	800a8aa <pbuf_alloc_reference+0x2a>
 800a89c:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <pbuf_alloc_reference+0x5c>)
 800a89e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a8a2:	490f      	ldr	r1, [pc, #60]	; (800a8e0 <pbuf_alloc_reference+0x60>)
 800a8a4:	480f      	ldr	r0, [pc, #60]	; (800a8e4 <pbuf_alloc_reference+0x64>)
 800a8a6:	f008 fcf9 	bl	801329c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a8aa:	200b      	movs	r0, #11
 800a8ac:	f7ff fabc 	bl	8009e28 <memp_malloc>
 800a8b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e00b      	b.n	800a8d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a8bc:	8879      	ldrh	r1, [r7, #2]
 800a8be:	887a      	ldrh	r2, [r7, #2]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	883b      	ldrh	r3, [r7, #0]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f7ff feb7 	bl	800a640 <pbuf_init_alloced_pbuf>
  return p;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	080149e4 	.word	0x080149e4
 800a8e0:	08014ae8 	.word	0x08014ae8
 800a8e4:	08014a44 	.word	0x08014a44

0800a8e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	607b      	str	r3, [r7, #4]
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	81bb      	strh	r3, [r7, #12]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a900:	8a7b      	ldrh	r3, [r7, #18]
 800a902:	3303      	adds	r3, #3
 800a904:	f023 0203 	bic.w	r2, r3, #3
 800a908:	89bb      	ldrh	r3, [r7, #12]
 800a90a:	441a      	add	r2, r3
 800a90c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a90e:	429a      	cmp	r2, r3
 800a910:	d901      	bls.n	800a916 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a912:	2300      	movs	r3, #0
 800a914:	e018      	b.n	800a948 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d007      	beq.n	800a92c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a91c:	8a7b      	ldrh	r3, [r7, #18]
 800a91e:	3303      	adds	r3, #3
 800a920:	f023 0303 	bic.w	r3, r3, #3
 800a924:	6a3a      	ldr	r2, [r7, #32]
 800a926:	4413      	add	r3, r2
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	e001      	b.n	800a930 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	89b9      	ldrh	r1, [r7, #12]
 800a934:	89ba      	ldrh	r2, [r7, #12]
 800a936:	2302      	movs	r3, #2
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	897b      	ldrh	r3, [r7, #10]
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	460b      	mov	r3, r1
 800a940:	6979      	ldr	r1, [r7, #20]
 800a942:	f7ff fe7d 	bl	800a640 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a946:	687b      	ldr	r3, [r7, #4]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3718      	adds	r7, #24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d106      	bne.n	800a970 <pbuf_realloc+0x20>
 800a962:	4b3a      	ldr	r3, [pc, #232]	; (800aa4c <pbuf_realloc+0xfc>)
 800a964:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a968:	4939      	ldr	r1, [pc, #228]	; (800aa50 <pbuf_realloc+0x100>)
 800a96a:	483a      	ldr	r0, [pc, #232]	; (800aa54 <pbuf_realloc+0x104>)
 800a96c:	f008 fc96 	bl	801329c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	891b      	ldrh	r3, [r3, #8]
 800a974:	887a      	ldrh	r2, [r7, #2]
 800a976:	429a      	cmp	r2, r3
 800a978:	d263      	bcs.n	800aa42 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	891a      	ldrh	r2, [r3, #8]
 800a97e:	887b      	ldrh	r3, [r7, #2]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a984:	887b      	ldrh	r3, [r7, #2]
 800a986:	817b      	strh	r3, [r7, #10]
  q = p;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a98c:	e018      	b.n	800a9c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	895b      	ldrh	r3, [r3, #10]
 800a992:	897a      	ldrh	r2, [r7, #10]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	891a      	ldrh	r2, [r3, #8]
 800a99c:	893b      	ldrh	r3, [r7, #8]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <pbuf_realloc+0x70>
 800a9b2:	4b26      	ldr	r3, [pc, #152]	; (800aa4c <pbuf_realloc+0xfc>)
 800a9b4:	f240 12af 	movw	r2, #431	; 0x1af
 800a9b8:	4927      	ldr	r1, [pc, #156]	; (800aa58 <pbuf_realloc+0x108>)
 800a9ba:	4826      	ldr	r0, [pc, #152]	; (800aa54 <pbuf_realloc+0x104>)
 800a9bc:	f008 fc6e 	bl	801329c <iprintf>
  while (rem_len > q->len) {
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	895b      	ldrh	r3, [r3, #10]
 800a9c4:	897a      	ldrh	r2, [r7, #10]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d8e1      	bhi.n	800a98e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	7b1b      	ldrb	r3, [r3, #12]
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d121      	bne.n	800aa1a <pbuf_realloc+0xca>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	895b      	ldrh	r3, [r3, #10]
 800a9da:	897a      	ldrh	r2, [r7, #10]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d01c      	beq.n	800aa1a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	7b5b      	ldrb	r3, [r3, #13]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d116      	bne.n	800aa1a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	897b      	ldrh	r3, [r7, #10]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f7fe ff64 	bl	80098cc <mem_trim>
 800aa04:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d106      	bne.n	800aa1a <pbuf_realloc+0xca>
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <pbuf_realloc+0xfc>)
 800aa0e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800aa12:	4912      	ldr	r1, [pc, #72]	; (800aa5c <pbuf_realloc+0x10c>)
 800aa14:	480f      	ldr	r0, [pc, #60]	; (800aa54 <pbuf_realloc+0x104>)
 800aa16:	f008 fc41 	bl	801329c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	897a      	ldrh	r2, [r7, #10]
 800aa1e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	895a      	ldrh	r2, [r3, #10]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d004      	beq.n	800aa3a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 f911 	bl	800ac5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	e000      	b.n	800aa44 <pbuf_realloc+0xf4>
    return;
 800aa42:	bf00      	nop

}
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	080149e4 	.word	0x080149e4
 800aa50:	08014afc 	.word	0x08014afc
 800aa54:	08014a44 	.word	0x08014a44
 800aa58:	08014b14 	.word	0x08014b14
 800aa5c:	08014b2c 	.word	0x08014b2c

0800aa60 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <pbuf_add_header_impl+0x22>
 800aa74:	4b2b      	ldr	r3, [pc, #172]	; (800ab24 <pbuf_add_header_impl+0xc4>)
 800aa76:	f240 12df 	movw	r2, #479	; 0x1df
 800aa7a:	492b      	ldr	r1, [pc, #172]	; (800ab28 <pbuf_add_header_impl+0xc8>)
 800aa7c:	482b      	ldr	r0, [pc, #172]	; (800ab2c <pbuf_add_header_impl+0xcc>)
 800aa7e:	f008 fc0d 	bl	801329c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <pbuf_add_header_impl+0x30>
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa8e:	d301      	bcc.n	800aa94 <pbuf_add_header_impl+0x34>
    return 1;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e043      	b.n	800ab1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <pbuf_add_header_impl+0x3e>
    return 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e03e      	b.n	800ab1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	891a      	ldrh	r2, [r3, #8]
 800aaa6:	8a7b      	ldrh	r3, [r7, #18]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	8a7a      	ldrh	r2, [r7, #18]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d901      	bls.n	800aab6 <pbuf_add_header_impl+0x56>
    return 1;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e032      	b.n	800ab1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	7b1b      	ldrb	r3, [r3, #12]
 800aaba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800aabc:	8a3b      	ldrh	r3, [r7, #16]
 800aabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00c      	beq.n	800aae0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	425b      	negs	r3, r3
 800aace:	4413      	add	r3, r2
 800aad0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3310      	adds	r3, #16
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d20d      	bcs.n	800aaf8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800aadc:	2301      	movs	r3, #1
 800aade:	e01d      	b.n	800ab1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d006      	beq.n	800aaf4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	425b      	negs	r3, r3
 800aaee:	4413      	add	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	e001      	b.n	800aaf8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e011      	b.n	800ab1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	895a      	ldrh	r2, [r3, #10]
 800ab02:	8a7b      	ldrh	r3, [r7, #18]
 800ab04:	4413      	add	r3, r2
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	891a      	ldrh	r2, [r3, #8]
 800ab10:	8a7b      	ldrh	r3, [r7, #18]
 800ab12:	4413      	add	r3, r2
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	811a      	strh	r2, [r3, #8]


  return 0;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	080149e4 	.word	0x080149e4
 800ab28:	08014b48 	.word	0x08014b48
 800ab2c:	08014a44 	.word	0x08014a44

0800ab30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff ff8e 	bl	800aa60 <pbuf_add_header_impl>
 800ab44:	4603      	mov	r3, r0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <pbuf_remove_header+0x1e>
 800ab60:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <pbuf_remove_header+0x94>)
 800ab62:	f240 224b 	movw	r2, #587	; 0x24b
 800ab66:	4920      	ldr	r1, [pc, #128]	; (800abe8 <pbuf_remove_header+0x98>)
 800ab68:	4820      	ldr	r0, [pc, #128]	; (800abec <pbuf_remove_header+0x9c>)
 800ab6a:	f008 fb97 	bl	801329c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <pbuf_remove_header+0x2c>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab7a:	d301      	bcc.n	800ab80 <pbuf_remove_header+0x30>
    return 1;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e02c      	b.n	800abda <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <pbuf_remove_header+0x3a>
    return 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	e027      	b.n	800abda <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	895b      	ldrh	r3, [r3, #10]
 800ab92:	89fa      	ldrh	r2, [r7, #14]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d908      	bls.n	800abaa <pbuf_remove_header+0x5a>
 800ab98:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <pbuf_remove_header+0x94>)
 800ab9a:	f240 2255 	movw	r2, #597	; 0x255
 800ab9e:	4914      	ldr	r1, [pc, #80]	; (800abf0 <pbuf_remove_header+0xa0>)
 800aba0:	4812      	ldr	r0, [pc, #72]	; (800abec <pbuf_remove_header+0x9c>)
 800aba2:	f008 fb7b 	bl	801329c <iprintf>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e017      	b.n	800abda <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	441a      	add	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	895a      	ldrh	r2, [r3, #10]
 800abc0:	89fb      	ldrh	r3, [r7, #14]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	891a      	ldrh	r2, [r3, #8]
 800abce:	89fb      	ldrh	r3, [r7, #14]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	080149e4 	.word	0x080149e4
 800abe8:	08014b48 	.word	0x08014b48
 800abec:	08014a44 	.word	0x08014a44
 800abf0:	08014b54 	.word	0x08014b54

0800abf4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	807b      	strh	r3, [r7, #2]
 800ac00:	4613      	mov	r3, r2
 800ac02:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ac04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da08      	bge.n	800ac1e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ac0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac10:	425b      	negs	r3, r3
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff ff9b 	bl	800ab50 <pbuf_remove_header>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	e007      	b.n	800ac2e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ac1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac22:	787a      	ldrb	r2, [r7, #1]
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff ff1a 	bl	800aa60 <pbuf_add_header_impl>
 800ac2c:	4603      	mov	r3, r0
  }
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ac42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac46:	2201      	movs	r2, #1
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ffd2 	bl	800abf4 <pbuf_header_impl>
 800ac50:	4603      	mov	r3, r0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d106      	bne.n	800ac7e <pbuf_free+0x22>
 800ac70:	4b3b      	ldr	r3, [pc, #236]	; (800ad60 <pbuf_free+0x104>)
 800ac72:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ac76:	493b      	ldr	r1, [pc, #236]	; (800ad64 <pbuf_free+0x108>)
 800ac78:	483b      	ldr	r0, [pc, #236]	; (800ad68 <pbuf_free+0x10c>)
 800ac7a:	f008 fb0f 	bl	801329c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	e069      	b.n	800ad56 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ac86:	e062      	b.n	800ad4e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ac88:	f008 faa2 	bl	80131d0 <sys_arch_protect>
 800ac8c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	7b9b      	ldrb	r3, [r3, #14]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <pbuf_free+0x48>
 800ac96:	4b32      	ldr	r3, [pc, #200]	; (800ad60 <pbuf_free+0x104>)
 800ac98:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ac9c:	4933      	ldr	r1, [pc, #204]	; (800ad6c <pbuf_free+0x110>)
 800ac9e:	4832      	ldr	r0, [pc, #200]	; (800ad68 <pbuf_free+0x10c>)
 800aca0:	f008 fafc 	bl	801329c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7b9b      	ldrb	r3, [r3, #14]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	739a      	strb	r2, [r3, #14]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	7b9b      	ldrb	r3, [r3, #14]
 800acb4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800acb6:	69b8      	ldr	r0, [r7, #24]
 800acb8:	f008 fa98 	bl	80131ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d143      	bne.n	800ad4a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7b1b      	ldrb	r3, [r3, #12]
 800accc:	f003 030f 	and.w	r3, r3, #15
 800acd0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7b5b      	ldrb	r3, [r3, #13]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d011      	beq.n	800ad02 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <pbuf_free+0x9c>
 800acea:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <pbuf_free+0x104>)
 800acec:	f240 22ff 	movw	r2, #767	; 0x2ff
 800acf0:	491f      	ldr	r1, [pc, #124]	; (800ad70 <pbuf_free+0x114>)
 800acf2:	481d      	ldr	r0, [pc, #116]	; (800ad68 <pbuf_free+0x10c>)
 800acf4:	f008 fad2 	bl	801329c <iprintf>
        pc->custom_free_function(p);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	4798      	blx	r3
 800ad00:	e01d      	b.n	800ad3e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d104      	bne.n	800ad12 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	200c      	movs	r0, #12
 800ad0c:	f7ff f902 	bl	8009f14 <memp_free>
 800ad10:	e015      	b.n	800ad3e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d104      	bne.n	800ad22 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	200b      	movs	r0, #11
 800ad1c:	f7ff f8fa 	bl	8009f14 <memp_free>
 800ad20:	e00d      	b.n	800ad3e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d103      	bne.n	800ad30 <pbuf_free+0xd4>
          mem_free(p);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7fe fd3f 	bl	80097ac <mem_free>
 800ad2e:	e006      	b.n	800ad3e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <pbuf_free+0x104>)
 800ad32:	f240 320f 	movw	r2, #783	; 0x30f
 800ad36:	490f      	ldr	r1, [pc, #60]	; (800ad74 <pbuf_free+0x118>)
 800ad38:	480b      	ldr	r0, [pc, #44]	; (800ad68 <pbuf_free+0x10c>)
 800ad3a:	f008 faaf 	bl	801329c <iprintf>
        }
      }
      count++;
 800ad3e:	7ffb      	ldrb	r3, [r7, #31]
 800ad40:	3301      	adds	r3, #1
 800ad42:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	607b      	str	r3, [r7, #4]
 800ad48:	e001      	b.n	800ad4e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d199      	bne.n	800ac88 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ad54:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3720      	adds	r7, #32
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	080149e4 	.word	0x080149e4
 800ad64:	08014b48 	.word	0x08014b48
 800ad68:	08014a44 	.word	0x08014a44
 800ad6c:	08014b74 	.word	0x08014b74
 800ad70:	08014b8c 	.word	0x08014b8c
 800ad74:	08014bb0 	.word	0x08014bb0

0800ad78 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ad84:	e005      	b.n	800ad92 <pbuf_clen+0x1a>
    ++len;
 800ad86:	89fb      	ldrh	r3, [r7, #14]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1f6      	bne.n	800ad86 <pbuf_clen+0xe>
  }
  return len;
 800ad98:	89fb      	ldrh	r3, [r7, #14]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
	...

0800ada8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d016      	beq.n	800ade4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800adb6:	f008 fa0b 	bl	80131d0 <sys_arch_protect>
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7b9b      	ldrb	r3, [r3, #14]
 800adc0:	3301      	adds	r3, #1
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	739a      	strb	r2, [r3, #14]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f008 fa0f 	bl	80131ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	7b9b      	ldrb	r3, [r3, #14]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <pbuf_ref+0x3c>
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <pbuf_ref+0x44>)
 800add8:	f240 3242 	movw	r2, #834	; 0x342
 800addc:	4904      	ldr	r1, [pc, #16]	; (800adf0 <pbuf_ref+0x48>)
 800adde:	4805      	ldr	r0, [pc, #20]	; (800adf4 <pbuf_ref+0x4c>)
 800ade0:	f008 fa5c 	bl	801329c <iprintf>
  }
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	080149e4 	.word	0x080149e4
 800adf0:	08014bc4 	.word	0x08014bc4
 800adf4:	08014a44 	.word	0x08014a44

0800adf8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <pbuf_cat+0x16>
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d107      	bne.n	800ae1e <pbuf_cat+0x26>
 800ae0e:	4b20      	ldr	r3, [pc, #128]	; (800ae90 <pbuf_cat+0x98>)
 800ae10:	f240 3259 	movw	r2, #857	; 0x359
 800ae14:	491f      	ldr	r1, [pc, #124]	; (800ae94 <pbuf_cat+0x9c>)
 800ae16:	4820      	ldr	r0, [pc, #128]	; (800ae98 <pbuf_cat+0xa0>)
 800ae18:	f008 fa40 	bl	801329c <iprintf>
 800ae1c:	e034      	b.n	800ae88 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	e00a      	b.n	800ae3a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	891a      	ldrh	r2, [r3, #8]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	891b      	ldrh	r3, [r3, #8]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f0      	bne.n	800ae24 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	891a      	ldrh	r2, [r3, #8]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	895b      	ldrh	r3, [r3, #10]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d006      	beq.n	800ae5c <pbuf_cat+0x64>
 800ae4e:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <pbuf_cat+0x98>)
 800ae50:	f240 3262 	movw	r2, #866	; 0x362
 800ae54:	4911      	ldr	r1, [pc, #68]	; (800ae9c <pbuf_cat+0xa4>)
 800ae56:	4810      	ldr	r0, [pc, #64]	; (800ae98 <pbuf_cat+0xa0>)
 800ae58:	f008 fa20 	bl	801329c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <pbuf_cat+0x7a>
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <pbuf_cat+0x98>)
 800ae66:	f240 3263 	movw	r2, #867	; 0x363
 800ae6a:	490d      	ldr	r1, [pc, #52]	; (800aea0 <pbuf_cat+0xa8>)
 800ae6c:	480a      	ldr	r0, [pc, #40]	; (800ae98 <pbuf_cat+0xa0>)
 800ae6e:	f008 fa15 	bl	801329c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	891a      	ldrh	r2, [r3, #8]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	891b      	ldrh	r3, [r3, #8]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	080149e4 	.word	0x080149e4
 800ae94:	08014bd8 	.word	0x08014bd8
 800ae98:	08014a44 	.word	0x08014a44
 800ae9c:	08014c10 	.word	0x08014c10
 800aea0:	08014c40 	.word	0x08014c40

0800aea4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d008      	beq.n	800aece <pbuf_copy+0x2a>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d005      	beq.n	800aece <pbuf_copy+0x2a>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	891a      	ldrh	r2, [r3, #8]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	891b      	ldrh	r3, [r3, #8]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d209      	bcs.n	800aee2 <pbuf_copy+0x3e>
 800aece:	4b57      	ldr	r3, [pc, #348]	; (800b02c <pbuf_copy+0x188>)
 800aed0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aed4:	4956      	ldr	r1, [pc, #344]	; (800b030 <pbuf_copy+0x18c>)
 800aed6:	4857      	ldr	r0, [pc, #348]	; (800b034 <pbuf_copy+0x190>)
 800aed8:	f008 f9e0 	bl	801329c <iprintf>
 800aedc:	f06f 030f 	mvn.w	r3, #15
 800aee0:	e09f      	b.n	800b022 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	895b      	ldrh	r3, [r3, #10]
 800aee6:	461a      	mov	r2, r3
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	1ad2      	subs	r2, r2, r3
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	895b      	ldrh	r3, [r3, #10]
 800aef0:	4619      	mov	r1, r3
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	1acb      	subs	r3, r1, r3
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d306      	bcc.n	800af08 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	895b      	ldrh	r3, [r3, #10]
 800aefe:	461a      	mov	r2, r3
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	60fb      	str	r3, [r7, #12]
 800af06:	e005      	b.n	800af14 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	895b      	ldrh	r3, [r3, #10]
 800af0c:	461a      	mov	r2, r3
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	18d0      	adds	r0, r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	4413      	add	r3, r2
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4619      	mov	r1, r3
 800af28:	f008 f9a2 	bl	8013270 <memcpy>
    offset_to += len;
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	4413      	add	r3, r2
 800af32:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4413      	add	r3, r2
 800af3a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	895b      	ldrh	r3, [r3, #10]
 800af40:	461a      	mov	r2, r3
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	4293      	cmp	r3, r2
 800af46:	d906      	bls.n	800af56 <pbuf_copy+0xb2>
 800af48:	4b38      	ldr	r3, [pc, #224]	; (800b02c <pbuf_copy+0x188>)
 800af4a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800af4e:	493a      	ldr	r1, [pc, #232]	; (800b038 <pbuf_copy+0x194>)
 800af50:	4838      	ldr	r0, [pc, #224]	; (800b034 <pbuf_copy+0x190>)
 800af52:	f008 f9a3 	bl	801329c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	895b      	ldrh	r3, [r3, #10]
 800af5a:	461a      	mov	r2, r3
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	4293      	cmp	r3, r2
 800af60:	d906      	bls.n	800af70 <pbuf_copy+0xcc>
 800af62:	4b32      	ldr	r3, [pc, #200]	; (800b02c <pbuf_copy+0x188>)
 800af64:	f240 32da 	movw	r2, #986	; 0x3da
 800af68:	4934      	ldr	r1, [pc, #208]	; (800b03c <pbuf_copy+0x198>)
 800af6a:	4832      	ldr	r0, [pc, #200]	; (800b034 <pbuf_copy+0x190>)
 800af6c:	f008 f996 	bl	801329c <iprintf>
    if (offset_from >= p_from->len) {
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	895b      	ldrh	r3, [r3, #10]
 800af74:	461a      	mov	r2, r3
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	4293      	cmp	r3, r2
 800af7a:	d304      	bcc.n	800af86 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	895b      	ldrh	r3, [r3, #10]
 800af8a:	461a      	mov	r2, r3
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	4293      	cmp	r3, r2
 800af90:	d114      	bne.n	800afbc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10c      	bne.n	800afbc <pbuf_copy+0x118>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <pbuf_copy+0x118>
 800afa8:	4b20      	ldr	r3, [pc, #128]	; (800b02c <pbuf_copy+0x188>)
 800afaa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800afae:	4924      	ldr	r1, [pc, #144]	; (800b040 <pbuf_copy+0x19c>)
 800afb0:	4820      	ldr	r0, [pc, #128]	; (800b034 <pbuf_copy+0x190>)
 800afb2:	f008 f973 	bl	801329c <iprintf>
 800afb6:	f06f 030f 	mvn.w	r3, #15
 800afba:	e032      	b.n	800b022 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d013      	beq.n	800afea <pbuf_copy+0x146>
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	895a      	ldrh	r2, [r3, #10]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	891b      	ldrh	r3, [r3, #8]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d10d      	bne.n	800afea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d009      	beq.n	800afea <pbuf_copy+0x146>
 800afd6:	4b15      	ldr	r3, [pc, #84]	; (800b02c <pbuf_copy+0x188>)
 800afd8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800afdc:	4919      	ldr	r1, [pc, #100]	; (800b044 <pbuf_copy+0x1a0>)
 800afde:	4815      	ldr	r0, [pc, #84]	; (800b034 <pbuf_copy+0x190>)
 800afe0:	f008 f95c 	bl	801329c <iprintf>
 800afe4:	f06f 0305 	mvn.w	r3, #5
 800afe8:	e01b      	b.n	800b022 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d013      	beq.n	800b018 <pbuf_copy+0x174>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	895a      	ldrh	r2, [r3, #10]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	891b      	ldrh	r3, [r3, #8]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d10d      	bne.n	800b018 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d009      	beq.n	800b018 <pbuf_copy+0x174>
 800b004:	4b09      	ldr	r3, [pc, #36]	; (800b02c <pbuf_copy+0x188>)
 800b006:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b00a:	490e      	ldr	r1, [pc, #56]	; (800b044 <pbuf_copy+0x1a0>)
 800b00c:	4809      	ldr	r0, [pc, #36]	; (800b034 <pbuf_copy+0x190>)
 800b00e:	f008 f945 	bl	801329c <iprintf>
 800b012:	f06f 0305 	mvn.w	r3, #5
 800b016:	e004      	b.n	800b022 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f47f af61 	bne.w	800aee2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3718      	adds	r7, #24
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	080149e4 	.word	0x080149e4
 800b030:	08014c8c 	.word	0x08014c8c
 800b034:	08014a44 	.word	0x08014a44
 800b038:	08014cbc 	.word	0x08014cbc
 800b03c:	08014cd4 	.word	0x08014cd4
 800b040:	08014cf0 	.word	0x08014cf0
 800b044:	08014d00 	.word	0x08014d00

0800b048 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	4611      	mov	r1, r2
 800b054:	461a      	mov	r2, r3
 800b056:	460b      	mov	r3, r1
 800b058:	80fb      	strh	r3, [r7, #6]
 800b05a:	4613      	mov	r3, r2
 800b05c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d108      	bne.n	800b07e <pbuf_copy_partial+0x36>
 800b06c:	4b2b      	ldr	r3, [pc, #172]	; (800b11c <pbuf_copy_partial+0xd4>)
 800b06e:	f240 420a 	movw	r2, #1034	; 0x40a
 800b072:	492b      	ldr	r1, [pc, #172]	; (800b120 <pbuf_copy_partial+0xd8>)
 800b074:	482b      	ldr	r0, [pc, #172]	; (800b124 <pbuf_copy_partial+0xdc>)
 800b076:	f008 f911 	bl	801329c <iprintf>
 800b07a:	2300      	movs	r3, #0
 800b07c:	e04a      	b.n	800b114 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d108      	bne.n	800b096 <pbuf_copy_partial+0x4e>
 800b084:	4b25      	ldr	r3, [pc, #148]	; (800b11c <pbuf_copy_partial+0xd4>)
 800b086:	f240 420b 	movw	r2, #1035	; 0x40b
 800b08a:	4927      	ldr	r1, [pc, #156]	; (800b128 <pbuf_copy_partial+0xe0>)
 800b08c:	4825      	ldr	r0, [pc, #148]	; (800b124 <pbuf_copy_partial+0xdc>)
 800b08e:	f008 f905 	bl	801329c <iprintf>
 800b092:	2300      	movs	r3, #0
 800b094:	e03e      	b.n	800b114 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	61fb      	str	r3, [r7, #28]
 800b09a:	e034      	b.n	800b106 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b09c:	88bb      	ldrh	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <pbuf_copy_partial+0x70>
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	895b      	ldrh	r3, [r3, #10]
 800b0a6:	88ba      	ldrh	r2, [r7, #4]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d305      	bcc.n	800b0b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	895b      	ldrh	r3, [r3, #10]
 800b0b0:	88ba      	ldrh	r2, [r7, #4]
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	80bb      	strh	r3, [r7, #4]
 800b0b6:	e023      	b.n	800b100 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	895a      	ldrh	r2, [r3, #10]
 800b0bc:	88bb      	ldrh	r3, [r7, #4]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b0c2:	8b3a      	ldrh	r2, [r7, #24]
 800b0c4:	88fb      	ldrh	r3, [r7, #6]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d901      	bls.n	800b0ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b0ca:	88fb      	ldrh	r3, [r7, #6]
 800b0cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b0ce:	8b7b      	ldrh	r3, [r7, #26]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	18d0      	adds	r0, r2, r3
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	88bb      	ldrh	r3, [r7, #4]
 800b0da:	4413      	add	r3, r2
 800b0dc:	8b3a      	ldrh	r2, [r7, #24]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	f008 f8c6 	bl	8013270 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b0e4:	8afa      	ldrh	r2, [r7, #22]
 800b0e6:	8b3b      	ldrh	r3, [r7, #24]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b0ec:	8b7a      	ldrh	r2, [r7, #26]
 800b0ee:	8b3b      	ldrh	r3, [r7, #24]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b0f4:	88fa      	ldrh	r2, [r7, #6]
 800b0f6:	8b3b      	ldrh	r3, [r7, #24]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <pbuf_copy_partial+0xca>
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1c4      	bne.n	800b09c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b112:	8afb      	ldrh	r3, [r7, #22]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3720      	adds	r7, #32
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	080149e4 	.word	0x080149e4
 800b120:	08014d2c 	.word	0x08014d2c
 800b124:	08014a44 	.word	0x08014a44
 800b128:	08014d4c 	.word	0x08014d4c

0800b12c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	603a      	str	r2, [r7, #0]
 800b136:	71fb      	strb	r3, [r7, #7]
 800b138:	460b      	mov	r3, r1
 800b13a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	8919      	ldrh	r1, [r3, #8]
 800b140:	88ba      	ldrh	r2, [r7, #4]
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff faa5 	bl	800a694 <pbuf_alloc>
 800b14a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <pbuf_clone+0x2a>
    return NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	e011      	b.n	800b17a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7ff fea3 	bl	800aea4 <pbuf_copy>
 800b15e:	4603      	mov	r3, r0
 800b160:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b162:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <pbuf_clone+0x4c>
 800b16a:	4b06      	ldr	r3, [pc, #24]	; (800b184 <pbuf_clone+0x58>)
 800b16c:	f240 5224 	movw	r2, #1316	; 0x524
 800b170:	4905      	ldr	r1, [pc, #20]	; (800b188 <pbuf_clone+0x5c>)
 800b172:	4806      	ldr	r0, [pc, #24]	; (800b18c <pbuf_clone+0x60>)
 800b174:	f008 f892 	bl	801329c <iprintf>
  return q;
 800b178:	68fb      	ldr	r3, [r7, #12]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	080149e4 	.word	0x080149e4
 800b188:	08014e58 	.word	0x08014e58
 800b18c:	08014a44 	.word	0x08014a44

0800b190 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b194:	f008 f89a 	bl	80132cc <rand>
 800b198:	4603      	mov	r3, r0
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	4b01      	ldr	r3, [pc, #4]	; (800b1b0 <tcp_init+0x20>)
 800b1aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b1ac:	bf00      	nop
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	24000028 	.word	0x24000028

0800b1b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7d1b      	ldrb	r3, [r3, #20]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d105      	bne.n	800b1d0 <tcp_free+0x1c>
 800b1c4:	4b06      	ldr	r3, [pc, #24]	; (800b1e0 <tcp_free+0x2c>)
 800b1c6:	22d4      	movs	r2, #212	; 0xd4
 800b1c8:	4906      	ldr	r1, [pc, #24]	; (800b1e4 <tcp_free+0x30>)
 800b1ca:	4807      	ldr	r0, [pc, #28]	; (800b1e8 <tcp_free+0x34>)
 800b1cc:	f008 f866 	bl	801329c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	f7fe fe9e 	bl	8009f14 <memp_free>
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	08014ee4 	.word	0x08014ee4
 800b1e4:	08014f14 	.word	0x08014f14
 800b1e8:	08014f28 	.word	0x08014f28

0800b1ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	7d1b      	ldrb	r3, [r3, #20]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d105      	bne.n	800b208 <tcp_free_listen+0x1c>
 800b1fc:	4b06      	ldr	r3, [pc, #24]	; (800b218 <tcp_free_listen+0x2c>)
 800b1fe:	22df      	movs	r2, #223	; 0xdf
 800b200:	4906      	ldr	r1, [pc, #24]	; (800b21c <tcp_free_listen+0x30>)
 800b202:	4807      	ldr	r0, [pc, #28]	; (800b220 <tcp_free_listen+0x34>)
 800b204:	f008 f84a 	bl	801329c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	2002      	movs	r0, #2
 800b20c:	f7fe fe82 	bl	8009f14 <memp_free>
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	08014ee4 	.word	0x08014ee4
 800b21c:	08014f50 	.word	0x08014f50
 800b220:	08014f28 	.word	0x08014f28

0800b224 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b228:	f000 fea2 	bl	800bf70 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b22c:	4b07      	ldr	r3, [pc, #28]	; (800b24c <tcp_tmr+0x28>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	b2da      	uxtb	r2, r3
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <tcp_tmr+0x28>)
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	4b04      	ldr	r3, [pc, #16]	; (800b24c <tcp_tmr+0x28>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b244:	f000 fb54 	bl	800b8f0 <tcp_slowtmr>
  }
}
 800b248:	bf00      	nop
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	24005021 	.word	0x24005021

0800b250 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d105      	bne.n	800b26c <tcp_remove_listener+0x1c>
 800b260:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <tcp_remove_listener+0x48>)
 800b262:	22ff      	movs	r2, #255	; 0xff
 800b264:	490d      	ldr	r1, [pc, #52]	; (800b29c <tcp_remove_listener+0x4c>)
 800b266:	480e      	ldr	r0, [pc, #56]	; (800b2a0 <tcp_remove_listener+0x50>)
 800b268:	f008 f818 	bl	801329c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	60fb      	str	r3, [r7, #12]
 800b270:	e00a      	b.n	800b288 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d102      	bne.n	800b282 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f1      	bne.n	800b272 <tcp_remove_listener+0x22>
    }
  }
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	08014ee4 	.word	0x08014ee4
 800b29c:	08014f6c 	.word	0x08014f6c
 800b2a0:	08014f28 	.word	0x08014f28

0800b2a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <tcp_listen_closed+0x1c>
 800b2b2:	4b14      	ldr	r3, [pc, #80]	; (800b304 <tcp_listen_closed+0x60>)
 800b2b4:	f240 1211 	movw	r2, #273	; 0x111
 800b2b8:	4913      	ldr	r1, [pc, #76]	; (800b308 <tcp_listen_closed+0x64>)
 800b2ba:	4814      	ldr	r0, [pc, #80]	; (800b30c <tcp_listen_closed+0x68>)
 800b2bc:	f007 ffee 	bl	801329c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7d1b      	ldrb	r3, [r3, #20]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d006      	beq.n	800b2d6 <tcp_listen_closed+0x32>
 800b2c8:	4b0e      	ldr	r3, [pc, #56]	; (800b304 <tcp_listen_closed+0x60>)
 800b2ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b2ce:	4910      	ldr	r1, [pc, #64]	; (800b310 <tcp_listen_closed+0x6c>)
 800b2d0:	480e      	ldr	r0, [pc, #56]	; (800b30c <tcp_listen_closed+0x68>)
 800b2d2:	f007 ffe3 	bl	801329c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	e00b      	b.n	800b2f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b2dc:	4a0d      	ldr	r2, [pc, #52]	; (800b314 <tcp_listen_closed+0x70>)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6879      	ldr	r1, [r7, #4]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff ffb1 	bl	800b250 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d9f0      	bls.n	800b2dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b2fa:	bf00      	nop
 800b2fc:	bf00      	nop
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08014ee4 	.word	0x08014ee4
 800b308:	08014f94 	.word	0x08014f94
 800b30c:	08014f28 	.word	0x08014f28
 800b310:	08014fa0 	.word	0x08014fa0
 800b314:	08016f20 	.word	0x08016f20

0800b318 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b318:	b5b0      	push	{r4, r5, r7, lr}
 800b31a:	b088      	sub	sp, #32
 800b31c:	af04      	add	r7, sp, #16
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	460b      	mov	r3, r1
 800b322:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <tcp_close_shutdown+0x20>
 800b32a:	4b63      	ldr	r3, [pc, #396]	; (800b4b8 <tcp_close_shutdown+0x1a0>)
 800b32c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b330:	4962      	ldr	r1, [pc, #392]	; (800b4bc <tcp_close_shutdown+0x1a4>)
 800b332:	4863      	ldr	r0, [pc, #396]	; (800b4c0 <tcp_close_shutdown+0x1a8>)
 800b334:	f007 ffb2 	bl	801329c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b338:	78fb      	ldrb	r3, [r7, #3]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d066      	beq.n	800b40c <tcp_close_shutdown+0xf4>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	7d1b      	ldrb	r3, [r3, #20]
 800b342:	2b04      	cmp	r3, #4
 800b344:	d003      	beq.n	800b34e <tcp_close_shutdown+0x36>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	7d1b      	ldrb	r3, [r3, #20]
 800b34a:	2b07      	cmp	r3, #7
 800b34c:	d15e      	bne.n	800b40c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b352:	2b00      	cmp	r3, #0
 800b354:	d104      	bne.n	800b360 <tcp_close_shutdown+0x48>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b35a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b35e:	d055      	beq.n	800b40c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	8b5b      	ldrh	r3, [r3, #26]
 800b364:	f003 0310 	and.w	r3, r3, #16
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d106      	bne.n	800b37a <tcp_close_shutdown+0x62>
 800b36c:	4b52      	ldr	r3, [pc, #328]	; (800b4b8 <tcp_close_shutdown+0x1a0>)
 800b36e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b372:	4954      	ldr	r1, [pc, #336]	; (800b4c4 <tcp_close_shutdown+0x1ac>)
 800b374:	4852      	ldr	r0, [pc, #328]	; (800b4c0 <tcp_close_shutdown+0x1a8>)
 800b376:	f007 ff91 	bl	801329c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b382:	687d      	ldr	r5, [r7, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3304      	adds	r3, #4
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	8ad2      	ldrh	r2, [r2, #22]
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	8b09      	ldrh	r1, [r1, #24]
 800b390:	9102      	str	r1, [sp, #8]
 800b392:	9201      	str	r2, [sp, #4]
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	462b      	mov	r3, r5
 800b398:	4622      	mov	r2, r4
 800b39a:	4601      	mov	r1, r0
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f004 fe8d 	bl	80100bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 f8c6 	bl	800c534 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b3a8:	4b47      	ldr	r3, [pc, #284]	; (800b4c8 <tcp_close_shutdown+0x1b0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d105      	bne.n	800b3be <tcp_close_shutdown+0xa6>
 800b3b2:	4b45      	ldr	r3, [pc, #276]	; (800b4c8 <tcp_close_shutdown+0x1b0>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	4a43      	ldr	r2, [pc, #268]	; (800b4c8 <tcp_close_shutdown+0x1b0>)
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	e013      	b.n	800b3e6 <tcp_close_shutdown+0xce>
 800b3be:	4b42      	ldr	r3, [pc, #264]	; (800b4c8 <tcp_close_shutdown+0x1b0>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	e00c      	b.n	800b3e0 <tcp_close_shutdown+0xc8>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d104      	bne.n	800b3da <tcp_close_shutdown+0xc2>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68da      	ldr	r2, [r3, #12]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	60da      	str	r2, [r3, #12]
 800b3d8:	e005      	b.n	800b3e6 <tcp_close_shutdown+0xce>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1ef      	bne.n	800b3c6 <tcp_close_shutdown+0xae>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	60da      	str	r2, [r3, #12]
 800b3ec:	4b37      	ldr	r3, [pc, #220]	; (800b4cc <tcp_close_shutdown+0x1b4>)
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b3f2:	4b37      	ldr	r3, [pc, #220]	; (800b4d0 <tcp_close_shutdown+0x1b8>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d102      	bne.n	800b402 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b3fc:	f003 fd5a 	bl	800eeb4 <tcp_trigger_input_pcb_close>
 800b400:	e002      	b.n	800b408 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7ff fed6 	bl	800b1b4 <tcp_free>
      }
      return ERR_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	e050      	b.n	800b4ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7d1b      	ldrb	r3, [r3, #20]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d03b      	beq.n	800b48c <tcp_close_shutdown+0x174>
 800b414:	2b02      	cmp	r3, #2
 800b416:	dc44      	bgt.n	800b4a2 <tcp_close_shutdown+0x18a>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <tcp_close_shutdown+0x10a>
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d02a      	beq.n	800b476 <tcp_close_shutdown+0x15e>
 800b420:	e03f      	b.n	800b4a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8adb      	ldrh	r3, [r3, #22]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d021      	beq.n	800b46e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b42a:	4b2a      	ldr	r3, [pc, #168]	; (800b4d4 <tcp_close_shutdown+0x1bc>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	429a      	cmp	r2, r3
 800b432:	d105      	bne.n	800b440 <tcp_close_shutdown+0x128>
 800b434:	4b27      	ldr	r3, [pc, #156]	; (800b4d4 <tcp_close_shutdown+0x1bc>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	4a26      	ldr	r2, [pc, #152]	; (800b4d4 <tcp_close_shutdown+0x1bc>)
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	e013      	b.n	800b468 <tcp_close_shutdown+0x150>
 800b440:	4b24      	ldr	r3, [pc, #144]	; (800b4d4 <tcp_close_shutdown+0x1bc>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60bb      	str	r3, [r7, #8]
 800b446:	e00c      	b.n	800b462 <tcp_close_shutdown+0x14a>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d104      	bne.n	800b45c <tcp_close_shutdown+0x144>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68da      	ldr	r2, [r3, #12]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	60da      	str	r2, [r3, #12]
 800b45a:	e005      	b.n	800b468 <tcp_close_shutdown+0x150>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	60bb      	str	r3, [r7, #8]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1ef      	bne.n	800b448 <tcp_close_shutdown+0x130>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff fea0 	bl	800b1b4 <tcp_free>
      break;
 800b474:	e01a      	b.n	800b4ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff ff14 	bl	800b2a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	4816      	ldr	r0, [pc, #88]	; (800b4d8 <tcp_close_shutdown+0x1c0>)
 800b480:	f001 f8a8 	bl	800c5d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7ff feb1 	bl	800b1ec <tcp_free_listen>
      break;
 800b48a:	e00f      	b.n	800b4ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	480e      	ldr	r0, [pc, #56]	; (800b4c8 <tcp_close_shutdown+0x1b0>)
 800b490:	f001 f8a0 	bl	800c5d4 <tcp_pcb_remove>
 800b494:	4b0d      	ldr	r3, [pc, #52]	; (800b4cc <tcp_close_shutdown+0x1b4>)
 800b496:	2201      	movs	r2, #1
 800b498:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7ff fe8a 	bl	800b1b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b4a0:	e004      	b.n	800b4ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f81a 	bl	800b4dc <tcp_close_shutdown_fin>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	e000      	b.n	800b4ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	08014ee4 	.word	0x08014ee4
 800b4bc:	08014fb8 	.word	0x08014fb8
 800b4c0:	08014f28 	.word	0x08014f28
 800b4c4:	08014fd8 	.word	0x08014fd8
 800b4c8:	240084d8 	.word	0x240084d8
 800b4cc:	240084d4 	.word	0x240084d4
 800b4d0:	240084ec 	.word	0x240084ec
 800b4d4:	240084e4 	.word	0x240084e4
 800b4d8:	240084e0 	.word	0x240084e0

0800b4dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d106      	bne.n	800b4f8 <tcp_close_shutdown_fin+0x1c>
 800b4ea:	4b2e      	ldr	r3, [pc, #184]	; (800b5a4 <tcp_close_shutdown_fin+0xc8>)
 800b4ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b4f0:	492d      	ldr	r1, [pc, #180]	; (800b5a8 <tcp_close_shutdown_fin+0xcc>)
 800b4f2:	482e      	ldr	r0, [pc, #184]	; (800b5ac <tcp_close_shutdown_fin+0xd0>)
 800b4f4:	f007 fed2 	bl	801329c <iprintf>

  switch (pcb->state) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	7d1b      	ldrb	r3, [r3, #20]
 800b4fc:	2b07      	cmp	r3, #7
 800b4fe:	d020      	beq.n	800b542 <tcp_close_shutdown_fin+0x66>
 800b500:	2b07      	cmp	r3, #7
 800b502:	dc2b      	bgt.n	800b55c <tcp_close_shutdown_fin+0x80>
 800b504:	2b03      	cmp	r3, #3
 800b506:	d002      	beq.n	800b50e <tcp_close_shutdown_fin+0x32>
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d00d      	beq.n	800b528 <tcp_close_shutdown_fin+0x4c>
 800b50c:	e026      	b.n	800b55c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f003 fee2 	bl	800f2d8 <tcp_send_fin>
 800b514:	4603      	mov	r3, r0
 800b516:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d11f      	bne.n	800b560 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2205      	movs	r2, #5
 800b524:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b526:	e01b      	b.n	800b560 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f003 fed5 	bl	800f2d8 <tcp_send_fin>
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d114      	bne.n	800b564 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2205      	movs	r2, #5
 800b53e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b540:	e010      	b.n	800b564 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f003 fec8 	bl	800f2d8 <tcp_send_fin>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d109      	bne.n	800b568 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2209      	movs	r2, #9
 800b558:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b55a:	e005      	b.n	800b568 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	e01c      	b.n	800b59a <tcp_close_shutdown_fin+0xbe>
      break;
 800b560:	bf00      	nop
 800b562:	e002      	b.n	800b56a <tcp_close_shutdown_fin+0x8e>
      break;
 800b564:	bf00      	nop
 800b566:	e000      	b.n	800b56a <tcp_close_shutdown_fin+0x8e>
      break;
 800b568:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d103      	bne.n	800b57a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f003 ffee 	bl	800f554 <tcp_output>
 800b578:	e00d      	b.n	800b596 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b582:	d108      	bne.n	800b596 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	8b5b      	ldrh	r3, [r3, #26]
 800b588:	f043 0308 	orr.w	r3, r3, #8
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	e001      	b.n	800b59a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08014ee4 	.word	0x08014ee4
 800b5a8:	08014f94 	.word	0x08014f94
 800b5ac:	08014f28 	.word	0x08014f28

0800b5b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d109      	bne.n	800b5d2 <tcp_close+0x22>
 800b5be:	4b0f      	ldr	r3, [pc, #60]	; (800b5fc <tcp_close+0x4c>)
 800b5c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b5c4:	490e      	ldr	r1, [pc, #56]	; (800b600 <tcp_close+0x50>)
 800b5c6:	480f      	ldr	r0, [pc, #60]	; (800b604 <tcp_close+0x54>)
 800b5c8:	f007 fe68 	bl	801329c <iprintf>
 800b5cc:	f06f 030f 	mvn.w	r3, #15
 800b5d0:	e00f      	b.n	800b5f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	7d1b      	ldrb	r3, [r3, #20]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d006      	beq.n	800b5e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	8b5b      	ldrh	r3, [r3, #26]
 800b5de:	f043 0310 	orr.w	r3, r3, #16
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff fe94 	bl	800b318 <tcp_close_shutdown>
 800b5f0:	4603      	mov	r3, r0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	08014ee4 	.word	0x08014ee4
 800b600:	08014ff4 	.word	0x08014ff4
 800b604:	08014f28 	.word	0x08014f28

0800b608 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08e      	sub	sp, #56	; 0x38
 800b60c:	af04      	add	r7, sp, #16
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d107      	bne.n	800b628 <tcp_abandon+0x20>
 800b618:	4b52      	ldr	r3, [pc, #328]	; (800b764 <tcp_abandon+0x15c>)
 800b61a:	f240 223d 	movw	r2, #573	; 0x23d
 800b61e:	4952      	ldr	r1, [pc, #328]	; (800b768 <tcp_abandon+0x160>)
 800b620:	4852      	ldr	r0, [pc, #328]	; (800b76c <tcp_abandon+0x164>)
 800b622:	f007 fe3b 	bl	801329c <iprintf>
 800b626:	e099      	b.n	800b75c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	7d1b      	ldrb	r3, [r3, #20]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d106      	bne.n	800b63e <tcp_abandon+0x36>
 800b630:	4b4c      	ldr	r3, [pc, #304]	; (800b764 <tcp_abandon+0x15c>)
 800b632:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b636:	494e      	ldr	r1, [pc, #312]	; (800b770 <tcp_abandon+0x168>)
 800b638:	484c      	ldr	r0, [pc, #304]	; (800b76c <tcp_abandon+0x164>)
 800b63a:	f007 fe2f 	bl	801329c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	7d1b      	ldrb	r3, [r3, #20]
 800b642:	2b0a      	cmp	r3, #10
 800b644:	d107      	bne.n	800b656 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b646:	6879      	ldr	r1, [r7, #4]
 800b648:	484a      	ldr	r0, [pc, #296]	; (800b774 <tcp_abandon+0x16c>)
 800b64a:	f000 ffc3 	bl	800c5d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff fdb0 	bl	800b1b4 <tcp_free>
 800b654:	e082      	b.n	800b75c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b662:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b670:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7d1b      	ldrb	r3, [r3, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d126      	bne.n	800b6ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	8adb      	ldrh	r3, [r3, #22]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d02e      	beq.n	800b6e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b688:	4b3b      	ldr	r3, [pc, #236]	; (800b778 <tcp_abandon+0x170>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d105      	bne.n	800b69e <tcp_abandon+0x96>
 800b692:	4b39      	ldr	r3, [pc, #228]	; (800b778 <tcp_abandon+0x170>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	4a37      	ldr	r2, [pc, #220]	; (800b778 <tcp_abandon+0x170>)
 800b69a:	6013      	str	r3, [r2, #0]
 800b69c:	e013      	b.n	800b6c6 <tcp_abandon+0xbe>
 800b69e:	4b36      	ldr	r3, [pc, #216]	; (800b778 <tcp_abandon+0x170>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	61fb      	str	r3, [r7, #28]
 800b6a4:	e00c      	b.n	800b6c0 <tcp_abandon+0xb8>
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d104      	bne.n	800b6ba <tcp_abandon+0xb2>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	68da      	ldr	r2, [r3, #12]
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	60da      	str	r2, [r3, #12]
 800b6b8:	e005      	b.n	800b6c6 <tcp_abandon+0xbe>
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	61fb      	str	r3, [r7, #28]
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1ef      	bne.n	800b6a6 <tcp_abandon+0x9e>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	60da      	str	r2, [r3, #12]
 800b6cc:	e00b      	b.n	800b6e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	8adb      	ldrh	r3, [r3, #22]
 800b6d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	4828      	ldr	r0, [pc, #160]	; (800b77c <tcp_abandon+0x174>)
 800b6dc:	f000 ff7a 	bl	800c5d4 <tcp_pcb_remove>
 800b6e0:	4b27      	ldr	r3, [pc, #156]	; (800b780 <tcp_abandon+0x178>)
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fd1c 	bl	800c130 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d004      	beq.n	800b70a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fd13 	bl	800c130 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d004      	beq.n	800b71c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fd0a 	bl	800c130 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00e      	beq.n	800b740 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b722:	6879      	ldr	r1, [r7, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3304      	adds	r3, #4
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	8b12      	ldrh	r2, [r2, #24]
 800b72c:	9202      	str	r2, [sp, #8]
 800b72e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b730:	9201      	str	r2, [sp, #4]
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	460b      	mov	r3, r1
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	69b9      	ldr	r1, [r7, #24]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f004 fcbe 	bl	80100bc <tcp_rst>
    }
    last_state = pcb->state;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	7d1b      	ldrb	r3, [r3, #20]
 800b744:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7ff fd34 	bl	800b1b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d004      	beq.n	800b75c <tcp_abandon+0x154>
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f06f 010c 	mvn.w	r1, #12
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	4798      	blx	r3
  }
}
 800b75c:	3728      	adds	r7, #40	; 0x28
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	08014ee4 	.word	0x08014ee4
 800b768:	08015028 	.word	0x08015028
 800b76c:	08014f28 	.word	0x08014f28
 800b770:	08015044 	.word	0x08015044
 800b774:	240084e8 	.word	0x240084e8
 800b778:	240084e4 	.word	0x240084e4
 800b77c:	240084d8 	.word	0x240084d8
 800b780:	240084d4 	.word	0x240084d4

0800b784 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b78c:	2101      	movs	r1, #1
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff ff3a 	bl	800b608 <tcp_abandon>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <tcp_update_rcv_ann_wnd+0x1c>
 800b7aa:	4b25      	ldr	r3, [pc, #148]	; (800b840 <tcp_update_rcv_ann_wnd+0xa4>)
 800b7ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b7b0:	4924      	ldr	r1, [pc, #144]	; (800b844 <tcp_update_rcv_ann_wnd+0xa8>)
 800b7b2:	4825      	ldr	r0, [pc, #148]	; (800b848 <tcp_update_rcv_ann_wnd+0xac>)
 800b7b4:	f007 fd72 	bl	801329c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b7c0:	4413      	add	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b7cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b7d0:	bf28      	it	cs
 800b7d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b7d6:	b292      	uxth	r2, r2
 800b7d8:	4413      	add	r3, r2
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	db08      	blt.n	800b7f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	e020      	b.n	800b836 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dd03      	ble.n	800b80a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b808:	e014      	b.n	800b834 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b81c:	d306      	bcc.n	800b82c <tcp_update_rcv_ann_wnd+0x90>
 800b81e:	4b08      	ldr	r3, [pc, #32]	; (800b840 <tcp_update_rcv_ann_wnd+0xa4>)
 800b820:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b824:	4909      	ldr	r1, [pc, #36]	; (800b84c <tcp_update_rcv_ann_wnd+0xb0>)
 800b826:	4808      	ldr	r0, [pc, #32]	; (800b848 <tcp_update_rcv_ann_wnd+0xac>)
 800b828:	f007 fd38 	bl	801329c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	b29a      	uxth	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b834:	2300      	movs	r3, #0
  }
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	08014ee4 	.word	0x08014ee4
 800b844:	08015140 	.word	0x08015140
 800b848:	08014f28 	.word	0x08014f28
 800b84c:	08015164 	.word	0x08015164

0800b850 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d107      	bne.n	800b872 <tcp_recved+0x22>
 800b862:	4b1f      	ldr	r3, [pc, #124]	; (800b8e0 <tcp_recved+0x90>)
 800b864:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b868:	491e      	ldr	r1, [pc, #120]	; (800b8e4 <tcp_recved+0x94>)
 800b86a:	481f      	ldr	r0, [pc, #124]	; (800b8e8 <tcp_recved+0x98>)
 800b86c:	f007 fd16 	bl	801329c <iprintf>
 800b870:	e032      	b.n	800b8d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	7d1b      	ldrb	r3, [r3, #20]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d106      	bne.n	800b888 <tcp_recved+0x38>
 800b87a:	4b19      	ldr	r3, [pc, #100]	; (800b8e0 <tcp_recved+0x90>)
 800b87c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b880:	491a      	ldr	r1, [pc, #104]	; (800b8ec <tcp_recved+0x9c>)
 800b882:	4819      	ldr	r0, [pc, #100]	; (800b8e8 <tcp_recved+0x98>)
 800b884:	f007 fd0a 	bl	801329c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b88c:	887b      	ldrh	r3, [r7, #2]
 800b88e:	4413      	add	r3, r2
 800b890:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b892:	89fb      	ldrh	r3, [r7, #14]
 800b894:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b898:	d804      	bhi.n	800b8a4 <tcp_recved+0x54>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b89e:	89fa      	ldrh	r2, [r7, #14]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d204      	bcs.n	800b8ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b8aa:	851a      	strh	r2, [r3, #40]	; 0x28
 800b8ac:	e002      	b.n	800b8b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	89fa      	ldrh	r2, [r7, #14]
 800b8b2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff ff71 	bl	800b79c <tcp_update_rcv_ann_wnd>
 800b8ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b8c2:	d309      	bcc.n	800b8d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	8b5b      	ldrh	r3, [r3, #26]
 800b8c8:	f043 0302 	orr.w	r3, r3, #2
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f003 fe3e 	bl	800f554 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	08014ee4 	.word	0x08014ee4
 800b8e4:	08015180 	.word	0x08015180
 800b8e8:	08014f28 	.word	0x08014f28
 800b8ec:	08015198 	.word	0x08015198

0800b8f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b8f0:	b5b0      	push	{r4, r5, r7, lr}
 800b8f2:	b090      	sub	sp, #64	; 0x40
 800b8f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b8fc:	4b94      	ldr	r3, [pc, #592]	; (800bb50 <tcp_slowtmr+0x260>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3301      	adds	r3, #1
 800b902:	4a93      	ldr	r2, [pc, #588]	; (800bb50 <tcp_slowtmr+0x260>)
 800b904:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b906:	4b93      	ldr	r3, [pc, #588]	; (800bb54 <tcp_slowtmr+0x264>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	3301      	adds	r3, #1
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	4b91      	ldr	r3, [pc, #580]	; (800bb54 <tcp_slowtmr+0x264>)
 800b910:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b916:	4b90      	ldr	r3, [pc, #576]	; (800bb58 <tcp_slowtmr+0x268>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b91c:	e29d      	b.n	800be5a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b920:	7d1b      	ldrb	r3, [r3, #20]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <tcp_slowtmr+0x44>
 800b926:	4b8d      	ldr	r3, [pc, #564]	; (800bb5c <tcp_slowtmr+0x26c>)
 800b928:	f240 42be 	movw	r2, #1214	; 0x4be
 800b92c:	498c      	ldr	r1, [pc, #560]	; (800bb60 <tcp_slowtmr+0x270>)
 800b92e:	488d      	ldr	r0, [pc, #564]	; (800bb64 <tcp_slowtmr+0x274>)
 800b930:	f007 fcb4 	bl	801329c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	7d1b      	ldrb	r3, [r3, #20]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d106      	bne.n	800b94a <tcp_slowtmr+0x5a>
 800b93c:	4b87      	ldr	r3, [pc, #540]	; (800bb5c <tcp_slowtmr+0x26c>)
 800b93e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b942:	4989      	ldr	r1, [pc, #548]	; (800bb68 <tcp_slowtmr+0x278>)
 800b944:	4887      	ldr	r0, [pc, #540]	; (800bb64 <tcp_slowtmr+0x274>)
 800b946:	f007 fca9 	bl	801329c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	7d1b      	ldrb	r3, [r3, #20]
 800b94e:	2b0a      	cmp	r3, #10
 800b950:	d106      	bne.n	800b960 <tcp_slowtmr+0x70>
 800b952:	4b82      	ldr	r3, [pc, #520]	; (800bb5c <tcp_slowtmr+0x26c>)
 800b954:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b958:	4984      	ldr	r1, [pc, #528]	; (800bb6c <tcp_slowtmr+0x27c>)
 800b95a:	4882      	ldr	r0, [pc, #520]	; (800bb64 <tcp_slowtmr+0x274>)
 800b95c:	f007 fc9e 	bl	801329c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	7f9a      	ldrb	r2, [r3, #30]
 800b964:	4b7b      	ldr	r3, [pc, #492]	; (800bb54 <tcp_slowtmr+0x264>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d105      	bne.n	800b978 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b976:	e270      	b.n	800be5a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b978:	4b76      	ldr	r3, [pc, #472]	; (800bb54 <tcp_slowtmr+0x264>)
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98e:	7d1b      	ldrb	r3, [r3, #20]
 800b990:	2b02      	cmp	r3, #2
 800b992:	d10a      	bne.n	800b9aa <tcp_slowtmr+0xba>
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b99a:	2b05      	cmp	r3, #5
 800b99c:	d905      	bls.n	800b9aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9a8:	e11e      	b.n	800bbe8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9b0:	2b0b      	cmp	r3, #11
 800b9b2:	d905      	bls.n	800b9c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9be:	e113      	b.n	800bbe8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d075      	beq.n	800bab6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d006      	beq.n	800b9e0 <tcp_slowtmr+0xf0>
 800b9d2:	4b62      	ldr	r3, [pc, #392]	; (800bb5c <tcp_slowtmr+0x26c>)
 800b9d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b9d8:	4965      	ldr	r1, [pc, #404]	; (800bb70 <tcp_slowtmr+0x280>)
 800b9da:	4862      	ldr	r0, [pc, #392]	; (800bb64 <tcp_slowtmr+0x274>)
 800b9dc:	f007 fc5e 	bl	801329c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d106      	bne.n	800b9f6 <tcp_slowtmr+0x106>
 800b9e8:	4b5c      	ldr	r3, [pc, #368]	; (800bb5c <tcp_slowtmr+0x26c>)
 800b9ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b9ee:	4961      	ldr	r1, [pc, #388]	; (800bb74 <tcp_slowtmr+0x284>)
 800b9f0:	485c      	ldr	r0, [pc, #368]	; (800bb64 <tcp_slowtmr+0x274>)
 800b9f2:	f007 fc53 	bl	801329c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9fc:	2b0b      	cmp	r3, #11
 800b9fe:	d905      	bls.n	800ba0c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ba00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba04:	3301      	adds	r3, #1
 800ba06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba0a:	e0ed      	b.n	800bbe8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ba12:	3b01      	subs	r3, #1
 800ba14:	4a58      	ldr	r2, [pc, #352]	; (800bb78 <tcp_slowtmr+0x288>)
 800ba16:	5cd3      	ldrb	r3, [r2, r3]
 800ba18:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ba20:	7c7a      	ldrb	r2, [r7, #17]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d907      	bls.n	800ba36 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ba3c:	7c7a      	ldrb	r2, [r7, #17]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	f200 80d2 	bhi.w	800bbe8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ba44:	2301      	movs	r3, #1
 800ba46:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d108      	bne.n	800ba64 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ba52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba54:	f004 fc26 	bl	80102a4 <tcp_zero_window_probe>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d014      	beq.n	800ba88 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ba5e:	2300      	movs	r3, #0
 800ba60:	623b      	str	r3, [r7, #32]
 800ba62:	e011      	b.n	800ba88 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ba64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba6e:	f003 faeb 	bl	800f048 <tcp_split_unsent_seg>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d107      	bne.n	800ba88 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ba78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba7a:	f003 fd6b 	bl	800f554 <tcp_output>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80ac 	beq.w	800bbe8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ba90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ba9e:	2b06      	cmp	r3, #6
 800baa0:	f200 80a2 	bhi.w	800bbe8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800baa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800baaa:	3301      	adds	r3, #1
 800baac:	b2da      	uxtb	r2, r3
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bab4:	e098      	b.n	800bbe8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800babc:	2b00      	cmp	r3, #0
 800babe:	db0f      	blt.n	800bae0 <tcp_slowtmr+0x1f0>
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bac6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800baca:	4293      	cmp	r3, r2
 800bacc:	d008      	beq.n	800bae0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	3301      	adds	r3, #1
 800bad8:	b29b      	uxth	r3, r3
 800bada:	b21a      	sxth	r2, r3
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800baec:	429a      	cmp	r2, r3
 800baee:	db7b      	blt.n	800bbe8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800baf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baf2:	f004 f821 	bl	800fb38 <tcp_rexmit_rto_prepare>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <tcp_slowtmr+0x21c>
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d171      	bne.n	800bbe8 <tcp_slowtmr+0x2f8>
 800bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d06d      	beq.n	800bbe8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	7d1b      	ldrb	r3, [r3, #20]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d03a      	beq.n	800bb8a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb1a:	2b0c      	cmp	r3, #12
 800bb1c:	bf28      	it	cs
 800bb1e:	230c      	movcs	r3, #12
 800bb20:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb28:	10db      	asrs	r3, r3, #3
 800bb2a:	b21b      	sxth	r3, r3
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb34:	4413      	add	r3, r2
 800bb36:	7efa      	ldrb	r2, [r7, #27]
 800bb38:	4910      	ldr	r1, [pc, #64]	; (800bb7c <tcp_slowtmr+0x28c>)
 800bb3a:	5c8a      	ldrb	r2, [r1, r2]
 800bb3c:	4093      	lsls	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bb46:	4293      	cmp	r3, r2
 800bb48:	dc1a      	bgt.n	800bb80 <tcp_slowtmr+0x290>
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	b21a      	sxth	r2, r3
 800bb4e:	e019      	b.n	800bb84 <tcp_slowtmr+0x294>
 800bb50:	240084dc 	.word	0x240084dc
 800bb54:	24005022 	.word	0x24005022
 800bb58:	240084d8 	.word	0x240084d8
 800bb5c:	08014ee4 	.word	0x08014ee4
 800bb60:	08015228 	.word	0x08015228
 800bb64:	08014f28 	.word	0x08014f28
 800bb68:	08015254 	.word	0x08015254
 800bb6c:	08015280 	.word	0x08015280
 800bb70:	080152b0 	.word	0x080152b0
 800bb74:	080152e4 	.word	0x080152e4
 800bb78:	08016f18 	.word	0x08016f18
 800bb7c:	08016f08 	.word	0x08016f08
 800bb80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	bf28      	it	cs
 800bba0:	4613      	movcs	r3, r2
 800bba2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bba4:	8a7b      	ldrh	r3, [r7, #18]
 800bba6:	085b      	lsrs	r3, r3, #1
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbba:	005b      	lsls	r3, r3, #1
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d206      	bcs.n	800bbd0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bbe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbe4:	f004 f818 	bl	800fc18 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	7d1b      	ldrb	r3, [r3, #20]
 800bbec:	2b06      	cmp	r3, #6
 800bbee:	d111      	bne.n	800bc14 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	8b5b      	ldrh	r3, [r3, #26]
 800bbf4:	f003 0310 	and.w	r3, r3, #16
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbfc:	4b9c      	ldr	r3, [pc, #624]	; (800be70 <tcp_slowtmr+0x580>)
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	6a1b      	ldr	r3, [r3, #32]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	2b28      	cmp	r3, #40	; 0x28
 800bc08:	d904      	bls.n	800bc14 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc0e:	3301      	adds	r3, #1
 800bc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc16:	7a5b      	ldrb	r3, [r3, #9]
 800bc18:	f003 0308 	and.w	r3, r3, #8
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d04a      	beq.n	800bcb6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bc24:	2b04      	cmp	r3, #4
 800bc26:	d003      	beq.n	800bc30 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bc2c:	2b07      	cmp	r3, #7
 800bc2e:	d142      	bne.n	800bcb6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc30:	4b8f      	ldr	r3, [pc, #572]	; (800be70 <tcp_slowtmr+0x580>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bc40:	4b8c      	ldr	r3, [pc, #560]	; (800be74 <tcp_slowtmr+0x584>)
 800bc42:	440b      	add	r3, r1
 800bc44:	498c      	ldr	r1, [pc, #560]	; (800be78 <tcp_slowtmr+0x588>)
 800bc46:	fba1 1303 	umull	r1, r3, r1, r3
 800bc4a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d90a      	bls.n	800bc66 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc54:	3301      	adds	r3, #1
 800bc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bc5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc5e:	3301      	adds	r3, #1
 800bc60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc64:	e027      	b.n	800bcb6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc66:	4b82      	ldr	r3, [pc, #520]	; (800be70 <tcp_slowtmr+0x580>)
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc72:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	4b7f      	ldr	r3, [pc, #508]	; (800be7c <tcp_slowtmr+0x58c>)
 800bc80:	fb03 f300 	mul.w	r3, r3, r0
 800bc84:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bc86:	497c      	ldr	r1, [pc, #496]	; (800be78 <tcp_slowtmr+0x588>)
 800bc88:	fba1 1303 	umull	r1, r3, r1, r3
 800bc8c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d911      	bls.n	800bcb6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800bc92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc94:	f004 fac6 	bl	8010224 <tcp_keepalive>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bc9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d107      	bne.n	800bcb6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bcac:	3301      	adds	r3, #1
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d011      	beq.n	800bce2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bcbe:	4b6c      	ldr	r3, [pc, #432]	; (800be70 <tcp_slowtmr+0x580>)
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	1ad2      	subs	r2, r2, r3
 800bcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bcce:	4619      	mov	r1, r3
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	440b      	add	r3, r1
 800bcd6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d302      	bcc.n	800bce2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bcdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcde:	f000 fddd 	bl	800c89c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce4:	7d1b      	ldrb	r3, [r3, #20]
 800bce6:	2b03      	cmp	r3, #3
 800bce8:	d10b      	bne.n	800bd02 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bcea:	4b61      	ldr	r3, [pc, #388]	; (800be70 <tcp_slowtmr+0x580>)
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	2b28      	cmp	r3, #40	; 0x28
 800bcf6:	d904      	bls.n	800bd02 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bcf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	7d1b      	ldrb	r3, [r3, #20]
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	d10b      	bne.n	800bd22 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bd0a:	4b59      	ldr	r3, [pc, #356]	; (800be70 <tcp_slowtmr+0x580>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	2bf0      	cmp	r3, #240	; 0xf0
 800bd16:	d904      	bls.n	800bd22 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800bd18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bd22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d060      	beq.n	800bdec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd30:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bd32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd34:	f000 fbfe 	bl	800c534 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d010      	beq.n	800bd60 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bd3e:	4b50      	ldr	r3, [pc, #320]	; (800be80 <tcp_slowtmr+0x590>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d106      	bne.n	800bd56 <tcp_slowtmr+0x466>
 800bd48:	4b4e      	ldr	r3, [pc, #312]	; (800be84 <tcp_slowtmr+0x594>)
 800bd4a:	f240 526d 	movw	r2, #1389	; 0x56d
 800bd4e:	494e      	ldr	r1, [pc, #312]	; (800be88 <tcp_slowtmr+0x598>)
 800bd50:	484e      	ldr	r0, [pc, #312]	; (800be8c <tcp_slowtmr+0x59c>)
 800bd52:	f007 faa3 	bl	801329c <iprintf>
        prev->next = pcb->next;
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	68da      	ldr	r2, [r3, #12]
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	60da      	str	r2, [r3, #12]
 800bd5e:	e00f      	b.n	800bd80 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bd60:	4b47      	ldr	r3, [pc, #284]	; (800be80 <tcp_slowtmr+0x590>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d006      	beq.n	800bd78 <tcp_slowtmr+0x488>
 800bd6a:	4b46      	ldr	r3, [pc, #280]	; (800be84 <tcp_slowtmr+0x594>)
 800bd6c:	f240 5271 	movw	r2, #1393	; 0x571
 800bd70:	4947      	ldr	r1, [pc, #284]	; (800be90 <tcp_slowtmr+0x5a0>)
 800bd72:	4846      	ldr	r0, [pc, #280]	; (800be8c <tcp_slowtmr+0x59c>)
 800bd74:	f007 fa92 	bl	801329c <iprintf>
        tcp_active_pcbs = pcb->next;
 800bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	4a40      	ldr	r2, [pc, #256]	; (800be80 <tcp_slowtmr+0x590>)
 800bd7e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bd80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d013      	beq.n	800bdb0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bd90:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	3304      	adds	r3, #4
 800bd96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd98:	8ad2      	ldrh	r2, [r2, #22]
 800bd9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd9c:	8b09      	ldrh	r1, [r1, #24]
 800bd9e:	9102      	str	r1, [sp, #8]
 800bda0:	9201      	str	r2, [sp, #4]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	462b      	mov	r3, r5
 800bda6:	4622      	mov	r2, r4
 800bda8:	4601      	mov	r1, r0
 800bdaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdac:	f004 f986 	bl	80100bc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb8:	7d1b      	ldrb	r3, [r3, #20]
 800bdba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bdc6:	6838      	ldr	r0, [r7, #0]
 800bdc8:	f7ff f9f4 	bl	800b1b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bdcc:	4b31      	ldr	r3, [pc, #196]	; (800be94 <tcp_slowtmr+0x5a4>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <tcp_slowtmr+0x4f2>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f06f 010c 	mvn.w	r1, #12
 800bdde:	68b8      	ldr	r0, [r7, #8]
 800bde0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bde2:	4b2c      	ldr	r3, [pc, #176]	; (800be94 <tcp_slowtmr+0x5a4>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d037      	beq.n	800be5a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800bdea:	e592      	b.n	800b912 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	7f1b      	ldrb	r3, [r3, #28]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	7f1a      	ldrb	r2, [r3, #28]
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	7f5b      	ldrb	r3, [r3, #29]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d325      	bcc.n	800be5a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be10:	2200      	movs	r2, #0
 800be12:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800be14:	4b1f      	ldr	r3, [pc, #124]	; (800be94 <tcp_slowtmr+0x5a4>)
 800be16:	2200      	movs	r2, #0
 800be18:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <tcp_slowtmr+0x54c>
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be2c:	6912      	ldr	r2, [r2, #16]
 800be2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be30:	4610      	mov	r0, r2
 800be32:	4798      	blx	r3
 800be34:	4603      	mov	r3, r0
 800be36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800be3a:	e002      	b.n	800be42 <tcp_slowtmr+0x552>
 800be3c:	2300      	movs	r3, #0
 800be3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800be42:	4b14      	ldr	r3, [pc, #80]	; (800be94 <tcp_slowtmr+0x5a4>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d000      	beq.n	800be4c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800be4a:	e562      	b.n	800b912 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800be4c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800be54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be56:	f003 fb7d 	bl	800f554 <tcp_output>
  while (pcb != NULL) {
 800be5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f47f ad5e 	bne.w	800b91e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800be66:	4b0c      	ldr	r3, [pc, #48]	; (800be98 <tcp_slowtmr+0x5a8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800be6c:	e069      	b.n	800bf42 <tcp_slowtmr+0x652>
 800be6e:	bf00      	nop
 800be70:	240084dc 	.word	0x240084dc
 800be74:	000a4cb8 	.word	0x000a4cb8
 800be78:	10624dd3 	.word	0x10624dd3
 800be7c:	000124f8 	.word	0x000124f8
 800be80:	240084d8 	.word	0x240084d8
 800be84:	08014ee4 	.word	0x08014ee4
 800be88:	0801531c 	.word	0x0801531c
 800be8c:	08014f28 	.word	0x08014f28
 800be90:	08015348 	.word	0x08015348
 800be94:	240084d4 	.word	0x240084d4
 800be98:	240084e8 	.word	0x240084e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	7d1b      	ldrb	r3, [r3, #20]
 800bea0:	2b0a      	cmp	r3, #10
 800bea2:	d006      	beq.n	800beb2 <tcp_slowtmr+0x5c2>
 800bea4:	4b2b      	ldr	r3, [pc, #172]	; (800bf54 <tcp_slowtmr+0x664>)
 800bea6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800beaa:	492b      	ldr	r1, [pc, #172]	; (800bf58 <tcp_slowtmr+0x668>)
 800beac:	482b      	ldr	r0, [pc, #172]	; (800bf5c <tcp_slowtmr+0x66c>)
 800beae:	f007 f9f5 	bl	801329c <iprintf>
    pcb_remove = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800beb8:	4b29      	ldr	r3, [pc, #164]	; (800bf60 <tcp_slowtmr+0x670>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	2bf0      	cmp	r3, #240	; 0xf0
 800bec4:	d904      	bls.n	800bed0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beca:	3301      	adds	r3, #1
 800becc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d02f      	beq.n	800bf38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beda:	f000 fb2b 	bl	800c534 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d010      	beq.n	800bf06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bee4:	4b1f      	ldr	r3, [pc, #124]	; (800bf64 <tcp_slowtmr+0x674>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beea:	429a      	cmp	r2, r3
 800beec:	d106      	bne.n	800befc <tcp_slowtmr+0x60c>
 800beee:	4b19      	ldr	r3, [pc, #100]	; (800bf54 <tcp_slowtmr+0x664>)
 800bef0:	f240 52af 	movw	r2, #1455	; 0x5af
 800bef4:	491c      	ldr	r1, [pc, #112]	; (800bf68 <tcp_slowtmr+0x678>)
 800bef6:	4819      	ldr	r0, [pc, #100]	; (800bf5c <tcp_slowtmr+0x66c>)
 800bef8:	f007 f9d0 	bl	801329c <iprintf>
        prev->next = pcb->next;
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	68da      	ldr	r2, [r3, #12]
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	60da      	str	r2, [r3, #12]
 800bf04:	e00f      	b.n	800bf26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bf06:	4b17      	ldr	r3, [pc, #92]	; (800bf64 <tcp_slowtmr+0x674>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d006      	beq.n	800bf1e <tcp_slowtmr+0x62e>
 800bf10:	4b10      	ldr	r3, [pc, #64]	; (800bf54 <tcp_slowtmr+0x664>)
 800bf12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bf16:	4915      	ldr	r1, [pc, #84]	; (800bf6c <tcp_slowtmr+0x67c>)
 800bf18:	4810      	ldr	r0, [pc, #64]	; (800bf5c <tcp_slowtmr+0x66c>)
 800bf1a:	f007 f9bf 	bl	801329c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	4a10      	ldr	r2, [pc, #64]	; (800bf64 <tcp_slowtmr+0x674>)
 800bf24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bf30:	69f8      	ldr	r0, [r7, #28]
 800bf32:	f7ff f93f 	bl	800b1b4 <tcp_free>
 800bf36:	e004      	b.n	800bf42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1a9      	bne.n	800be9c <tcp_slowtmr+0x5ac>
    }
  }
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	3730      	adds	r7, #48	; 0x30
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bdb0      	pop	{r4, r5, r7, pc}
 800bf52:	bf00      	nop
 800bf54:	08014ee4 	.word	0x08014ee4
 800bf58:	08015374 	.word	0x08015374
 800bf5c:	08014f28 	.word	0x08014f28
 800bf60:	240084dc 	.word	0x240084dc
 800bf64:	240084e8 	.word	0x240084e8
 800bf68:	080153a4 	.word	0x080153a4
 800bf6c:	080153cc 	.word	0x080153cc

0800bf70 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bf76:	4b2d      	ldr	r3, [pc, #180]	; (800c02c <tcp_fasttmr+0xbc>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	4b2b      	ldr	r3, [pc, #172]	; (800c02c <tcp_fasttmr+0xbc>)
 800bf80:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bf82:	4b2b      	ldr	r3, [pc, #172]	; (800c030 <tcp_fasttmr+0xc0>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bf88:	e048      	b.n	800c01c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7f9a      	ldrb	r2, [r3, #30]
 800bf8e:	4b27      	ldr	r3, [pc, #156]	; (800c02c <tcp_fasttmr+0xbc>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d03f      	beq.n	800c016 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bf96:	4b25      	ldr	r3, [pc, #148]	; (800c02c <tcp_fasttmr+0xbc>)
 800bf98:	781a      	ldrb	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	8b5b      	ldrh	r3, [r3, #26]
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d010      	beq.n	800bfcc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	8b5b      	ldrh	r3, [r3, #26]
 800bfae:	f043 0302 	orr.w	r3, r3, #2
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f003 facb 	bl	800f554 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	8b5b      	ldrh	r3, [r3, #26]
 800bfc2:	f023 0303 	bic.w	r3, r3, #3
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	8b5b      	ldrh	r3, [r3, #26]
 800bfd0:	f003 0308 	and.w	r3, r3, #8
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d009      	beq.n	800bfec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	8b5b      	ldrh	r3, [r3, #26]
 800bfdc:	f023 0308 	bic.w	r3, r3, #8
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fa78 	bl	800b4dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00a      	beq.n	800c010 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bffa:	4b0e      	ldr	r3, [pc, #56]	; (800c034 <tcp_fasttmr+0xc4>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f819 	bl	800c038 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c006:	4b0b      	ldr	r3, [pc, #44]	; (800c034 <tcp_fasttmr+0xc4>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d000      	beq.n	800c010 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c00e:	e7b8      	b.n	800bf82 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	607b      	str	r3, [r7, #4]
 800c014:	e002      	b.n	800c01c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1b3      	bne.n	800bf8a <tcp_fasttmr+0x1a>
    }
  }
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	24005022 	.word	0x24005022
 800c030:	240084d8 	.word	0x240084d8
 800c034:	240084d4 	.word	0x240084d4

0800c038 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c038:	b590      	push	{r4, r7, lr}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <tcp_process_refused_data+0x22>
 800c046:	4b37      	ldr	r3, [pc, #220]	; (800c124 <tcp_process_refused_data+0xec>)
 800c048:	f240 6209 	movw	r2, #1545	; 0x609
 800c04c:	4936      	ldr	r1, [pc, #216]	; (800c128 <tcp_process_refused_data+0xf0>)
 800c04e:	4837      	ldr	r0, [pc, #220]	; (800c12c <tcp_process_refused_data+0xf4>)
 800c050:	f007 f924 	bl	801329c <iprintf>
 800c054:	f06f 030f 	mvn.w	r3, #15
 800c058:	e060      	b.n	800c11c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c05e:	7b5b      	ldrb	r3, [r3, #13]
 800c060:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c066:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <tcp_process_refused_data+0x58>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6918      	ldr	r0, [r3, #16]
 800c082:	2300      	movs	r3, #0
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	47a0      	blx	r4
 800c08a:	4603      	mov	r3, r0
 800c08c:	73fb      	strb	r3, [r7, #15]
 800c08e:	e007      	b.n	800c0a0 <tcp_process_refused_data+0x68>
 800c090:	2300      	movs	r3, #0
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	2000      	movs	r0, #0
 800c098:	f000 f8a4 	bl	800c1e4 <tcp_recv_null>
 800c09c:	4603      	mov	r3, r0
 800c09e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d12a      	bne.n	800c0fe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d033      	beq.n	800c11a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c0ba:	d005      	beq.n	800c0c8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00b      	beq.n	800c0ea <tcp_process_refused_data+0xb2>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6918      	ldr	r0, [r3, #16]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	2200      	movs	r2, #0
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	47a0      	blx	r4
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	73fb      	strb	r3, [r7, #15]
 800c0e8:	e001      	b.n	800c0ee <tcp_process_refused_data+0xb6>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c0ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0f2:	f113 0f0d 	cmn.w	r3, #13
 800c0f6:	d110      	bne.n	800c11a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c0f8:	f06f 030c 	mvn.w	r3, #12
 800c0fc:	e00e      	b.n	800c11c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c102:	f113 0f0d 	cmn.w	r3, #13
 800c106:	d102      	bne.n	800c10e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c108:	f06f 030c 	mvn.w	r3, #12
 800c10c:	e006      	b.n	800c11c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c114:	f06f 0304 	mvn.w	r3, #4
 800c118:	e000      	b.n	800c11c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	bd90      	pop	{r4, r7, pc}
 800c124:	08014ee4 	.word	0x08014ee4
 800c128:	080153f4 	.word	0x080153f4
 800c12c:	08014f28 	.word	0x08014f28

0800c130 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c138:	e007      	b.n	800c14a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f80a 	bl	800c15a <tcp_seg_free>
    seg = next;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1f4      	bne.n	800c13a <tcp_segs_free+0xa>
  }
}
 800c150:	bf00      	nop
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00c      	beq.n	800c182 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe fd71 	bl	800ac5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	2003      	movs	r0, #3
 800c17e:	f7fd fec9 	bl	8009f14 <memp_free>
  }
}
 800c182:	bf00      	nop
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <tcp_seg_copy+0x1c>
 800c19a:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <tcp_seg_copy+0x4c>)
 800c19c:	f240 6282 	movw	r2, #1666	; 0x682
 800c1a0:	490e      	ldr	r1, [pc, #56]	; (800c1dc <tcp_seg_copy+0x50>)
 800c1a2:	480f      	ldr	r0, [pc, #60]	; (800c1e0 <tcp_seg_copy+0x54>)
 800c1a4:	f007 f87a 	bl	801329c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c1a8:	2003      	movs	r0, #3
 800c1aa:	f7fd fe3d 	bl	8009e28 <memp_malloc>
 800c1ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <tcp_seg_copy+0x2e>
    return NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e00a      	b.n	800c1d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c1ba:	2210      	movs	r2, #16
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f007 f856 	bl	8013270 <memcpy>
  pbuf_ref(cseg->p);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fe fded 	bl	800ada8 <pbuf_ref>
  return cseg;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	08014ee4 	.word	0x08014ee4
 800c1dc:	08015438 	.word	0x08015438
 800c1e0:	08014f28 	.word	0x08014f28

0800c1e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d109      	bne.n	800c20c <tcp_recv_null+0x28>
 800c1f8:	4b12      	ldr	r3, [pc, #72]	; (800c244 <tcp_recv_null+0x60>)
 800c1fa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c1fe:	4912      	ldr	r1, [pc, #72]	; (800c248 <tcp_recv_null+0x64>)
 800c200:	4812      	ldr	r0, [pc, #72]	; (800c24c <tcp_recv_null+0x68>)
 800c202:	f007 f84b 	bl	801329c <iprintf>
 800c206:	f06f 030f 	mvn.w	r3, #15
 800c20a:	e016      	b.n	800c23a <tcp_recv_null+0x56>

  if (p != NULL) {
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d009      	beq.n	800c226 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	891b      	ldrh	r3, [r3, #8]
 800c216:	4619      	mov	r1, r3
 800c218:	68b8      	ldr	r0, [r7, #8]
 800c21a:	f7ff fb19 	bl	800b850 <tcp_recved>
    pbuf_free(p);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fe fd1c 	bl	800ac5c <pbuf_free>
 800c224:	e008      	b.n	800c238 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d104      	bne.n	800c238 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c22e:	68b8      	ldr	r0, [r7, #8]
 800c230:	f7ff f9be 	bl	800b5b0 <tcp_close>
 800c234:	4603      	mov	r3, r0
 800c236:	e000      	b.n	800c23a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	08014ee4 	.word	0x08014ee4
 800c248:	08015454 	.word	0x08015454
 800c24c:	08014f28 	.word	0x08014f28

0800c250 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	db01      	blt.n	800c266 <tcp_kill_prio+0x16>
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	e000      	b.n	800c268 <tcp_kill_prio+0x18>
 800c266:	237f      	movs	r3, #127	; 0x7f
 800c268:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c26a:	7afb      	ldrb	r3, [r7, #11]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d034      	beq.n	800c2da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c270:	7afb      	ldrb	r3, [r7, #11]
 800c272:	3b01      	subs	r3, #1
 800c274:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c27e:	4b19      	ldr	r3, [pc, #100]	; (800c2e4 <tcp_kill_prio+0x94>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	617b      	str	r3, [r7, #20]
 800c284:	e01f      	b.n	800c2c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	7d5b      	ldrb	r3, [r3, #21]
 800c28a:	7afa      	ldrb	r2, [r7, #11]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d80c      	bhi.n	800c2aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c294:	7afa      	ldrb	r2, [r7, #11]
 800c296:	429a      	cmp	r2, r3
 800c298:	d112      	bne.n	800c2c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c29a:	4b13      	ldr	r3, [pc, #76]	; (800c2e8 <tcp_kill_prio+0x98>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d80a      	bhi.n	800c2c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c2aa:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <tcp_kill_prio+0x98>)
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	7d5b      	ldrb	r3, [r3, #21]
 800c2be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	617b      	str	r3, [r7, #20]
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1dc      	bne.n	800c286 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d004      	beq.n	800c2dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c2d2:	6938      	ldr	r0, [r7, #16]
 800c2d4:	f7ff fa56 	bl	800b784 <tcp_abort>
 800c2d8:	e000      	b.n	800c2dc <tcp_kill_prio+0x8c>
    return;
 800c2da:	bf00      	nop
  }
}
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	240084d8 	.word	0x240084d8
 800c2e8:	240084dc 	.word	0x240084dc

0800c2ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	2b08      	cmp	r3, #8
 800c2fa:	d009      	beq.n	800c310 <tcp_kill_state+0x24>
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	2b09      	cmp	r3, #9
 800c300:	d006      	beq.n	800c310 <tcp_kill_state+0x24>
 800c302:	4b1a      	ldr	r3, [pc, #104]	; (800c36c <tcp_kill_state+0x80>)
 800c304:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c308:	4919      	ldr	r1, [pc, #100]	; (800c370 <tcp_kill_state+0x84>)
 800c30a:	481a      	ldr	r0, [pc, #104]	; (800c374 <tcp_kill_state+0x88>)
 800c30c:	f006 ffc6 	bl	801329c <iprintf>

  inactivity = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c314:	2300      	movs	r3, #0
 800c316:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c318:	4b17      	ldr	r3, [pc, #92]	; (800c378 <tcp_kill_state+0x8c>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	617b      	str	r3, [r7, #20]
 800c31e:	e017      	b.n	800c350 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	7d1b      	ldrb	r3, [r3, #20]
 800c324:	79fa      	ldrb	r2, [r7, #7]
 800c326:	429a      	cmp	r2, r3
 800c328:	d10f      	bne.n	800c34a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c32a:	4b14      	ldr	r3, [pc, #80]	; (800c37c <tcp_kill_state+0x90>)
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	429a      	cmp	r2, r3
 800c338:	d807      	bhi.n	800c34a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c33a:	4b10      	ldr	r3, [pc, #64]	; (800c37c <tcp_kill_state+0x90>)
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	617b      	str	r3, [r7, #20]
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e4      	bne.n	800c320 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c35c:	2100      	movs	r1, #0
 800c35e:	6938      	ldr	r0, [r7, #16]
 800c360:	f7ff f952 	bl	800b608 <tcp_abandon>
  }
}
 800c364:	bf00      	nop
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	08014ee4 	.word	0x08014ee4
 800c370:	08015470 	.word	0x08015470
 800c374:	08014f28 	.word	0x08014f28
 800c378:	240084d8 	.word	0x240084d8
 800c37c:	240084dc 	.word	0x240084dc

0800c380 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c38e:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <tcp_kill_timewait+0x58>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	e012      	b.n	800c3bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c396:	4b11      	ldr	r3, [pc, #68]	; (800c3dc <tcp_kill_timewait+0x5c>)
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d807      	bhi.n	800c3b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c3a6:	4b0d      	ldr	r3, [pc, #52]	; (800c3dc <tcp_kill_timewait+0x5c>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1e9      	bne.n	800c396 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c3c8:	68b8      	ldr	r0, [r7, #8]
 800c3ca:	f7ff f9db 	bl	800b784 <tcp_abort>
  }
}
 800c3ce:	bf00      	nop
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	240084e8 	.word	0x240084e8
 800c3dc:	240084dc 	.word	0x240084dc

0800c3e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c3e6:	4b10      	ldr	r3, [pc, #64]	; (800c428 <tcp_handle_closepend+0x48>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c3ec:	e014      	b.n	800c418 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	8b5b      	ldrh	r3, [r3, #26]
 800c3f8:	f003 0308 	and.w	r3, r3, #8
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d009      	beq.n	800c414 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	8b5b      	ldrh	r3, [r3, #26]
 800c404:	f023 0308 	bic.w	r3, r3, #8
 800c408:	b29a      	uxth	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff f864 	bl	800b4dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1e7      	bne.n	800c3ee <tcp_handle_closepend+0xe>
  }
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	240084d8 	.word	0x240084d8

0800c42c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c436:	2001      	movs	r0, #1
 800c438:	f7fd fcf6 	bl	8009e28 <memp_malloc>
 800c43c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d126      	bne.n	800c492 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c444:	f7ff ffcc 	bl	800c3e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c448:	f7ff ff9a 	bl	800c380 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c44c:	2001      	movs	r0, #1
 800c44e:	f7fd fceb 	bl	8009e28 <memp_malloc>
 800c452:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d11b      	bne.n	800c492 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c45a:	2009      	movs	r0, #9
 800c45c:	f7ff ff46 	bl	800c2ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c460:	2001      	movs	r0, #1
 800c462:	f7fd fce1 	bl	8009e28 <memp_malloc>
 800c466:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d111      	bne.n	800c492 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c46e:	2008      	movs	r0, #8
 800c470:	f7ff ff3c 	bl	800c2ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c474:	2001      	movs	r0, #1
 800c476:	f7fd fcd7 	bl	8009e28 <memp_malloc>
 800c47a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d107      	bne.n	800c492 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c482:	79fb      	ldrb	r3, [r7, #7]
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff fee3 	bl	800c250 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c48a:	2001      	movs	r0, #1
 800c48c:	f7fd fccc 	bl	8009e28 <memp_malloc>
 800c490:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d03f      	beq.n	800c518 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c498:	229c      	movs	r2, #156	; 0x9c
 800c49a:	2100      	movs	r1, #0
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f006 fef5 	bl	801328c <memset>
    pcb->prio = prio;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	79fa      	ldrb	r2, [r7, #7]
 800c4a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c4ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c4b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	22ff      	movs	r2, #255	; 0xff
 800c4c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c4ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2206      	movs	r2, #6
 800c4d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2206      	movs	r2, #6
 800c4dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c4ee:	4b0d      	ldr	r3, [pc, #52]	; (800c524 <tcp_alloc+0xf8>)
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c4f6:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <tcp_alloc+0xfc>)
 800c4f8:	781a      	ldrb	r2, [r3, #0]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c504:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4a08      	ldr	r2, [pc, #32]	; (800c52c <tcp_alloc+0x100>)
 800c50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	4a07      	ldr	r2, [pc, #28]	; (800c530 <tcp_alloc+0x104>)
 800c514:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c518:	68fb      	ldr	r3, [r7, #12]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	240084dc 	.word	0x240084dc
 800c528:	24005022 	.word	0x24005022
 800c52c:	0800c1e5 	.word	0x0800c1e5
 800c530:	006ddd00 	.word	0x006ddd00

0800c534 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d107      	bne.n	800c552 <tcp_pcb_purge+0x1e>
 800c542:	4b21      	ldr	r3, [pc, #132]	; (800c5c8 <tcp_pcb_purge+0x94>)
 800c544:	f640 0251 	movw	r2, #2129	; 0x851
 800c548:	4920      	ldr	r1, [pc, #128]	; (800c5cc <tcp_pcb_purge+0x98>)
 800c54a:	4821      	ldr	r0, [pc, #132]	; (800c5d0 <tcp_pcb_purge+0x9c>)
 800c54c:	f006 fea6 	bl	801329c <iprintf>
 800c550:	e037      	b.n	800c5c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	7d1b      	ldrb	r3, [r3, #20]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d033      	beq.n	800c5c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c55e:	2b0a      	cmp	r3, #10
 800c560:	d02f      	beq.n	800c5c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c566:	2b01      	cmp	r3, #1
 800c568:	d02b      	beq.n	800c5c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d007      	beq.n	800c582 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe fb70 	bl	800ac5c <pbuf_free>
      pcb->refused_data = NULL;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f986 	bl	800c89c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c596:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff fdc7 	bl	800c130 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff fdc2 	bl	800c130 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	08014ee4 	.word	0x08014ee4
 800c5cc:	08015530 	.word	0x08015530
 800c5d0:	08014f28 	.word	0x08014f28

0800c5d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d106      	bne.n	800c5f2 <tcp_pcb_remove+0x1e>
 800c5e4:	4b3e      	ldr	r3, [pc, #248]	; (800c6e0 <tcp_pcb_remove+0x10c>)
 800c5e6:	f640 0283 	movw	r2, #2179	; 0x883
 800c5ea:	493e      	ldr	r1, [pc, #248]	; (800c6e4 <tcp_pcb_remove+0x110>)
 800c5ec:	483e      	ldr	r0, [pc, #248]	; (800c6e8 <tcp_pcb_remove+0x114>)
 800c5ee:	f006 fe55 	bl	801329c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d106      	bne.n	800c606 <tcp_pcb_remove+0x32>
 800c5f8:	4b39      	ldr	r3, [pc, #228]	; (800c6e0 <tcp_pcb_remove+0x10c>)
 800c5fa:	f640 0284 	movw	r2, #2180	; 0x884
 800c5fe:	493b      	ldr	r1, [pc, #236]	; (800c6ec <tcp_pcb_remove+0x118>)
 800c600:	4839      	ldr	r0, [pc, #228]	; (800c6e8 <tcp_pcb_remove+0x114>)
 800c602:	f006 fe4b 	bl	801329c <iprintf>

  TCP_RMV(pcblist, pcb);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d105      	bne.n	800c61c <tcp_pcb_remove+0x48>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68da      	ldr	r2, [r3, #12]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	e013      	b.n	800c644 <tcp_pcb_remove+0x70>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	60fb      	str	r3, [r7, #12]
 800c622:	e00c      	b.n	800c63e <tcp_pcb_remove+0x6a>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d104      	bne.n	800c638 <tcp_pcb_remove+0x64>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	68da      	ldr	r2, [r3, #12]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	60da      	str	r2, [r3, #12]
 800c636:	e005      	b.n	800c644 <tcp_pcb_remove+0x70>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	60fb      	str	r3, [r7, #12]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1ef      	bne.n	800c624 <tcp_pcb_remove+0x50>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2200      	movs	r2, #0
 800c648:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c64a:	6838      	ldr	r0, [r7, #0]
 800c64c:	f7ff ff72 	bl	800c534 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	7d1b      	ldrb	r3, [r3, #20]
 800c654:	2b0a      	cmp	r3, #10
 800c656:	d013      	beq.n	800c680 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d00f      	beq.n	800c680 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	8b5b      	ldrh	r3, [r3, #26]
 800c664:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d009      	beq.n	800c680 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	8b5b      	ldrh	r3, [r3, #26]
 800c670:	f043 0302 	orr.w	r3, r3, #2
 800c674:	b29a      	uxth	r2, r3
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c67a:	6838      	ldr	r0, [r7, #0]
 800c67c:	f002 ff6a 	bl	800f554 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	7d1b      	ldrb	r3, [r3, #20]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d020      	beq.n	800c6ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d006      	beq.n	800c69e <tcp_pcb_remove+0xca>
 800c690:	4b13      	ldr	r3, [pc, #76]	; (800c6e0 <tcp_pcb_remove+0x10c>)
 800c692:	f640 0293 	movw	r2, #2195	; 0x893
 800c696:	4916      	ldr	r1, [pc, #88]	; (800c6f0 <tcp_pcb_remove+0x11c>)
 800c698:	4813      	ldr	r0, [pc, #76]	; (800c6e8 <tcp_pcb_remove+0x114>)
 800c69a:	f006 fdff 	bl	801329c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d006      	beq.n	800c6b4 <tcp_pcb_remove+0xe0>
 800c6a6:	4b0e      	ldr	r3, [pc, #56]	; (800c6e0 <tcp_pcb_remove+0x10c>)
 800c6a8:	f640 0294 	movw	r2, #2196	; 0x894
 800c6ac:	4911      	ldr	r1, [pc, #68]	; (800c6f4 <tcp_pcb_remove+0x120>)
 800c6ae:	480e      	ldr	r0, [pc, #56]	; (800c6e8 <tcp_pcb_remove+0x114>)
 800c6b0:	f006 fdf4 	bl	801329c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d006      	beq.n	800c6ca <tcp_pcb_remove+0xf6>
 800c6bc:	4b08      	ldr	r3, [pc, #32]	; (800c6e0 <tcp_pcb_remove+0x10c>)
 800c6be:	f640 0296 	movw	r2, #2198	; 0x896
 800c6c2:	490d      	ldr	r1, [pc, #52]	; (800c6f8 <tcp_pcb_remove+0x124>)
 800c6c4:	4808      	ldr	r0, [pc, #32]	; (800c6e8 <tcp_pcb_remove+0x114>)
 800c6c6:	f006 fde9 	bl	801329c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c6d6:	bf00      	nop
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	08014ee4 	.word	0x08014ee4
 800c6e4:	0801554c 	.word	0x0801554c
 800c6e8:	08014f28 	.word	0x08014f28
 800c6ec:	08015568 	.word	0x08015568
 800c6f0:	08015588 	.word	0x08015588
 800c6f4:	080155a0 	.word	0x080155a0
 800c6f8:	080155bc 	.word	0x080155bc

0800c6fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d106      	bne.n	800c718 <tcp_next_iss+0x1c>
 800c70a:	4b0a      	ldr	r3, [pc, #40]	; (800c734 <tcp_next_iss+0x38>)
 800c70c:	f640 02af 	movw	r2, #2223	; 0x8af
 800c710:	4909      	ldr	r1, [pc, #36]	; (800c738 <tcp_next_iss+0x3c>)
 800c712:	480a      	ldr	r0, [pc, #40]	; (800c73c <tcp_next_iss+0x40>)
 800c714:	f006 fdc2 	bl	801329c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c718:	4b09      	ldr	r3, [pc, #36]	; (800c740 <tcp_next_iss+0x44>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	4b09      	ldr	r3, [pc, #36]	; (800c744 <tcp_next_iss+0x48>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4413      	add	r3, r2
 800c722:	4a07      	ldr	r2, [pc, #28]	; (800c740 <tcp_next_iss+0x44>)
 800c724:	6013      	str	r3, [r2, #0]
  return iss;
 800c726:	4b06      	ldr	r3, [pc, #24]	; (800c740 <tcp_next_iss+0x44>)
 800c728:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	08014ee4 	.word	0x08014ee4
 800c738:	080155d4 	.word	0x080155d4
 800c73c:	08014f28 	.word	0x08014f28
 800c740:	2400002c 	.word	0x2400002c
 800c744:	240084dc 	.word	0x240084dc

0800c748 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	4603      	mov	r3, r0
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
 800c754:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d106      	bne.n	800c76a <tcp_eff_send_mss_netif+0x22>
 800c75c:	4b14      	ldr	r3, [pc, #80]	; (800c7b0 <tcp_eff_send_mss_netif+0x68>)
 800c75e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c762:	4914      	ldr	r1, [pc, #80]	; (800c7b4 <tcp_eff_send_mss_netif+0x6c>)
 800c764:	4814      	ldr	r0, [pc, #80]	; (800c7b8 <tcp_eff_send_mss_netif+0x70>)
 800c766:	f006 fd99 	bl	801329c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c770:	89fb      	ldrh	r3, [r7, #14]
 800c772:	e019      	b.n	800c7a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c778:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c77a:	8afb      	ldrh	r3, [r7, #22]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d012      	beq.n	800c7a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c780:	2328      	movs	r3, #40	; 0x28
 800c782:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c784:	8afa      	ldrh	r2, [r7, #22]
 800c786:	8abb      	ldrh	r3, [r7, #20]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d904      	bls.n	800c796 <tcp_eff_send_mss_netif+0x4e>
 800c78c:	8afa      	ldrh	r2, [r7, #22]
 800c78e:	8abb      	ldrh	r3, [r7, #20]
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	b29b      	uxth	r3, r3
 800c794:	e000      	b.n	800c798 <tcp_eff_send_mss_netif+0x50>
 800c796:	2300      	movs	r3, #0
 800c798:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c79a:	8a7a      	ldrh	r2, [r7, #18]
 800c79c:	89fb      	ldrh	r3, [r7, #14]
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	bf28      	it	cs
 800c7a2:	4613      	movcs	r3, r2
 800c7a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c7a6:	89fb      	ldrh	r3, [r7, #14]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	08014ee4 	.word	0x08014ee4
 800c7b4:	080155f0 	.word	0x080155f0
 800c7b8:	08014f28 	.word	0x08014f28

0800c7bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d119      	bne.n	800c804 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c7d0:	4b10      	ldr	r3, [pc, #64]	; (800c814 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c7d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c7d6:	4910      	ldr	r1, [pc, #64]	; (800c818 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c7d8:	4810      	ldr	r0, [pc, #64]	; (800c81c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c7da:	f006 fd5f 	bl	801329c <iprintf>

  while (pcb != NULL) {
 800c7de:	e011      	b.n	800c804 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d108      	bne.n	800c7fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7fe ffc6 	bl	800b784 <tcp_abort>
      pcb = next;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	e002      	b.n	800c804 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1ea      	bne.n	800c7e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c80a:	bf00      	nop
 800c80c:	bf00      	nop
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	08014ee4 	.word	0x08014ee4
 800c818:	08015618 	.word	0x08015618
 800c81c:	08014f28 	.word	0x08014f28

0800c820 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d02a      	beq.n	800c886 <tcp_netif_ip_addr_changed+0x66>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d026      	beq.n	800c886 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c838:	4b15      	ldr	r3, [pc, #84]	; (800c890 <tcp_netif_ip_addr_changed+0x70>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff ffbc 	bl	800c7bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c844:	4b13      	ldr	r3, [pc, #76]	; (800c894 <tcp_netif_ip_addr_changed+0x74>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff ffb6 	bl	800c7bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d017      	beq.n	800c886 <tcp_netif_ip_addr_changed+0x66>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d013      	beq.n	800c886 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c85e:	4b0e      	ldr	r3, [pc, #56]	; (800c898 <tcp_netif_ip_addr_changed+0x78>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e00c      	b.n	800c880 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d103      	bne.n	800c87a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1ef      	bne.n	800c866 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c886:	bf00      	nop
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	240084d8 	.word	0x240084d8
 800c894:	240084e4 	.word	0x240084e4
 800c898:	240084e0 	.word	0x240084e0

0800c89c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d007      	beq.n	800c8bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff fc3d 	bl	800c130 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c8c4:	b590      	push	{r4, r7, lr}
 800c8c6:	b08d      	sub	sp, #52	; 0x34
 800c8c8:	af04      	add	r7, sp, #16
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d105      	bne.n	800c8e0 <tcp_input+0x1c>
 800c8d4:	4b9b      	ldr	r3, [pc, #620]	; (800cb44 <tcp_input+0x280>)
 800c8d6:	2283      	movs	r2, #131	; 0x83
 800c8d8:	499b      	ldr	r1, [pc, #620]	; (800cb48 <tcp_input+0x284>)
 800c8da:	489c      	ldr	r0, [pc, #624]	; (800cb4c <tcp_input+0x288>)
 800c8dc:	f006 fcde 	bl	801329c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	4a9a      	ldr	r2, [pc, #616]	; (800cb50 <tcp_input+0x28c>)
 800c8e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	895b      	ldrh	r3, [r3, #10]
 800c8ec:	2b13      	cmp	r3, #19
 800c8ee:	f240 83c4 	bls.w	800d07a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c8f2:	4b98      	ldr	r3, [pc, #608]	; (800cb54 <tcp_input+0x290>)
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	4a97      	ldr	r2, [pc, #604]	; (800cb54 <tcp_input+0x290>)
 800c8f8:	6812      	ldr	r2, [r2, #0]
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f005 fc43 	bl	8012188 <ip4_addr_isbroadcast_u32>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	f040 83ba 	bne.w	800d07e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c90a:	4b92      	ldr	r3, [pc, #584]	; (800cb54 <tcp_input+0x290>)
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c912:	2be0      	cmp	r3, #224	; 0xe0
 800c914:	f000 83b3 	beq.w	800d07e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c918:	4b8d      	ldr	r3, [pc, #564]	; (800cb50 <tcp_input+0x28c>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	899b      	ldrh	r3, [r3, #12]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4618      	mov	r0, r3
 800c922:	f7fc fdad 	bl	8009480 <lwip_htons>
 800c926:	4603      	mov	r3, r0
 800c928:	0b1b      	lsrs	r3, r3, #12
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c932:	7cbb      	ldrb	r3, [r7, #18]
 800c934:	2b13      	cmp	r3, #19
 800c936:	f240 83a4 	bls.w	800d082 <tcp_input+0x7be>
 800c93a:	7cbb      	ldrb	r3, [r7, #18]
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	891b      	ldrh	r3, [r3, #8]
 800c942:	429a      	cmp	r2, r3
 800c944:	f200 839d 	bhi.w	800d082 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c948:	7cbb      	ldrb	r3, [r7, #18]
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	3b14      	subs	r3, #20
 800c94e:	b29a      	uxth	r2, r3
 800c950:	4b81      	ldr	r3, [pc, #516]	; (800cb58 <tcp_input+0x294>)
 800c952:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c954:	4b81      	ldr	r3, [pc, #516]	; (800cb5c <tcp_input+0x298>)
 800c956:	2200      	movs	r2, #0
 800c958:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	895a      	ldrh	r2, [r3, #10]
 800c95e:	7cbb      	ldrb	r3, [r7, #18]
 800c960:	b29b      	uxth	r3, r3
 800c962:	429a      	cmp	r2, r3
 800c964:	d309      	bcc.n	800c97a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c966:	4b7c      	ldr	r3, [pc, #496]	; (800cb58 <tcp_input+0x294>)
 800c968:	881a      	ldrh	r2, [r3, #0]
 800c96a:	4b7d      	ldr	r3, [pc, #500]	; (800cb60 <tcp_input+0x29c>)
 800c96c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c96e:	7cbb      	ldrb	r3, [r7, #18]
 800c970:	4619      	mov	r1, r3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7fe f8ec 	bl	800ab50 <pbuf_remove_header>
 800c978:	e04e      	b.n	800ca18 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d105      	bne.n	800c98e <tcp_input+0xca>
 800c982:	4b70      	ldr	r3, [pc, #448]	; (800cb44 <tcp_input+0x280>)
 800c984:	22c2      	movs	r2, #194	; 0xc2
 800c986:	4977      	ldr	r1, [pc, #476]	; (800cb64 <tcp_input+0x2a0>)
 800c988:	4870      	ldr	r0, [pc, #448]	; (800cb4c <tcp_input+0x288>)
 800c98a:	f006 fc87 	bl	801329c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c98e:	2114      	movs	r1, #20
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7fe f8dd 	bl	800ab50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	895a      	ldrh	r2, [r3, #10]
 800c99a:	4b71      	ldr	r3, [pc, #452]	; (800cb60 <tcp_input+0x29c>)
 800c99c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c99e:	4b6e      	ldr	r3, [pc, #440]	; (800cb58 <tcp_input+0x294>)
 800c9a0:	881a      	ldrh	r2, [r3, #0]
 800c9a2:	4b6f      	ldr	r3, [pc, #444]	; (800cb60 <tcp_input+0x29c>)
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9aa:	4b6d      	ldr	r3, [pc, #436]	; (800cb60 <tcp_input+0x29c>)
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7fe f8cd 	bl	800ab50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	895b      	ldrh	r3, [r3, #10]
 800c9bc:	8a3a      	ldrh	r2, [r7, #16]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	f200 8361 	bhi.w	800d086 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	4a64      	ldr	r2, [pc, #400]	; (800cb5c <tcp_input+0x298>)
 800c9cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	8a3a      	ldrh	r2, [r7, #16]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe f8ba 	bl	800ab50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	891a      	ldrh	r2, [r3, #8]
 800c9e0:	8a3b      	ldrh	r3, [r7, #16]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	895b      	ldrh	r3, [r3, #10]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <tcp_input+0x13a>
 800c9f2:	4b54      	ldr	r3, [pc, #336]	; (800cb44 <tcp_input+0x280>)
 800c9f4:	22df      	movs	r2, #223	; 0xdf
 800c9f6:	495c      	ldr	r1, [pc, #368]	; (800cb68 <tcp_input+0x2a4>)
 800c9f8:	4854      	ldr	r0, [pc, #336]	; (800cb4c <tcp_input+0x288>)
 800c9fa:	f006 fc4f 	bl	801329c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	891a      	ldrh	r2, [r3, #8]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	891b      	ldrh	r3, [r3, #8]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d005      	beq.n	800ca18 <tcp_input+0x154>
 800ca0c:	4b4d      	ldr	r3, [pc, #308]	; (800cb44 <tcp_input+0x280>)
 800ca0e:	22e0      	movs	r2, #224	; 0xe0
 800ca10:	4956      	ldr	r1, [pc, #344]	; (800cb6c <tcp_input+0x2a8>)
 800ca12:	484e      	ldr	r0, [pc, #312]	; (800cb4c <tcp_input+0x288>)
 800ca14:	f006 fc42 	bl	801329c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ca18:	4b4d      	ldr	r3, [pc, #308]	; (800cb50 <tcp_input+0x28c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	4a4b      	ldr	r2, [pc, #300]	; (800cb50 <tcp_input+0x28c>)
 800ca22:	6814      	ldr	r4, [r2, #0]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fc fd2b 	bl	8009480 <lwip_htons>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ca2e:	4b48      	ldr	r3, [pc, #288]	; (800cb50 <tcp_input+0x28c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	885b      	ldrh	r3, [r3, #2]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	4a46      	ldr	r2, [pc, #280]	; (800cb50 <tcp_input+0x28c>)
 800ca38:	6814      	ldr	r4, [r2, #0]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fc fd20 	bl	8009480 <lwip_htons>
 800ca40:	4603      	mov	r3, r0
 800ca42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca44:	4b42      	ldr	r3, [pc, #264]	; (800cb50 <tcp_input+0x28c>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	4a41      	ldr	r2, [pc, #260]	; (800cb50 <tcp_input+0x28c>)
 800ca4c:	6814      	ldr	r4, [r2, #0]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fc fd2b 	bl	80094aa <lwip_htonl>
 800ca54:	4603      	mov	r3, r0
 800ca56:	6063      	str	r3, [r4, #4]
 800ca58:	6863      	ldr	r3, [r4, #4]
 800ca5a:	4a45      	ldr	r2, [pc, #276]	; (800cb70 <tcp_input+0x2ac>)
 800ca5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca5e:	4b3c      	ldr	r3, [pc, #240]	; (800cb50 <tcp_input+0x28c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	4a3a      	ldr	r2, [pc, #232]	; (800cb50 <tcp_input+0x28c>)
 800ca66:	6814      	ldr	r4, [r2, #0]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fc fd1e 	bl	80094aa <lwip_htonl>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	60a3      	str	r3, [r4, #8]
 800ca72:	68a3      	ldr	r3, [r4, #8]
 800ca74:	4a3f      	ldr	r2, [pc, #252]	; (800cb74 <tcp_input+0x2b0>)
 800ca76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca78:	4b35      	ldr	r3, [pc, #212]	; (800cb50 <tcp_input+0x28c>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	89db      	ldrh	r3, [r3, #14]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	4a33      	ldr	r2, [pc, #204]	; (800cb50 <tcp_input+0x28c>)
 800ca82:	6814      	ldr	r4, [r2, #0]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fc fcfb 	bl	8009480 <lwip_htons>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ca8e:	4b30      	ldr	r3, [pc, #192]	; (800cb50 <tcp_input+0x28c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	899b      	ldrh	r3, [r3, #12]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fc fcf2 	bl	8009480 <lwip_htons>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	4b34      	ldr	r3, [pc, #208]	; (800cb78 <tcp_input+0x2b4>)
 800caa8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	891a      	ldrh	r2, [r3, #8]
 800caae:	4b33      	ldr	r3, [pc, #204]	; (800cb7c <tcp_input+0x2b8>)
 800cab0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cab2:	4b31      	ldr	r3, [pc, #196]	; (800cb78 <tcp_input+0x2b4>)
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	f003 0303 	and.w	r3, r3, #3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00c      	beq.n	800cad8 <tcp_input+0x214>
    tcplen++;
 800cabe:	4b2f      	ldr	r3, [pc, #188]	; (800cb7c <tcp_input+0x2b8>)
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	3301      	adds	r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	4b2d      	ldr	r3, [pc, #180]	; (800cb7c <tcp_input+0x2b8>)
 800cac8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	891a      	ldrh	r2, [r3, #8]
 800cace:	4b2b      	ldr	r3, [pc, #172]	; (800cb7c <tcp_input+0x2b8>)
 800cad0:	881b      	ldrh	r3, [r3, #0]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	f200 82d9 	bhi.w	800d08a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cad8:	2300      	movs	r3, #0
 800cada:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cadc:	4b28      	ldr	r3, [pc, #160]	; (800cb80 <tcp_input+0x2bc>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	61fb      	str	r3, [r7, #28]
 800cae2:	e09d      	b.n	800cc20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	7d1b      	ldrb	r3, [r3, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d105      	bne.n	800caf8 <tcp_input+0x234>
 800caec:	4b15      	ldr	r3, [pc, #84]	; (800cb44 <tcp_input+0x280>)
 800caee:	22fb      	movs	r2, #251	; 0xfb
 800caf0:	4924      	ldr	r1, [pc, #144]	; (800cb84 <tcp_input+0x2c0>)
 800caf2:	4816      	ldr	r0, [pc, #88]	; (800cb4c <tcp_input+0x288>)
 800caf4:	f006 fbd2 	bl	801329c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	7d1b      	ldrb	r3, [r3, #20]
 800cafc:	2b0a      	cmp	r3, #10
 800cafe:	d105      	bne.n	800cb0c <tcp_input+0x248>
 800cb00:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <tcp_input+0x280>)
 800cb02:	22fc      	movs	r2, #252	; 0xfc
 800cb04:	4920      	ldr	r1, [pc, #128]	; (800cb88 <tcp_input+0x2c4>)
 800cb06:	4811      	ldr	r0, [pc, #68]	; (800cb4c <tcp_input+0x288>)
 800cb08:	f006 fbc8 	bl	801329c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d105      	bne.n	800cb20 <tcp_input+0x25c>
 800cb14:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <tcp_input+0x280>)
 800cb16:	22fd      	movs	r2, #253	; 0xfd
 800cb18:	491c      	ldr	r1, [pc, #112]	; (800cb8c <tcp_input+0x2c8>)
 800cb1a:	480c      	ldr	r0, [pc, #48]	; (800cb4c <tcp_input+0x288>)
 800cb1c:	f006 fbbe 	bl	801329c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	7a1b      	ldrb	r3, [r3, #8]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d033      	beq.n	800cb90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	7a1a      	ldrb	r2, [r3, #8]
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <tcp_input+0x290>)
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb34:	3301      	adds	r3, #1
 800cb36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d029      	beq.n	800cb90 <tcp_input+0x2cc>
      prev = pcb;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	61bb      	str	r3, [r7, #24]
      continue;
 800cb40:	e06b      	b.n	800cc1a <tcp_input+0x356>
 800cb42:	bf00      	nop
 800cb44:	0801564c 	.word	0x0801564c
 800cb48:	08015680 	.word	0x08015680
 800cb4c:	08015698 	.word	0x08015698
 800cb50:	24005034 	.word	0x24005034
 800cb54:	24005418 	.word	0x24005418
 800cb58:	24005038 	.word	0x24005038
 800cb5c:	2400503c 	.word	0x2400503c
 800cb60:	2400503a 	.word	0x2400503a
 800cb64:	080156c0 	.word	0x080156c0
 800cb68:	080156d0 	.word	0x080156d0
 800cb6c:	080156dc 	.word	0x080156dc
 800cb70:	24005044 	.word	0x24005044
 800cb74:	24005048 	.word	0x24005048
 800cb78:	24005050 	.word	0x24005050
 800cb7c:	2400504e 	.word	0x2400504e
 800cb80:	240084d8 	.word	0x240084d8
 800cb84:	080156fc 	.word	0x080156fc
 800cb88:	08015724 	.word	0x08015724
 800cb8c:	08015750 	.word	0x08015750
    }

    if (pcb->remote_port == tcphdr->src &&
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	8b1a      	ldrh	r2, [r3, #24]
 800cb94:	4b94      	ldr	r3, [pc, #592]	; (800cde8 <tcp_input+0x524>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	881b      	ldrh	r3, [r3, #0]
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d13a      	bne.n	800cc16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	8ada      	ldrh	r2, [r3, #22]
 800cba4:	4b90      	ldr	r3, [pc, #576]	; (800cde8 <tcp_input+0x524>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	885b      	ldrh	r3, [r3, #2]
 800cbaa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d132      	bne.n	800cc16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	4b8d      	ldr	r3, [pc, #564]	; (800cdec <tcp_input+0x528>)
 800cbb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d12c      	bne.n	800cc16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	4b8a      	ldr	r3, [pc, #552]	; (800cdec <tcp_input+0x528>)
 800cbc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d126      	bne.n	800cc16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	69fa      	ldr	r2, [r7, #28]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d106      	bne.n	800cbe0 <tcp_input+0x31c>
 800cbd2:	4b87      	ldr	r3, [pc, #540]	; (800cdf0 <tcp_input+0x52c>)
 800cbd4:	f240 120d 	movw	r2, #269	; 0x10d
 800cbd8:	4986      	ldr	r1, [pc, #536]	; (800cdf4 <tcp_input+0x530>)
 800cbda:	4887      	ldr	r0, [pc, #540]	; (800cdf8 <tcp_input+0x534>)
 800cbdc:	f006 fb5e 	bl	801329c <iprintf>
      if (prev != NULL) {
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00a      	beq.n	800cbfc <tcp_input+0x338>
        prev->next = pcb->next;
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cbee:	4b83      	ldr	r3, [pc, #524]	; (800cdfc <tcp_input+0x538>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cbf6:	4a81      	ldr	r2, [pc, #516]	; (800cdfc <tcp_input+0x538>)
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	69fa      	ldr	r2, [r7, #28]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d111      	bne.n	800cc2a <tcp_input+0x366>
 800cc06:	4b7a      	ldr	r3, [pc, #488]	; (800cdf0 <tcp_input+0x52c>)
 800cc08:	f240 1215 	movw	r2, #277	; 0x115
 800cc0c:	497c      	ldr	r1, [pc, #496]	; (800ce00 <tcp_input+0x53c>)
 800cc0e:	487a      	ldr	r0, [pc, #488]	; (800cdf8 <tcp_input+0x534>)
 800cc10:	f006 fb44 	bl	801329c <iprintf>
      break;
 800cc14:	e009      	b.n	800cc2a <tcp_input+0x366>
    }
    prev = pcb;
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	61fb      	str	r3, [r7, #28]
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f47f af5e 	bne.w	800cae4 <tcp_input+0x220>
 800cc28:	e000      	b.n	800cc2c <tcp_input+0x368>
      break;
 800cc2a:	bf00      	nop
  }

  if (pcb == NULL) {
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f040 8095 	bne.w	800cd5e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc34:	4b73      	ldr	r3, [pc, #460]	; (800ce04 <tcp_input+0x540>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	61fb      	str	r3, [r7, #28]
 800cc3a:	e03f      	b.n	800ccbc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	7d1b      	ldrb	r3, [r3, #20]
 800cc40:	2b0a      	cmp	r3, #10
 800cc42:	d006      	beq.n	800cc52 <tcp_input+0x38e>
 800cc44:	4b6a      	ldr	r3, [pc, #424]	; (800cdf0 <tcp_input+0x52c>)
 800cc46:	f240 121f 	movw	r2, #287	; 0x11f
 800cc4a:	496f      	ldr	r1, [pc, #444]	; (800ce08 <tcp_input+0x544>)
 800cc4c:	486a      	ldr	r0, [pc, #424]	; (800cdf8 <tcp_input+0x534>)
 800cc4e:	f006 fb25 	bl	801329c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	7a1b      	ldrb	r3, [r3, #8]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d009      	beq.n	800cc6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	7a1a      	ldrb	r2, [r3, #8]
 800cc5e:	4b63      	ldr	r3, [pc, #396]	; (800cdec <tcp_input+0x528>)
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc66:	3301      	adds	r3, #1
 800cc68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d122      	bne.n	800ccb4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	8b1a      	ldrh	r2, [r3, #24]
 800cc72:	4b5d      	ldr	r3, [pc, #372]	; (800cde8 <tcp_input+0x524>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	881b      	ldrh	r3, [r3, #0]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d11b      	bne.n	800ccb6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	8ada      	ldrh	r2, [r3, #22]
 800cc82:	4b59      	ldr	r3, [pc, #356]	; (800cde8 <tcp_input+0x524>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	885b      	ldrh	r3, [r3, #2]
 800cc88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d113      	bne.n	800ccb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	4b56      	ldr	r3, [pc, #344]	; (800cdec <tcp_input+0x528>)
 800cc94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d10d      	bne.n	800ccb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	4b53      	ldr	r3, [pc, #332]	; (800cdec <tcp_input+0x528>)
 800cca0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d107      	bne.n	800ccb6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cca6:	69f8      	ldr	r0, [r7, #28]
 800cca8:	f000 fb54 	bl	800d354 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7fd ffd5 	bl	800ac5c <pbuf_free>
        return;
 800ccb2:	e1f0      	b.n	800d096 <tcp_input+0x7d2>
        continue;
 800ccb4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	61fb      	str	r3, [r7, #28]
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1bc      	bne.n	800cc3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ccc6:	4b51      	ldr	r3, [pc, #324]	; (800ce0c <tcp_input+0x548>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	617b      	str	r3, [r7, #20]
 800cccc:	e02a      	b.n	800cd24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	7a1b      	ldrb	r3, [r3, #8]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00c      	beq.n	800ccf0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	7a1a      	ldrb	r2, [r3, #8]
 800ccda:	4b44      	ldr	r3, [pc, #272]	; (800cdec <tcp_input+0x528>)
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cce2:	3301      	adds	r3, #1
 800cce4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d002      	beq.n	800ccf0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	61bb      	str	r3, [r7, #24]
        continue;
 800ccee:	e016      	b.n	800cd1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	8ada      	ldrh	r2, [r3, #22]
 800ccf4:	4b3c      	ldr	r3, [pc, #240]	; (800cde8 <tcp_input+0x524>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	885b      	ldrh	r3, [r3, #2]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d10c      	bne.n	800cd1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	4b39      	ldr	r3, [pc, #228]	; (800cdec <tcp_input+0x528>)
 800cd06:	695b      	ldr	r3, [r3, #20]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d00f      	beq.n	800cd2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00d      	beq.n	800cd2e <tcp_input+0x46a>
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d009      	beq.n	800cd2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	617b      	str	r3, [r7, #20]
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1d1      	bne.n	800ccce <tcp_input+0x40a>
 800cd2a:	e000      	b.n	800cd2e <tcp_input+0x46a>
            break;
 800cd2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d014      	beq.n	800cd5e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00a      	beq.n	800cd50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	68da      	ldr	r2, [r3, #12]
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cd42:	4b32      	ldr	r3, [pc, #200]	; (800ce0c <tcp_input+0x548>)
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cd4a:	4a30      	ldr	r2, [pc, #192]	; (800ce0c <tcp_input+0x548>)
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cd50:	6978      	ldr	r0, [r7, #20]
 800cd52:	f000 fa01 	bl	800d158 <tcp_listen_input>
      }
      pbuf_free(p);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7fd ff80 	bl	800ac5c <pbuf_free>
      return;
 800cd5c:	e19b      	b.n	800d096 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 8160 	beq.w	800d026 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cd66:	4b2a      	ldr	r3, [pc, #168]	; (800ce10 <tcp_input+0x54c>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	891a      	ldrh	r2, [r3, #8]
 800cd70:	4b27      	ldr	r3, [pc, #156]	; (800ce10 <tcp_input+0x54c>)
 800cd72:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cd74:	4a26      	ldr	r2, [pc, #152]	; (800ce10 <tcp_input+0x54c>)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cd7a:	4b1b      	ldr	r3, [pc, #108]	; (800cde8 <tcp_input+0x524>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a24      	ldr	r2, [pc, #144]	; (800ce10 <tcp_input+0x54c>)
 800cd80:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cd82:	4b24      	ldr	r3, [pc, #144]	; (800ce14 <tcp_input+0x550>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cd88:	4b23      	ldr	r3, [pc, #140]	; (800ce18 <tcp_input+0x554>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cd8e:	4b23      	ldr	r3, [pc, #140]	; (800ce1c <tcp_input+0x558>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cd94:	4b22      	ldr	r3, [pc, #136]	; (800ce20 <tcp_input+0x55c>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	f003 0308 	and.w	r3, r3, #8
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d006      	beq.n	800cdae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7b5b      	ldrb	r3, [r3, #13]
 800cda4:	f043 0301 	orr.w	r3, r3, #1
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d038      	beq.n	800ce28 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cdb6:	69f8      	ldr	r0, [r7, #28]
 800cdb8:	f7ff f93e 	bl	800c038 <tcp_process_refused_data>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f113 0f0d 	cmn.w	r3, #13
 800cdc2:	d007      	beq.n	800cdd4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d02d      	beq.n	800ce28 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cdcc:	4b15      	ldr	r3, [pc, #84]	; (800ce24 <tcp_input+0x560>)
 800cdce:	881b      	ldrh	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d029      	beq.n	800ce28 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f040 8104 	bne.w	800cfe6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cdde:	69f8      	ldr	r0, [r7, #28]
 800cde0:	f003 f9be 	bl	8010160 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cde4:	e0ff      	b.n	800cfe6 <tcp_input+0x722>
 800cde6:	bf00      	nop
 800cde8:	24005034 	.word	0x24005034
 800cdec:	24005418 	.word	0x24005418
 800cdf0:	0801564c 	.word	0x0801564c
 800cdf4:	08015778 	.word	0x08015778
 800cdf8:	08015698 	.word	0x08015698
 800cdfc:	240084d8 	.word	0x240084d8
 800ce00:	080157a4 	.word	0x080157a4
 800ce04:	240084e8 	.word	0x240084e8
 800ce08:	080157d0 	.word	0x080157d0
 800ce0c:	240084e0 	.word	0x240084e0
 800ce10:	24005024 	.word	0x24005024
 800ce14:	24005054 	.word	0x24005054
 800ce18:	24005051 	.word	0x24005051
 800ce1c:	2400504c 	.word	0x2400504c
 800ce20:	24005050 	.word	0x24005050
 800ce24:	2400504e 	.word	0x2400504e
      }
    }
    tcp_input_pcb = pcb;
 800ce28:	4a9c      	ldr	r2, [pc, #624]	; (800d09c <tcp_input+0x7d8>)
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ce2e:	69f8      	ldr	r0, [r7, #28]
 800ce30:	f000 fb0a 	bl	800d448 <tcp_process>
 800ce34:	4603      	mov	r3, r0
 800ce36:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ce38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce3c:	f113 0f0d 	cmn.w	r3, #13
 800ce40:	f000 80d3 	beq.w	800cfea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ce44:	4b96      	ldr	r3, [pc, #600]	; (800d0a0 <tcp_input+0x7dc>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f003 0308 	and.w	r3, r3, #8
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d015      	beq.n	800ce7c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d008      	beq.n	800ce6c <tcp_input+0x5a8>
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce60:	69fa      	ldr	r2, [r7, #28]
 800ce62:	6912      	ldr	r2, [r2, #16]
 800ce64:	f06f 010d 	mvn.w	r1, #13
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ce6c:	69f9      	ldr	r1, [r7, #28]
 800ce6e:	488d      	ldr	r0, [pc, #564]	; (800d0a4 <tcp_input+0x7e0>)
 800ce70:	f7ff fbb0 	bl	800c5d4 <tcp_pcb_remove>
        tcp_free(pcb);
 800ce74:	69f8      	ldr	r0, [r7, #28]
 800ce76:	f7fe f99d 	bl	800b1b4 <tcp_free>
 800ce7a:	e0c1      	b.n	800d000 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ce80:	4b89      	ldr	r3, [pc, #548]	; (800d0a8 <tcp_input+0x7e4>)
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d01d      	beq.n	800cec4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ce88:	4b87      	ldr	r3, [pc, #540]	; (800d0a8 <tcp_input+0x7e4>)
 800ce8a:	881b      	ldrh	r3, [r3, #0]
 800ce8c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <tcp_input+0x5ea>
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce9e:	69fa      	ldr	r2, [r7, #28]
 800cea0:	6910      	ldr	r0, [r2, #16]
 800cea2:	89fa      	ldrh	r2, [r7, #14]
 800cea4:	69f9      	ldr	r1, [r7, #28]
 800cea6:	4798      	blx	r3
 800cea8:	4603      	mov	r3, r0
 800ceaa:	74fb      	strb	r3, [r7, #19]
 800ceac:	e001      	b.n	800ceb2 <tcp_input+0x5ee>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ceb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ceb6:	f113 0f0d 	cmn.w	r3, #13
 800ceba:	f000 8098 	beq.w	800cfee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cebe:	4b7a      	ldr	r3, [pc, #488]	; (800d0a8 <tcp_input+0x7e4>)
 800cec0:	2200      	movs	r2, #0
 800cec2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cec4:	69f8      	ldr	r0, [r7, #28]
 800cec6:	f000 f907 	bl	800d0d8 <tcp_input_delayed_close>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f040 8090 	bne.w	800cff2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ced2:	4b76      	ldr	r3, [pc, #472]	; (800d0ac <tcp_input+0x7e8>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d041      	beq.n	800cf5e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d006      	beq.n	800cef0 <tcp_input+0x62c>
 800cee2:	4b73      	ldr	r3, [pc, #460]	; (800d0b0 <tcp_input+0x7ec>)
 800cee4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cee8:	4972      	ldr	r1, [pc, #456]	; (800d0b4 <tcp_input+0x7f0>)
 800ceea:	4873      	ldr	r0, [pc, #460]	; (800d0b8 <tcp_input+0x7f4>)
 800ceec:	f006 f9d6 	bl	801329c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	8b5b      	ldrh	r3, [r3, #26]
 800cef4:	f003 0310 	and.w	r3, r3, #16
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d008      	beq.n	800cf0e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cefc:	4b6b      	ldr	r3, [pc, #428]	; (800d0ac <tcp_input+0x7e8>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fd feab 	bl	800ac5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cf06:	69f8      	ldr	r0, [r7, #28]
 800cf08:	f7fe fc3c 	bl	800b784 <tcp_abort>
            goto aborted;
 800cf0c:	e078      	b.n	800d000 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00c      	beq.n	800cf32 <tcp_input+0x66e>
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	6918      	ldr	r0, [r3, #16]
 800cf22:	4b62      	ldr	r3, [pc, #392]	; (800d0ac <tcp_input+0x7e8>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	2300      	movs	r3, #0
 800cf28:	69f9      	ldr	r1, [r7, #28]
 800cf2a:	47a0      	blx	r4
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	74fb      	strb	r3, [r7, #19]
 800cf30:	e008      	b.n	800cf44 <tcp_input+0x680>
 800cf32:	4b5e      	ldr	r3, [pc, #376]	; (800d0ac <tcp_input+0x7e8>)
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	2300      	movs	r3, #0
 800cf38:	69f9      	ldr	r1, [r7, #28]
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	f7ff f952 	bl	800c1e4 <tcp_recv_null>
 800cf40:	4603      	mov	r3, r0
 800cf42:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cf44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf48:	f113 0f0d 	cmn.w	r3, #13
 800cf4c:	d053      	beq.n	800cff6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cf4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cf56:	4b55      	ldr	r3, [pc, #340]	; (800d0ac <tcp_input+0x7e8>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cf5e:	4b50      	ldr	r3, [pc, #320]	; (800d0a0 <tcp_input+0x7dc>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	f003 0320 	and.w	r3, r3, #32
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d030      	beq.n	800cfcc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d009      	beq.n	800cf86 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf76:	7b5a      	ldrb	r2, [r3, #13]
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf7c:	f042 0220 	orr.w	r2, r2, #32
 800cf80:	b2d2      	uxtb	r2, r2
 800cf82:	735a      	strb	r2, [r3, #13]
 800cf84:	e022      	b.n	800cfcc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf8a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf8e:	d005      	beq.n	800cf9c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf94:	3301      	adds	r3, #1
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00b      	beq.n	800cfbe <tcp_input+0x6fa>
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	6918      	ldr	r0, [r3, #16]
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	69f9      	ldr	r1, [r7, #28]
 800cfb6:	47a0      	blx	r4
 800cfb8:	4603      	mov	r3, r0
 800cfba:	74fb      	strb	r3, [r7, #19]
 800cfbc:	e001      	b.n	800cfc2 <tcp_input+0x6fe>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cfc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cfc6:	f113 0f0d 	cmn.w	r3, #13
 800cfca:	d016      	beq.n	800cffa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cfcc:	4b33      	ldr	r3, [pc, #204]	; (800d09c <tcp_input+0x7d8>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cfd2:	69f8      	ldr	r0, [r7, #28]
 800cfd4:	f000 f880 	bl	800d0d8 <tcp_input_delayed_close>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d10f      	bne.n	800cffe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cfde:	69f8      	ldr	r0, [r7, #28]
 800cfe0:	f002 fab8 	bl	800f554 <tcp_output>
 800cfe4:	e00c      	b.n	800d000 <tcp_input+0x73c>
        goto aborted;
 800cfe6:	bf00      	nop
 800cfe8:	e00a      	b.n	800d000 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cfea:	bf00      	nop
 800cfec:	e008      	b.n	800d000 <tcp_input+0x73c>
              goto aborted;
 800cfee:	bf00      	nop
 800cff0:	e006      	b.n	800d000 <tcp_input+0x73c>
          goto aborted;
 800cff2:	bf00      	nop
 800cff4:	e004      	b.n	800d000 <tcp_input+0x73c>
            goto aborted;
 800cff6:	bf00      	nop
 800cff8:	e002      	b.n	800d000 <tcp_input+0x73c>
              goto aborted;
 800cffa:	bf00      	nop
 800cffc:	e000      	b.n	800d000 <tcp_input+0x73c>
          goto aborted;
 800cffe:	bf00      	nop
    tcp_input_pcb = NULL;
 800d000:	4b26      	ldr	r3, [pc, #152]	; (800d09c <tcp_input+0x7d8>)
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d006:	4b29      	ldr	r3, [pc, #164]	; (800d0ac <tcp_input+0x7e8>)
 800d008:	2200      	movs	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d00c:	4b2b      	ldr	r3, [pc, #172]	; (800d0bc <tcp_input+0x7f8>)
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d03f      	beq.n	800d094 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d014:	4b29      	ldr	r3, [pc, #164]	; (800d0bc <tcp_input+0x7f8>)
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fd fe1f 	bl	800ac5c <pbuf_free>
      inseg.p = NULL;
 800d01e:	4b27      	ldr	r3, [pc, #156]	; (800d0bc <tcp_input+0x7f8>)
 800d020:	2200      	movs	r2, #0
 800d022:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d024:	e036      	b.n	800d094 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d026:	4b26      	ldr	r3, [pc, #152]	; (800d0c0 <tcp_input+0x7fc>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	899b      	ldrh	r3, [r3, #12]
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fc fa26 	bl	8009480 <lwip_htons>
 800d034:	4603      	mov	r3, r0
 800d036:	b2db      	uxtb	r3, r3
 800d038:	f003 0304 	and.w	r3, r3, #4
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d118      	bne.n	800d072 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d040:	4b20      	ldr	r3, [pc, #128]	; (800d0c4 <tcp_input+0x800>)
 800d042:	6819      	ldr	r1, [r3, #0]
 800d044:	4b20      	ldr	r3, [pc, #128]	; (800d0c8 <tcp_input+0x804>)
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	461a      	mov	r2, r3
 800d04a:	4b20      	ldr	r3, [pc, #128]	; (800d0cc <tcp_input+0x808>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d050:	4b1b      	ldr	r3, [pc, #108]	; (800d0c0 <tcp_input+0x7fc>)
 800d052:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d054:	885b      	ldrh	r3, [r3, #2]
 800d056:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d058:	4a19      	ldr	r2, [pc, #100]	; (800d0c0 <tcp_input+0x7fc>)
 800d05a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d05c:	8812      	ldrh	r2, [r2, #0]
 800d05e:	b292      	uxth	r2, r2
 800d060:	9202      	str	r2, [sp, #8]
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	4b1a      	ldr	r3, [pc, #104]	; (800d0d0 <tcp_input+0x80c>)
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	4b1a      	ldr	r3, [pc, #104]	; (800d0d4 <tcp_input+0x810>)
 800d06a:	4602      	mov	r2, r0
 800d06c:	2000      	movs	r0, #0
 800d06e:	f003 f825 	bl	80100bc <tcp_rst>
    pbuf_free(p);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f7fd fdf2 	bl	800ac5c <pbuf_free>
  return;
 800d078:	e00c      	b.n	800d094 <tcp_input+0x7d0>
    goto dropped;
 800d07a:	bf00      	nop
 800d07c:	e006      	b.n	800d08c <tcp_input+0x7c8>
    goto dropped;
 800d07e:	bf00      	nop
 800d080:	e004      	b.n	800d08c <tcp_input+0x7c8>
    goto dropped;
 800d082:	bf00      	nop
 800d084:	e002      	b.n	800d08c <tcp_input+0x7c8>
      goto dropped;
 800d086:	bf00      	nop
 800d088:	e000      	b.n	800d08c <tcp_input+0x7c8>
      goto dropped;
 800d08a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7fd fde5 	bl	800ac5c <pbuf_free>
 800d092:	e000      	b.n	800d096 <tcp_input+0x7d2>
  return;
 800d094:	bf00      	nop
}
 800d096:	3724      	adds	r7, #36	; 0x24
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd90      	pop	{r4, r7, pc}
 800d09c:	240084ec 	.word	0x240084ec
 800d0a0:	24005051 	.word	0x24005051
 800d0a4:	240084d8 	.word	0x240084d8
 800d0a8:	2400504c 	.word	0x2400504c
 800d0ac:	24005054 	.word	0x24005054
 800d0b0:	0801564c 	.word	0x0801564c
 800d0b4:	08015800 	.word	0x08015800
 800d0b8:	08015698 	.word	0x08015698
 800d0bc:	24005024 	.word	0x24005024
 800d0c0:	24005034 	.word	0x24005034
 800d0c4:	24005048 	.word	0x24005048
 800d0c8:	2400504e 	.word	0x2400504e
 800d0cc:	24005044 	.word	0x24005044
 800d0d0:	24005428 	.word	0x24005428
 800d0d4:	2400542c 	.word	0x2400542c

0800d0d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <tcp_input_delayed_close+0x1c>
 800d0e6:	4b17      	ldr	r3, [pc, #92]	; (800d144 <tcp_input_delayed_close+0x6c>)
 800d0e8:	f240 225a 	movw	r2, #602	; 0x25a
 800d0ec:	4916      	ldr	r1, [pc, #88]	; (800d148 <tcp_input_delayed_close+0x70>)
 800d0ee:	4817      	ldr	r0, [pc, #92]	; (800d14c <tcp_input_delayed_close+0x74>)
 800d0f0:	f006 f8d4 	bl	801329c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d0f4:	4b16      	ldr	r3, [pc, #88]	; (800d150 <tcp_input_delayed_close+0x78>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	f003 0310 	and.w	r3, r3, #16
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d01c      	beq.n	800d13a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	8b5b      	ldrh	r3, [r3, #26]
 800d104:	f003 0310 	and.w	r3, r3, #16
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10d      	bne.n	800d128 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d112:	2b00      	cmp	r3, #0
 800d114:	d008      	beq.n	800d128 <tcp_input_delayed_close+0x50>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	6912      	ldr	r2, [r2, #16]
 800d120:	f06f 010e 	mvn.w	r1, #14
 800d124:	4610      	mov	r0, r2
 800d126:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d128:	6879      	ldr	r1, [r7, #4]
 800d12a:	480a      	ldr	r0, [pc, #40]	; (800d154 <tcp_input_delayed_close+0x7c>)
 800d12c:	f7ff fa52 	bl	800c5d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7fe f83f 	bl	800b1b4 <tcp_free>
    return 1;
 800d136:	2301      	movs	r3, #1
 800d138:	e000      	b.n	800d13c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	0801564c 	.word	0x0801564c
 800d148:	0801581c 	.word	0x0801581c
 800d14c:	08015698 	.word	0x08015698
 800d150:	24005051 	.word	0x24005051
 800d154:	240084d8 	.word	0x240084d8

0800d158 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d158:	b590      	push	{r4, r7, lr}
 800d15a:	b08b      	sub	sp, #44	; 0x2c
 800d15c:	af04      	add	r7, sp, #16
 800d15e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d160:	4b6f      	ldr	r3, [pc, #444]	; (800d320 <tcp_listen_input+0x1c8>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	f003 0304 	and.w	r3, r3, #4
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f040 80d2 	bne.w	800d312 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <tcp_listen_input+0x2a>
 800d174:	4b6b      	ldr	r3, [pc, #428]	; (800d324 <tcp_listen_input+0x1cc>)
 800d176:	f240 2281 	movw	r2, #641	; 0x281
 800d17a:	496b      	ldr	r1, [pc, #428]	; (800d328 <tcp_listen_input+0x1d0>)
 800d17c:	486b      	ldr	r0, [pc, #428]	; (800d32c <tcp_listen_input+0x1d4>)
 800d17e:	f006 f88d 	bl	801329c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d182:	4b67      	ldr	r3, [pc, #412]	; (800d320 <tcp_listen_input+0x1c8>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	f003 0310 	and.w	r3, r3, #16
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d019      	beq.n	800d1c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d18e:	4b68      	ldr	r3, [pc, #416]	; (800d330 <tcp_listen_input+0x1d8>)
 800d190:	6819      	ldr	r1, [r3, #0]
 800d192:	4b68      	ldr	r3, [pc, #416]	; (800d334 <tcp_listen_input+0x1dc>)
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	4b67      	ldr	r3, [pc, #412]	; (800d338 <tcp_listen_input+0x1e0>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d19e:	4b67      	ldr	r3, [pc, #412]	; (800d33c <tcp_listen_input+0x1e4>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1a2:	885b      	ldrh	r3, [r3, #2]
 800d1a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d1a6:	4a65      	ldr	r2, [pc, #404]	; (800d33c <tcp_listen_input+0x1e4>)
 800d1a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1aa:	8812      	ldrh	r2, [r2, #0]
 800d1ac:	b292      	uxth	r2, r2
 800d1ae:	9202      	str	r2, [sp, #8]
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	4b63      	ldr	r3, [pc, #396]	; (800d340 <tcp_listen_input+0x1e8>)
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	4b63      	ldr	r3, [pc, #396]	; (800d344 <tcp_listen_input+0x1ec>)
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f002 ff7e 	bl	80100bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d1c0:	e0a9      	b.n	800d316 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d1c2:	4b57      	ldr	r3, [pc, #348]	; (800d320 <tcp_listen_input+0x1c8>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	f003 0302 	and.w	r3, r3, #2
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 80a3 	beq.w	800d316 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	7d5b      	ldrb	r3, [r3, #21]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7ff f929 	bl	800c42c <tcp_alloc>
 800d1da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d111      	bne.n	800d206 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	699b      	ldr	r3, [r3, #24]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00a      	beq.n	800d200 <tcp_listen_input+0xa8>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	6910      	ldr	r0, [r2, #16]
 800d1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	4798      	blx	r3
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	73bb      	strb	r3, [r7, #14]
      return;
 800d1fe:	e08b      	b.n	800d318 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d200:	23f0      	movs	r3, #240	; 0xf0
 800d202:	73bb      	strb	r3, [r7, #14]
      return;
 800d204:	e088      	b.n	800d318 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d206:	4b50      	ldr	r3, [pc, #320]	; (800d348 <tcp_listen_input+0x1f0>)
 800d208:	695a      	ldr	r2, [r3, #20]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d20e:	4b4e      	ldr	r3, [pc, #312]	; (800d348 <tcp_listen_input+0x1f0>)
 800d210:	691a      	ldr	r2, [r3, #16]
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	8ada      	ldrh	r2, [r3, #22]
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d21e:	4b47      	ldr	r3, [pc, #284]	; (800d33c <tcp_listen_input+0x1e4>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	b29a      	uxth	r2, r3
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	2203      	movs	r2, #3
 800d22e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d230:	4b41      	ldr	r3, [pc, #260]	; (800d338 <tcp_listen_input+0x1e0>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d242:	6978      	ldr	r0, [r7, #20]
 800d244:	f7ff fa5a 	bl	800c6fc <tcp_next_iss>
 800d248:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	693a      	ldr	r2, [r7, #16]
 800d254:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d262:	4b35      	ldr	r3, [pc, #212]	; (800d338 <tcp_listen_input+0x1e0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	1e5a      	subs	r2, r3, #1
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	691a      	ldr	r2, [r3, #16]
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	7a5b      	ldrb	r3, [r3, #9]
 800d27e:	f003 030c 	and.w	r3, r3, #12
 800d282:	b2da      	uxtb	r2, r3
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	7a1a      	ldrb	r2, [r3, #8]
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d290:	4b2e      	ldr	r3, [pc, #184]	; (800d34c <tcp_listen_input+0x1f4>)
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	60da      	str	r2, [r3, #12]
 800d298:	4a2c      	ldr	r2, [pc, #176]	; (800d34c <tcp_listen_input+0x1f4>)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	f003 f8cf 	bl	8010440 <tcp_timer_needed>
 800d2a2:	4b2b      	ldr	r3, [pc, #172]	; (800d350 <tcp_listen_input+0x1f8>)
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d2a8:	6978      	ldr	r0, [r7, #20]
 800d2aa:	f001 fd8d 	bl	800edc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d2ae:	4b23      	ldr	r3, [pc, #140]	; (800d33c <tcp_listen_input+0x1e4>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	89db      	ldrh	r3, [r3, #14]
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f004 fcc3 	bl	8011c5c <ip4_route>
 800d2d6:	4601      	mov	r1, r0
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	461a      	mov	r2, r3
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f7ff fa32 	bl	800c748 <tcp_eff_send_mss_netif>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d2ec:	2112      	movs	r1, #18
 800d2ee:	6978      	ldr	r0, [r7, #20]
 800d2f0:	f002 f842 	bl	800f378 <tcp_enqueue_flags>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d2f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d004      	beq.n	800d30a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d300:	2100      	movs	r1, #0
 800d302:	6978      	ldr	r0, [r7, #20]
 800d304:	f7fe f980 	bl	800b608 <tcp_abandon>
      return;
 800d308:	e006      	b.n	800d318 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d30a:	6978      	ldr	r0, [r7, #20]
 800d30c:	f002 f922 	bl	800f554 <tcp_output>
  return;
 800d310:	e001      	b.n	800d316 <tcp_listen_input+0x1be>
    return;
 800d312:	bf00      	nop
 800d314:	e000      	b.n	800d318 <tcp_listen_input+0x1c0>
  return;
 800d316:	bf00      	nop
}
 800d318:	371c      	adds	r7, #28
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd90      	pop	{r4, r7, pc}
 800d31e:	bf00      	nop
 800d320:	24005050 	.word	0x24005050
 800d324:	0801564c 	.word	0x0801564c
 800d328:	08015844 	.word	0x08015844
 800d32c:	08015698 	.word	0x08015698
 800d330:	24005048 	.word	0x24005048
 800d334:	2400504e 	.word	0x2400504e
 800d338:	24005044 	.word	0x24005044
 800d33c:	24005034 	.word	0x24005034
 800d340:	24005428 	.word	0x24005428
 800d344:	2400542c 	.word	0x2400542c
 800d348:	24005418 	.word	0x24005418
 800d34c:	240084d8 	.word	0x240084d8
 800d350:	240084d4 	.word	0x240084d4

0800d354 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af04      	add	r7, sp, #16
 800d35a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d35c:	4b2f      	ldr	r3, [pc, #188]	; (800d41c <tcp_timewait_input+0xc8>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d153      	bne.n	800d410 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d106      	bne.n	800d37c <tcp_timewait_input+0x28>
 800d36e:	4b2c      	ldr	r3, [pc, #176]	; (800d420 <tcp_timewait_input+0xcc>)
 800d370:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d374:	492b      	ldr	r1, [pc, #172]	; (800d424 <tcp_timewait_input+0xd0>)
 800d376:	482c      	ldr	r0, [pc, #176]	; (800d428 <tcp_timewait_input+0xd4>)
 800d378:	f005 ff90 	bl	801329c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d37c:	4b27      	ldr	r3, [pc, #156]	; (800d41c <tcp_timewait_input+0xc8>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	f003 0302 	and.w	r3, r3, #2
 800d384:	2b00      	cmp	r3, #0
 800d386:	d02a      	beq.n	800d3de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d388:	4b28      	ldr	r3, [pc, #160]	; (800d42c <tcp_timewait_input+0xd8>)
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	2b00      	cmp	r3, #0
 800d394:	db2d      	blt.n	800d3f2 <tcp_timewait_input+0x9e>
 800d396:	4b25      	ldr	r3, [pc, #148]	; (800d42c <tcp_timewait_input+0xd8>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3a2:	440b      	add	r3, r1
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dc23      	bgt.n	800d3f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3aa:	4b21      	ldr	r3, [pc, #132]	; (800d430 <tcp_timewait_input+0xdc>)
 800d3ac:	6819      	ldr	r1, [r3, #0]
 800d3ae:	4b21      	ldr	r3, [pc, #132]	; (800d434 <tcp_timewait_input+0xe0>)
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	4b1d      	ldr	r3, [pc, #116]	; (800d42c <tcp_timewait_input+0xd8>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <tcp_timewait_input+0xe4>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3be:	885b      	ldrh	r3, [r3, #2]
 800d3c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3c2:	4a1d      	ldr	r2, [pc, #116]	; (800d438 <tcp_timewait_input+0xe4>)
 800d3c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3c6:	8812      	ldrh	r2, [r2, #0]
 800d3c8:	b292      	uxth	r2, r2
 800d3ca:	9202      	str	r2, [sp, #8]
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	4b1b      	ldr	r3, [pc, #108]	; (800d43c <tcp_timewait_input+0xe8>)
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	4b1b      	ldr	r3, [pc, #108]	; (800d440 <tcp_timewait_input+0xec>)
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f002 fe70 	bl	80100bc <tcp_rst>
      return;
 800d3dc:	e01b      	b.n	800d416 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d3de:	4b0f      	ldr	r3, [pc, #60]	; (800d41c <tcp_timewait_input+0xc8>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d003      	beq.n	800d3f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d3ea:	4b16      	ldr	r3, [pc, #88]	; (800d444 <tcp_timewait_input+0xf0>)
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d3f2:	4b10      	ldr	r3, [pc, #64]	; (800d434 <tcp_timewait_input+0xe0>)
 800d3f4:	881b      	ldrh	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00c      	beq.n	800d414 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	8b5b      	ldrh	r3, [r3, #26]
 800d3fe:	f043 0302 	orr.w	r3, r3, #2
 800d402:	b29a      	uxth	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f002 f8a3 	bl	800f554 <tcp_output>
  }
  return;
 800d40e:	e001      	b.n	800d414 <tcp_timewait_input+0xc0>
    return;
 800d410:	bf00      	nop
 800d412:	e000      	b.n	800d416 <tcp_timewait_input+0xc2>
  return;
 800d414:	bf00      	nop
}
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	24005050 	.word	0x24005050
 800d420:	0801564c 	.word	0x0801564c
 800d424:	08015864 	.word	0x08015864
 800d428:	08015698 	.word	0x08015698
 800d42c:	24005044 	.word	0x24005044
 800d430:	24005048 	.word	0x24005048
 800d434:	2400504e 	.word	0x2400504e
 800d438:	24005034 	.word	0x24005034
 800d43c:	24005428 	.word	0x24005428
 800d440:	2400542c 	.word	0x2400542c
 800d444:	240084dc 	.word	0x240084dc

0800d448 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d448:	b590      	push	{r4, r7, lr}
 800d44a:	b08d      	sub	sp, #52	; 0x34
 800d44c:	af04      	add	r7, sp, #16
 800d44e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d454:	2300      	movs	r3, #0
 800d456:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d106      	bne.n	800d46c <tcp_process+0x24>
 800d45e:	4ba5      	ldr	r3, [pc, #660]	; (800d6f4 <tcp_process+0x2ac>)
 800d460:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d464:	49a4      	ldr	r1, [pc, #656]	; (800d6f8 <tcp_process+0x2b0>)
 800d466:	48a5      	ldr	r0, [pc, #660]	; (800d6fc <tcp_process+0x2b4>)
 800d468:	f005 ff18 	bl	801329c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d46c:	4ba4      	ldr	r3, [pc, #656]	; (800d700 <tcp_process+0x2b8>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	f003 0304 	and.w	r3, r3, #4
 800d474:	2b00      	cmp	r3, #0
 800d476:	d04e      	beq.n	800d516 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	7d1b      	ldrb	r3, [r3, #20]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d108      	bne.n	800d492 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d484:	4b9f      	ldr	r3, [pc, #636]	; (800d704 <tcp_process+0x2bc>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d123      	bne.n	800d4d4 <tcp_process+0x8c>
        acceptable = 1;
 800d48c:	2301      	movs	r3, #1
 800d48e:	76fb      	strb	r3, [r7, #27]
 800d490:	e020      	b.n	800d4d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d496:	4b9c      	ldr	r3, [pc, #624]	; (800d708 <tcp_process+0x2c0>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d102      	bne.n	800d4a4 <tcp_process+0x5c>
        acceptable = 1;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	76fb      	strb	r3, [r7, #27]
 800d4a2:	e017      	b.n	800d4d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d4a4:	4b98      	ldr	r3, [pc, #608]	; (800d708 <tcp_process+0x2c0>)
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	db10      	blt.n	800d4d4 <tcp_process+0x8c>
 800d4b2:	4b95      	ldr	r3, [pc, #596]	; (800d708 <tcp_process+0x2c0>)
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	6879      	ldr	r1, [r7, #4]
 800d4bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4be:	440b      	add	r3, r1
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	dc06      	bgt.n	800d4d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	8b5b      	ldrh	r3, [r3, #26]
 800d4ca:	f043 0302 	orr.w	r3, r3, #2
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d4d4:	7efb      	ldrb	r3, [r7, #27]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d01b      	beq.n	800d512 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <tcp_process+0xa8>
 800d4e2:	4b84      	ldr	r3, [pc, #528]	; (800d6f4 <tcp_process+0x2ac>)
 800d4e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d4e8:	4988      	ldr	r1, [pc, #544]	; (800d70c <tcp_process+0x2c4>)
 800d4ea:	4884      	ldr	r0, [pc, #528]	; (800d6fc <tcp_process+0x2b4>)
 800d4ec:	f005 fed6 	bl	801329c <iprintf>
      recv_flags |= TF_RESET;
 800d4f0:	4b87      	ldr	r3, [pc, #540]	; (800d710 <tcp_process+0x2c8>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	f043 0308 	orr.w	r3, r3, #8
 800d4f8:	b2da      	uxtb	r2, r3
 800d4fa:	4b85      	ldr	r3, [pc, #532]	; (800d710 <tcp_process+0x2c8>)
 800d4fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	8b5b      	ldrh	r3, [r3, #26]
 800d502:	f023 0301 	bic.w	r3, r3, #1
 800d506:	b29a      	uxth	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d50c:	f06f 030d 	mvn.w	r3, #13
 800d510:	e37a      	b.n	800dc08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d512:	2300      	movs	r3, #0
 800d514:	e378      	b.n	800dc08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d516:	4b7a      	ldr	r3, [pc, #488]	; (800d700 <tcp_process+0x2b8>)
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	f003 0302 	and.w	r3, r3, #2
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d010      	beq.n	800d544 <tcp_process+0xfc>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	7d1b      	ldrb	r3, [r3, #20]
 800d526:	2b02      	cmp	r3, #2
 800d528:	d00c      	beq.n	800d544 <tcp_process+0xfc>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7d1b      	ldrb	r3, [r3, #20]
 800d52e:	2b03      	cmp	r3, #3
 800d530:	d008      	beq.n	800d544 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	8b5b      	ldrh	r3, [r3, #26]
 800d536:	f043 0302 	orr.w	r3, r3, #2
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	e361      	b.n	800dc08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	8b5b      	ldrh	r3, [r3, #26]
 800d548:	f003 0310 	and.w	r3, r3, #16
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d103      	bne.n	800d558 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d550:	4b70      	ldr	r3, [pc, #448]	; (800d714 <tcp_process+0x2cc>)
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f001 fc2d 	bl	800edc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	7d1b      	ldrb	r3, [r3, #20]
 800d572:	3b02      	subs	r3, #2
 800d574:	2b07      	cmp	r3, #7
 800d576:	f200 8337 	bhi.w	800dbe8 <tcp_process+0x7a0>
 800d57a:	a201      	add	r2, pc, #4	; (adr r2, 800d580 <tcp_process+0x138>)
 800d57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d580:	0800d5a1 	.word	0x0800d5a1
 800d584:	0800d7d1 	.word	0x0800d7d1
 800d588:	0800d949 	.word	0x0800d949
 800d58c:	0800d973 	.word	0x0800d973
 800d590:	0800da97 	.word	0x0800da97
 800d594:	0800d949 	.word	0x0800d949
 800d598:	0800db23 	.word	0x0800db23
 800d59c:	0800dbb3 	.word	0x0800dbb3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d5a0:	4b57      	ldr	r3, [pc, #348]	; (800d700 <tcp_process+0x2b8>)
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	f003 0310 	and.w	r3, r3, #16
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 80e4 	beq.w	800d776 <tcp_process+0x32e>
 800d5ae:	4b54      	ldr	r3, [pc, #336]	; (800d700 <tcp_process+0x2b8>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f000 80dd 	beq.w	800d776 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	4b50      	ldr	r3, [pc, #320]	; (800d704 <tcp_process+0x2bc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	f040 80d5 	bne.w	800d776 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d5cc:	4b4e      	ldr	r3, [pc, #312]	; (800d708 <tcp_process+0x2c0>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d5de:	4b49      	ldr	r3, [pc, #292]	; (800d704 <tcp_process+0x2bc>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d5e6:	4b4c      	ldr	r3, [pc, #304]	; (800d718 <tcp_process+0x2d0>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	89db      	ldrh	r3, [r3, #14]
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d600:	4b41      	ldr	r3, [pc, #260]	; (800d708 <tcp_process+0x2c0>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	1e5a      	subs	r2, r3, #1
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2204      	movs	r2, #4
 800d60e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	3304      	adds	r3, #4
 800d618:	4618      	mov	r0, r3
 800d61a:	f004 fb1f 	bl	8011c5c <ip4_route>
 800d61e:	4601      	mov	r1, r0
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	3304      	adds	r3, #4
 800d624:	461a      	mov	r2, r3
 800d626:	4620      	mov	r0, r4
 800d628:	f7ff f88e 	bl	800c748 <tcp_eff_send_mss_netif>
 800d62c:	4603      	mov	r3, r0
 800d62e:	461a      	mov	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d638:	009a      	lsls	r2, r3, #2
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	f241 111c 	movw	r1, #4380	; 0x111c
 800d644:	428b      	cmp	r3, r1
 800d646:	bf38      	it	cc
 800d648:	460b      	movcc	r3, r1
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d204      	bcs.n	800d658 <tcp_process+0x210>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	b29b      	uxth	r3, r3
 800d656:	e00d      	b.n	800d674 <tcp_process+0x22c>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	f241 121c 	movw	r2, #4380	; 0x111c
 800d662:	4293      	cmp	r3, r2
 800d664:	d904      	bls.n	800d670 <tcp_process+0x228>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d66a:	005b      	lsls	r3, r3, #1
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	e001      	b.n	800d674 <tcp_process+0x22c>
 800d670:	f241 131c 	movw	r3, #4380	; 0x111c
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d680:	2b00      	cmp	r3, #0
 800d682:	d106      	bne.n	800d692 <tcp_process+0x24a>
 800d684:	4b1b      	ldr	r3, [pc, #108]	; (800d6f4 <tcp_process+0x2ac>)
 800d686:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d68a:	4924      	ldr	r1, [pc, #144]	; (800d71c <tcp_process+0x2d4>)
 800d68c:	481b      	ldr	r0, [pc, #108]	; (800d6fc <tcp_process+0x2b4>)
 800d68e:	f005 fe05 	bl	801329c <iprintf>
        --pcb->snd_queuelen;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d698:	3b01      	subs	r3, #1
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d111      	bne.n	800d6d2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d106      	bne.n	800d6c8 <tcp_process+0x280>
 800d6ba:	4b0e      	ldr	r3, [pc, #56]	; (800d6f4 <tcp_process+0x2ac>)
 800d6bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d6c0:	4917      	ldr	r1, [pc, #92]	; (800d720 <tcp_process+0x2d8>)
 800d6c2:	480e      	ldr	r0, [pc, #56]	; (800d6fc <tcp_process+0x2b4>)
 800d6c4:	f005 fdea 	bl	801329c <iprintf>
          pcb->unsent = rseg->next;
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	66da      	str	r2, [r3, #108]	; 0x6c
 800d6d0:	e003      	b.n	800d6da <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d6da:	69f8      	ldr	r0, [r7, #28]
 800d6dc:	f7fe fd3d 	bl	800c15a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d11d      	bne.n	800d724 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6ee:	861a      	strh	r2, [r3, #48]	; 0x30
 800d6f0:	e01f      	b.n	800d732 <tcp_process+0x2ea>
 800d6f2:	bf00      	nop
 800d6f4:	0801564c 	.word	0x0801564c
 800d6f8:	08015884 	.word	0x08015884
 800d6fc:	08015698 	.word	0x08015698
 800d700:	24005050 	.word	0x24005050
 800d704:	24005048 	.word	0x24005048
 800d708:	24005044 	.word	0x24005044
 800d70c:	080158a0 	.word	0x080158a0
 800d710:	24005051 	.word	0x24005051
 800d714:	240084dc 	.word	0x240084dc
 800d718:	24005034 	.word	0x24005034
 800d71c:	080158c0 	.word	0x080158c0
 800d720:	080158d8 	.word	0x080158d8
        } else {
          pcb->rtime = 0;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00a      	beq.n	800d752 <tcp_process+0x30a>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	6910      	ldr	r0, [r2, #16]
 800d746:	2200      	movs	r2, #0
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	4798      	blx	r3
 800d74c:	4603      	mov	r3, r0
 800d74e:	76bb      	strb	r3, [r7, #26]
 800d750:	e001      	b.n	800d756 <tcp_process+0x30e>
 800d752:	2300      	movs	r3, #0
 800d754:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d756:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d75a:	f113 0f0d 	cmn.w	r3, #13
 800d75e:	d102      	bne.n	800d766 <tcp_process+0x31e>
          return ERR_ABRT;
 800d760:	f06f 030c 	mvn.w	r3, #12
 800d764:	e250      	b.n	800dc08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	8b5b      	ldrh	r3, [r3, #26]
 800d76a:	f043 0302 	orr.w	r3, r3, #2
 800d76e:	b29a      	uxth	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d774:	e23a      	b.n	800dbec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d776:	4b9d      	ldr	r3, [pc, #628]	; (800d9ec <tcp_process+0x5a4>)
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	f003 0310 	and.w	r3, r3, #16
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f000 8234 	beq.w	800dbec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d784:	4b9a      	ldr	r3, [pc, #616]	; (800d9f0 <tcp_process+0x5a8>)
 800d786:	6819      	ldr	r1, [r3, #0]
 800d788:	4b9a      	ldr	r3, [pc, #616]	; (800d9f4 <tcp_process+0x5ac>)
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	4b9a      	ldr	r3, [pc, #616]	; (800d9f8 <tcp_process+0x5b0>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d794:	4b99      	ldr	r3, [pc, #612]	; (800d9fc <tcp_process+0x5b4>)
 800d796:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d798:	885b      	ldrh	r3, [r3, #2]
 800d79a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d79c:	4a97      	ldr	r2, [pc, #604]	; (800d9fc <tcp_process+0x5b4>)
 800d79e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7a0:	8812      	ldrh	r2, [r2, #0]
 800d7a2:	b292      	uxth	r2, r2
 800d7a4:	9202      	str	r2, [sp, #8]
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	4b95      	ldr	r3, [pc, #596]	; (800da00 <tcp_process+0x5b8>)
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	4b95      	ldr	r3, [pc, #596]	; (800da04 <tcp_process+0x5bc>)
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f002 fc83 	bl	80100bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7bc:	2b05      	cmp	r3, #5
 800d7be:	f200 8215 	bhi.w	800dbec <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f002 fa4d 	bl	800fc68 <tcp_rexmit_rto>
      break;
 800d7ce:	e20d      	b.n	800dbec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d7d0:	4b86      	ldr	r3, [pc, #536]	; (800d9ec <tcp_process+0x5a4>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	f003 0310 	and.w	r3, r3, #16
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 80a1 	beq.w	800d920 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7de:	4b84      	ldr	r3, [pc, #528]	; (800d9f0 <tcp_process+0x5a8>)
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	db7e      	blt.n	800d8ec <tcp_process+0x4a4>
 800d7ee:	4b80      	ldr	r3, [pc, #512]	; (800d9f0 <tcp_process+0x5a8>)
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	dc77      	bgt.n	800d8ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2204      	movs	r2, #4
 800d800:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d80a:	23fa      	movs	r3, #250	; 0xfa
 800d80c:	76bb      	strb	r3, [r7, #26]
 800d80e:	e01d      	b.n	800d84c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d814:	699b      	ldr	r3, [r3, #24]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <tcp_process+0x3e0>
 800d81a:	4b7b      	ldr	r3, [pc, #492]	; (800da08 <tcp_process+0x5c0>)
 800d81c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d820:	497a      	ldr	r1, [pc, #488]	; (800da0c <tcp_process+0x5c4>)
 800d822:	487b      	ldr	r0, [pc, #492]	; (800da10 <tcp_process+0x5c8>)
 800d824:	f005 fd3a 	bl	801329c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d82c:	699b      	ldr	r3, [r3, #24]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00a      	beq.n	800d848 <tcp_process+0x400>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	6910      	ldr	r0, [r2, #16]
 800d83c:	2200      	movs	r2, #0
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	4798      	blx	r3
 800d842:	4603      	mov	r3, r0
 800d844:	76bb      	strb	r3, [r7, #26]
 800d846:	e001      	b.n	800d84c <tcp_process+0x404>
 800d848:	23f0      	movs	r3, #240	; 0xf0
 800d84a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d84c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00a      	beq.n	800d86a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d854:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d858:	f113 0f0d 	cmn.w	r3, #13
 800d85c:	d002      	beq.n	800d864 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7fd ff90 	bl	800b784 <tcp_abort>
            }
            return ERR_ABRT;
 800d864:	f06f 030c 	mvn.w	r3, #12
 800d868:	e1ce      	b.n	800dc08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 fae0 	bl	800de30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d870:	4b68      	ldr	r3, [pc, #416]	; (800da14 <tcp_process+0x5cc>)
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d005      	beq.n	800d884 <tcp_process+0x43c>
            recv_acked--;
 800d878:	4b66      	ldr	r3, [pc, #408]	; (800da14 <tcp_process+0x5cc>)
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	b29a      	uxth	r2, r3
 800d880:	4b64      	ldr	r3, [pc, #400]	; (800da14 <tcp_process+0x5cc>)
 800d882:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d888:	009a      	lsls	r2, r3, #2
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d88e:	005b      	lsls	r3, r3, #1
 800d890:	f241 111c 	movw	r1, #4380	; 0x111c
 800d894:	428b      	cmp	r3, r1
 800d896:	bf38      	it	cc
 800d898:	460b      	movcc	r3, r1
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d204      	bcs.n	800d8a8 <tcp_process+0x460>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	e00d      	b.n	800d8c4 <tcp_process+0x47c>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	f241 121c 	movw	r2, #4380	; 0x111c
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d904      	bls.n	800d8c0 <tcp_process+0x478>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	e001      	b.n	800d8c4 <tcp_process+0x47c>
 800d8c0:	f241 131c 	movw	r3, #4380	; 0x111c
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d8ca:	4b53      	ldr	r3, [pc, #332]	; (800da18 <tcp_process+0x5d0>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	f003 0320 	and.w	r3, r3, #32
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d037      	beq.n	800d946 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	8b5b      	ldrh	r3, [r3, #26]
 800d8da:	f043 0302 	orr.w	r3, r3, #2
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2207      	movs	r2, #7
 800d8e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d8ea:	e02c      	b.n	800d946 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8ec:	4b40      	ldr	r3, [pc, #256]	; (800d9f0 <tcp_process+0x5a8>)
 800d8ee:	6819      	ldr	r1, [r3, #0]
 800d8f0:	4b40      	ldr	r3, [pc, #256]	; (800d9f4 <tcp_process+0x5ac>)
 800d8f2:	881b      	ldrh	r3, [r3, #0]
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	4b40      	ldr	r3, [pc, #256]	; (800d9f8 <tcp_process+0x5b0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8fc:	4b3f      	ldr	r3, [pc, #252]	; (800d9fc <tcp_process+0x5b4>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d900:	885b      	ldrh	r3, [r3, #2]
 800d902:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d904:	4a3d      	ldr	r2, [pc, #244]	; (800d9fc <tcp_process+0x5b4>)
 800d906:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d908:	8812      	ldrh	r2, [r2, #0]
 800d90a:	b292      	uxth	r2, r2
 800d90c:	9202      	str	r2, [sp, #8]
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	4b3b      	ldr	r3, [pc, #236]	; (800da00 <tcp_process+0x5b8>)
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	4b3b      	ldr	r3, [pc, #236]	; (800da04 <tcp_process+0x5bc>)
 800d916:	4602      	mov	r2, r0
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f002 fbcf 	bl	80100bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d91e:	e167      	b.n	800dbf0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d920:	4b32      	ldr	r3, [pc, #200]	; (800d9ec <tcp_process+0x5a4>)
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	f003 0302 	and.w	r3, r3, #2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f000 8161 	beq.w	800dbf0 <tcp_process+0x7a8>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d932:	1e5a      	subs	r2, r3, #1
 800d934:	4b30      	ldr	r3, [pc, #192]	; (800d9f8 <tcp_process+0x5b0>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	f040 8159 	bne.w	800dbf0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f002 f9b4 	bl	800fcac <tcp_rexmit>
      break;
 800d944:	e154      	b.n	800dbf0 <tcp_process+0x7a8>
 800d946:	e153      	b.n	800dbf0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fa71 	bl	800de30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d94e:	4b32      	ldr	r3, [pc, #200]	; (800da18 <tcp_process+0x5d0>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	f003 0320 	and.w	r3, r3, #32
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 814c 	beq.w	800dbf4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	8b5b      	ldrh	r3, [r3, #26]
 800d960:	f043 0302 	orr.w	r3, r3, #2
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2207      	movs	r2, #7
 800d96e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d970:	e140      	b.n	800dbf4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fa5c 	bl	800de30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d978:	4b27      	ldr	r3, [pc, #156]	; (800da18 <tcp_process+0x5d0>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d071      	beq.n	800da68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d984:	4b19      	ldr	r3, [pc, #100]	; (800d9ec <tcp_process+0x5a4>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	f003 0310 	and.w	r3, r3, #16
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d060      	beq.n	800da52 <tcp_process+0x60a>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d994:	4b16      	ldr	r3, [pc, #88]	; (800d9f0 <tcp_process+0x5a8>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d15a      	bne.n	800da52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d156      	bne.n	800da52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	8b5b      	ldrh	r3, [r3, #26]
 800d9a8:	f043 0302 	orr.w	r3, r3, #2
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7fe fdbe 	bl	800c534 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d9b8:	4b18      	ldr	r3, [pc, #96]	; (800da1c <tcp_process+0x5d4>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d105      	bne.n	800d9ce <tcp_process+0x586>
 800d9c2:	4b16      	ldr	r3, [pc, #88]	; (800da1c <tcp_process+0x5d4>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	4a14      	ldr	r2, [pc, #80]	; (800da1c <tcp_process+0x5d4>)
 800d9ca:	6013      	str	r3, [r2, #0]
 800d9cc:	e02e      	b.n	800da2c <tcp_process+0x5e4>
 800d9ce:	4b13      	ldr	r3, [pc, #76]	; (800da1c <tcp_process+0x5d4>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	e027      	b.n	800da26 <tcp_process+0x5de>
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d11f      	bne.n	800da20 <tcp_process+0x5d8>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	68da      	ldr	r2, [r3, #12]
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	60da      	str	r2, [r3, #12]
 800d9e8:	e020      	b.n	800da2c <tcp_process+0x5e4>
 800d9ea:	bf00      	nop
 800d9ec:	24005050 	.word	0x24005050
 800d9f0:	24005048 	.word	0x24005048
 800d9f4:	2400504e 	.word	0x2400504e
 800d9f8:	24005044 	.word	0x24005044
 800d9fc:	24005034 	.word	0x24005034
 800da00:	24005428 	.word	0x24005428
 800da04:	2400542c 	.word	0x2400542c
 800da08:	0801564c 	.word	0x0801564c
 800da0c:	080158ec 	.word	0x080158ec
 800da10:	08015698 	.word	0x08015698
 800da14:	2400504c 	.word	0x2400504c
 800da18:	24005051 	.word	0x24005051
 800da1c:	240084d8 	.word	0x240084d8
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	617b      	str	r3, [r7, #20]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d1d4      	bne.n	800d9d6 <tcp_process+0x58e>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	60da      	str	r2, [r3, #12]
 800da32:	4b77      	ldr	r3, [pc, #476]	; (800dc10 <tcp_process+0x7c8>)
 800da34:	2201      	movs	r2, #1
 800da36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	220a      	movs	r2, #10
 800da3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800da3e:	4b75      	ldr	r3, [pc, #468]	; (800dc14 <tcp_process+0x7cc>)
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	60da      	str	r2, [r3, #12]
 800da46:	4a73      	ldr	r2, [pc, #460]	; (800dc14 <tcp_process+0x7cc>)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	f002 fcf8 	bl	8010440 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800da50:	e0d2      	b.n	800dbf8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	8b5b      	ldrh	r3, [r3, #26]
 800da56:	f043 0302 	orr.w	r3, r3, #2
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2208      	movs	r2, #8
 800da64:	751a      	strb	r2, [r3, #20]
      break;
 800da66:	e0c7      	b.n	800dbf8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800da68:	4b6b      	ldr	r3, [pc, #428]	; (800dc18 <tcp_process+0x7d0>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	f003 0310 	and.w	r3, r3, #16
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 80c1 	beq.w	800dbf8 <tcp_process+0x7b0>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da7a:	4b68      	ldr	r3, [pc, #416]	; (800dc1c <tcp_process+0x7d4>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	429a      	cmp	r2, r3
 800da80:	f040 80ba 	bne.w	800dbf8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f040 80b5 	bne.w	800dbf8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2206      	movs	r2, #6
 800da92:	751a      	strb	r2, [r3, #20]
      break;
 800da94:	e0b0      	b.n	800dbf8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 f9ca 	bl	800de30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800da9c:	4b60      	ldr	r3, [pc, #384]	; (800dc20 <tcp_process+0x7d8>)
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	f003 0320 	and.w	r3, r3, #32
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 80a9 	beq.w	800dbfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	8b5b      	ldrh	r3, [r3, #26]
 800daae:	f043 0302 	orr.w	r3, r3, #2
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7fe fd3b 	bl	800c534 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dabe:	4b59      	ldr	r3, [pc, #356]	; (800dc24 <tcp_process+0x7dc>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d105      	bne.n	800dad4 <tcp_process+0x68c>
 800dac8:	4b56      	ldr	r3, [pc, #344]	; (800dc24 <tcp_process+0x7dc>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	4a55      	ldr	r2, [pc, #340]	; (800dc24 <tcp_process+0x7dc>)
 800dad0:	6013      	str	r3, [r2, #0]
 800dad2:	e013      	b.n	800dafc <tcp_process+0x6b4>
 800dad4:	4b53      	ldr	r3, [pc, #332]	; (800dc24 <tcp_process+0x7dc>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	613b      	str	r3, [r7, #16]
 800dada:	e00c      	b.n	800daf6 <tcp_process+0x6ae>
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d104      	bne.n	800daf0 <tcp_process+0x6a8>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	60da      	str	r2, [r3, #12]
 800daee:	e005      	b.n	800dafc <tcp_process+0x6b4>
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	613b      	str	r3, [r7, #16]
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1ef      	bne.n	800dadc <tcp_process+0x694>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	60da      	str	r2, [r3, #12]
 800db02:	4b43      	ldr	r3, [pc, #268]	; (800dc10 <tcp_process+0x7c8>)
 800db04:	2201      	movs	r2, #1
 800db06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	220a      	movs	r2, #10
 800db0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800db0e:	4b41      	ldr	r3, [pc, #260]	; (800dc14 <tcp_process+0x7cc>)
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	60da      	str	r2, [r3, #12]
 800db16:	4a3f      	ldr	r2, [pc, #252]	; (800dc14 <tcp_process+0x7cc>)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	f002 fc90 	bl	8010440 <tcp_timer_needed>
      }
      break;
 800db20:	e06c      	b.n	800dbfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f984 	bl	800de30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800db28:	4b3b      	ldr	r3, [pc, #236]	; (800dc18 <tcp_process+0x7d0>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	f003 0310 	and.w	r3, r3, #16
 800db30:	2b00      	cmp	r3, #0
 800db32:	d065      	beq.n	800dc00 <tcp_process+0x7b8>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db38:	4b38      	ldr	r3, [pc, #224]	; (800dc1c <tcp_process+0x7d4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d15f      	bne.n	800dc00 <tcp_process+0x7b8>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db44:	2b00      	cmp	r3, #0
 800db46:	d15b      	bne.n	800dc00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7fe fcf3 	bl	800c534 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800db4e:	4b35      	ldr	r3, [pc, #212]	; (800dc24 <tcp_process+0x7dc>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	429a      	cmp	r2, r3
 800db56:	d105      	bne.n	800db64 <tcp_process+0x71c>
 800db58:	4b32      	ldr	r3, [pc, #200]	; (800dc24 <tcp_process+0x7dc>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	4a31      	ldr	r2, [pc, #196]	; (800dc24 <tcp_process+0x7dc>)
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	e013      	b.n	800db8c <tcp_process+0x744>
 800db64:	4b2f      	ldr	r3, [pc, #188]	; (800dc24 <tcp_process+0x7dc>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	60fb      	str	r3, [r7, #12]
 800db6a:	e00c      	b.n	800db86 <tcp_process+0x73e>
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d104      	bne.n	800db80 <tcp_process+0x738>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68da      	ldr	r2, [r3, #12]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	60da      	str	r2, [r3, #12]
 800db7e:	e005      	b.n	800db8c <tcp_process+0x744>
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1ef      	bne.n	800db6c <tcp_process+0x724>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	60da      	str	r2, [r3, #12]
 800db92:	4b1f      	ldr	r3, [pc, #124]	; (800dc10 <tcp_process+0x7c8>)
 800db94:	2201      	movs	r2, #1
 800db96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	220a      	movs	r2, #10
 800db9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800db9e:	4b1d      	ldr	r3, [pc, #116]	; (800dc14 <tcp_process+0x7cc>)
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	60da      	str	r2, [r3, #12]
 800dba6:	4a1b      	ldr	r2, [pc, #108]	; (800dc14 <tcp_process+0x7cc>)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6013      	str	r3, [r2, #0]
 800dbac:	f002 fc48 	bl	8010440 <tcp_timer_needed>
      }
      break;
 800dbb0:	e026      	b.n	800dc00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 f93c 	bl	800de30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dbb8:	4b17      	ldr	r3, [pc, #92]	; (800dc18 <tcp_process+0x7d0>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	f003 0310 	and.w	r3, r3, #16
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d01f      	beq.n	800dc04 <tcp_process+0x7bc>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbc8:	4b14      	ldr	r3, [pc, #80]	; (800dc1c <tcp_process+0x7d4>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d119      	bne.n	800dc04 <tcp_process+0x7bc>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d115      	bne.n	800dc04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800dbd8:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <tcp_process+0x7d8>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	f043 0310 	orr.w	r3, r3, #16
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	4b0f      	ldr	r3, [pc, #60]	; (800dc20 <tcp_process+0x7d8>)
 800dbe4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dbe6:	e00d      	b.n	800dc04 <tcp_process+0x7bc>
    default:
      break;
 800dbe8:	bf00      	nop
 800dbea:	e00c      	b.n	800dc06 <tcp_process+0x7be>
      break;
 800dbec:	bf00      	nop
 800dbee:	e00a      	b.n	800dc06 <tcp_process+0x7be>
      break;
 800dbf0:	bf00      	nop
 800dbf2:	e008      	b.n	800dc06 <tcp_process+0x7be>
      break;
 800dbf4:	bf00      	nop
 800dbf6:	e006      	b.n	800dc06 <tcp_process+0x7be>
      break;
 800dbf8:	bf00      	nop
 800dbfa:	e004      	b.n	800dc06 <tcp_process+0x7be>
      break;
 800dbfc:	bf00      	nop
 800dbfe:	e002      	b.n	800dc06 <tcp_process+0x7be>
      break;
 800dc00:	bf00      	nop
 800dc02:	e000      	b.n	800dc06 <tcp_process+0x7be>
      break;
 800dc04:	bf00      	nop
  }
  return ERR_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3724      	adds	r7, #36	; 0x24
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd90      	pop	{r4, r7, pc}
 800dc10:	240084d4 	.word	0x240084d4
 800dc14:	240084e8 	.word	0x240084e8
 800dc18:	24005050 	.word	0x24005050
 800dc1c:	24005048 	.word	0x24005048
 800dc20:	24005051 	.word	0x24005051
 800dc24:	240084d8 	.word	0x240084d8

0800dc28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800dc28:	b590      	push	{r4, r7, lr}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d106      	bne.n	800dc46 <tcp_oos_insert_segment+0x1e>
 800dc38:	4b3b      	ldr	r3, [pc, #236]	; (800dd28 <tcp_oos_insert_segment+0x100>)
 800dc3a:	f240 421f 	movw	r2, #1055	; 0x41f
 800dc3e:	493b      	ldr	r1, [pc, #236]	; (800dd2c <tcp_oos_insert_segment+0x104>)
 800dc40:	483b      	ldr	r0, [pc, #236]	; (800dd30 <tcp_oos_insert_segment+0x108>)
 800dc42:	f005 fb2b 	bl	801329c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	899b      	ldrh	r3, [r3, #12]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fb fc16 	bl	8009480 <lwip_htons>
 800dc54:	4603      	mov	r3, r0
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d028      	beq.n	800dcb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800dc60:	6838      	ldr	r0, [r7, #0]
 800dc62:	f7fe fa65 	bl	800c130 <tcp_segs_free>
    next = NULL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	603b      	str	r3, [r7, #0]
 800dc6a:	e056      	b.n	800dd1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	899b      	ldrh	r3, [r3, #12]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fb fc03 	bl	8009480 <lwip_htons>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	f003 0301 	and.w	r3, r3, #1
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00d      	beq.n	800dca2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	899b      	ldrh	r3, [r3, #12]
 800dc8c:	b29c      	uxth	r4, r3
 800dc8e:	2001      	movs	r0, #1
 800dc90:	f7fb fbf6 	bl	8009480 <lwip_htons>
 800dc94:	4603      	mov	r3, r0
 800dc96:	461a      	mov	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	4322      	orrs	r2, r4
 800dc9e:	b292      	uxth	r2, r2
 800dca0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7fe fa54 	bl	800c15a <tcp_seg_free>
    while (next &&
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00e      	beq.n	800dcd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	891b      	ldrh	r3, [r3, #8]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	4b1d      	ldr	r3, [pc, #116]	; (800dd34 <tcp_oos_insert_segment+0x10c>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	441a      	add	r2, r3
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	6839      	ldr	r1, [r7, #0]
 800dccc:	8909      	ldrh	r1, [r1, #8]
 800dcce:	440b      	add	r3, r1
 800dcd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	daca      	bge.n	800dc6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d01e      	beq.n	800dd1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	891b      	ldrh	r3, [r3, #8]
 800dce0:	461a      	mov	r2, r3
 800dce2:	4b14      	ldr	r3, [pc, #80]	; (800dd34 <tcp_oos_insert_segment+0x10c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	441a      	add	r2, r3
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	dd12      	ble.n	800dd1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	4b0d      	ldr	r3, [pc, #52]	; (800dd34 <tcp_oos_insert_segment+0x10c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	891b      	ldrh	r3, [r3, #8]
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7fc fe1b 	bl	800a950 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	601a      	str	r2, [r3, #0]
}
 800dd20:	bf00      	nop
 800dd22:	3714      	adds	r7, #20
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd90      	pop	{r4, r7, pc}
 800dd28:	0801564c 	.word	0x0801564c
 800dd2c:	0801590c 	.word	0x0801590c
 800dd30:	08015698 	.word	0x08015698
 800dd34:	24005044 	.word	0x24005044

0800dd38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dd38:	b5b0      	push	{r4, r5, r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
 800dd44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dd46:	e03e      	b.n	800ddc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fd f80e 	bl	800ad78 <pbuf_clen>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd66:	8a7a      	ldrh	r2, [r7, #18]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d906      	bls.n	800dd7a <tcp_free_acked_segments+0x42>
 800dd6c:	4b2a      	ldr	r3, [pc, #168]	; (800de18 <tcp_free_acked_segments+0xe0>)
 800dd6e:	f240 4257 	movw	r2, #1111	; 0x457
 800dd72:	492a      	ldr	r1, [pc, #168]	; (800de1c <tcp_free_acked_segments+0xe4>)
 800dd74:	482a      	ldr	r0, [pc, #168]	; (800de20 <tcp_free_acked_segments+0xe8>)
 800dd76:	f005 fa91 	bl	801329c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dd80:	8a7b      	ldrh	r3, [r7, #18]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	891a      	ldrh	r2, [r3, #8]
 800dd90:	4b24      	ldr	r3, [pc, #144]	; (800de24 <tcp_free_acked_segments+0xec>)
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	4413      	add	r3, r2
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	4b22      	ldr	r3, [pc, #136]	; (800de24 <tcp_free_acked_segments+0xec>)
 800dd9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dd9c:	6978      	ldr	r0, [r7, #20]
 800dd9e:	f7fe f9dc 	bl	800c15a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00c      	beq.n	800ddc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d109      	bne.n	800ddc6 <tcp_free_acked_segments+0x8e>
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d106      	bne.n	800ddc6 <tcp_free_acked_segments+0x8e>
 800ddb8:	4b17      	ldr	r3, [pc, #92]	; (800de18 <tcp_free_acked_segments+0xe0>)
 800ddba:	f240 4261 	movw	r2, #1121	; 0x461
 800ddbe:	491a      	ldr	r1, [pc, #104]	; (800de28 <tcp_free_acked_segments+0xf0>)
 800ddc0:	4817      	ldr	r0, [pc, #92]	; (800de20 <tcp_free_acked_segments+0xe8>)
 800ddc2:	f005 fa6b 	bl	801329c <iprintf>
  while (seg_list != NULL &&
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d020      	beq.n	800de0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fb fb69 	bl	80094aa <lwip_htonl>
 800ddd8:	4604      	mov	r4, r0
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	891b      	ldrh	r3, [r3, #8]
 800ddde:	461d      	mov	r5, r3
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	899b      	ldrh	r3, [r3, #12]
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fb fb49 	bl	8009480 <lwip_htons>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	f003 0303 	and.w	r3, r3, #3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <tcp_free_acked_segments+0xc6>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e000      	b.n	800de00 <tcp_free_acked_segments+0xc8>
 800ddfe:	2300      	movs	r3, #0
 800de00:	442b      	add	r3, r5
 800de02:	18e2      	adds	r2, r4, r3
 800de04:	4b09      	ldr	r3, [pc, #36]	; (800de2c <tcp_free_acked_segments+0xf4>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	dd9c      	ble.n	800dd48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800de0e:	68bb      	ldr	r3, [r7, #8]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bdb0      	pop	{r4, r5, r7, pc}
 800de18:	0801564c 	.word	0x0801564c
 800de1c:	08015934 	.word	0x08015934
 800de20:	08015698 	.word	0x08015698
 800de24:	2400504c 	.word	0x2400504c
 800de28:	0801595c 	.word	0x0801595c
 800de2c:	24005048 	.word	0x24005048

0800de30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800de30:	b5b0      	push	{r4, r5, r7, lr}
 800de32:	b094      	sub	sp, #80	; 0x50
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800de38:	2300      	movs	r3, #0
 800de3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <tcp_receive+0x20>
 800de42:	4ba6      	ldr	r3, [pc, #664]	; (800e0dc <tcp_receive+0x2ac>)
 800de44:	f240 427b 	movw	r2, #1147	; 0x47b
 800de48:	49a5      	ldr	r1, [pc, #660]	; (800e0e0 <tcp_receive+0x2b0>)
 800de4a:	48a6      	ldr	r0, [pc, #664]	; (800e0e4 <tcp_receive+0x2b4>)
 800de4c:	f005 fa26 	bl	801329c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	7d1b      	ldrb	r3, [r3, #20]
 800de54:	2b03      	cmp	r3, #3
 800de56:	d806      	bhi.n	800de66 <tcp_receive+0x36>
 800de58:	4ba0      	ldr	r3, [pc, #640]	; (800e0dc <tcp_receive+0x2ac>)
 800de5a:	f240 427c 	movw	r2, #1148	; 0x47c
 800de5e:	49a2      	ldr	r1, [pc, #648]	; (800e0e8 <tcp_receive+0x2b8>)
 800de60:	48a0      	ldr	r0, [pc, #640]	; (800e0e4 <tcp_receive+0x2b4>)
 800de62:	f005 fa1b 	bl	801329c <iprintf>

  if (flags & TCP_ACK) {
 800de66:	4ba1      	ldr	r3, [pc, #644]	; (800e0ec <tcp_receive+0x2bc>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	f003 0310 	and.w	r3, r3, #16
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 8263 	beq.w	800e33a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de7a:	461a      	mov	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de80:	4413      	add	r3, r2
 800de82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de88:	4b99      	ldr	r3, [pc, #612]	; (800e0f0 <tcp_receive+0x2c0>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	db1b      	blt.n	800deca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de96:	4b96      	ldr	r3, [pc, #600]	; (800e0f0 <tcp_receive+0x2c0>)
 800de98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d106      	bne.n	800deac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dea2:	4b94      	ldr	r3, [pc, #592]	; (800e0f4 <tcp_receive+0x2c4>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	db0e      	blt.n	800deca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800deb0:	4b90      	ldr	r3, [pc, #576]	; (800e0f4 <tcp_receive+0x2c4>)
 800deb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d125      	bne.n	800df04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800deb8:	4b8f      	ldr	r3, [pc, #572]	; (800e0f8 <tcp_receive+0x2c8>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	89db      	ldrh	r3, [r3, #14]
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d91c      	bls.n	800df04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800deca:	4b8b      	ldr	r3, [pc, #556]	; (800e0f8 <tcp_receive+0x2c8>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	89db      	ldrh	r3, [r3, #14]
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d205      	bcs.n	800def4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800def4:	4b7e      	ldr	r3, [pc, #504]	; (800e0f0 <tcp_receive+0x2c0>)
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800defc:	4b7d      	ldr	r3, [pc, #500]	; (800e0f4 <tcp_receive+0x2c4>)
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800df04:	4b7b      	ldr	r3, [pc, #492]	; (800e0f4 <tcp_receive+0x2c4>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	dc58      	bgt.n	800dfc4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800df12:	4b7a      	ldr	r3, [pc, #488]	; (800e0fc <tcp_receive+0x2cc>)
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d14b      	bne.n	800dfb2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800df24:	4413      	add	r3, r2
 800df26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df28:	429a      	cmp	r2, r3
 800df2a:	d142      	bne.n	800dfb2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df32:	2b00      	cmp	r3, #0
 800df34:	db3d      	blt.n	800dfb2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df3a:	4b6e      	ldr	r3, [pc, #440]	; (800e0f4 <tcp_receive+0x2c4>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d137      	bne.n	800dfb2 <tcp_receive+0x182>
              found_dupack = 1;
 800df42:	2301      	movs	r3, #1
 800df44:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800df4c:	2bff      	cmp	r3, #255	; 0xff
 800df4e:	d007      	beq.n	800df60 <tcp_receive+0x130>
                ++pcb->dupacks;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800df56:	3301      	adds	r3, #1
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800df66:	2b03      	cmp	r3, #3
 800df68:	d91b      	bls.n	800dfa2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df74:	4413      	add	r3, r2
 800df76:	b29a      	uxth	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df7e:	429a      	cmp	r2, r3
 800df80:	d30a      	bcc.n	800df98 <tcp_receive+0x168>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df8c:	4413      	add	r3, r2
 800df8e:	b29a      	uxth	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800df96:	e004      	b.n	800dfa2 <tcp_receive+0x172>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d902      	bls.n	800dfb2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f001 fee9 	bl	800fd84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dfb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f040 8160 	bne.w	800e27a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dfc2:	e15a      	b.n	800e27a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dfc4:	4b4b      	ldr	r3, [pc, #300]	; (800e0f4 <tcp_receive+0x2c4>)
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f2c0 814d 	blt.w	800e270 <tcp_receive+0x440>
 800dfd6:	4b47      	ldr	r3, [pc, #284]	; (800e0f4 <tcp_receive+0x2c4>)
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f300 8145 	bgt.w	800e270 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	8b5b      	ldrh	r3, [r3, #26]
 800dfea:	f003 0304 	and.w	r3, r3, #4
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d010      	beq.n	800e014 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8b5b      	ldrh	r3, [r3, #26]
 800dff6:	f023 0304 	bic.w	r3, r3, #4
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e022:	10db      	asrs	r3, r3, #3
 800e024:	b21b      	sxth	r3, r3
 800e026:	b29a      	uxth	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e02e:	b29b      	uxth	r3, r3
 800e030:	4413      	add	r3, r2
 800e032:	b29b      	uxth	r3, r3
 800e034:	b21a      	sxth	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e03c:	4b2d      	ldr	r3, [pc, #180]	; (800e0f4 <tcp_receive+0x2c4>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	b29a      	uxth	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e046:	b29b      	uxth	r3, r3
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e054:	4b27      	ldr	r3, [pc, #156]	; (800e0f4 <tcp_receive+0x2c4>)
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7d1b      	ldrb	r3, [r3, #20]
 800e060:	2b03      	cmp	r3, #3
 800e062:	f240 8096 	bls.w	800e192 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e072:	429a      	cmp	r2, r3
 800e074:	d244      	bcs.n	800e100 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	8b5b      	ldrh	r3, [r3, #26]
 800e07a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <tcp_receive+0x256>
 800e082:	2301      	movs	r3, #1
 800e084:	e000      	b.n	800e088 <tcp_receive+0x258>
 800e086:	2302      	movs	r3, #2
 800e088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e08c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e090:	b29a      	uxth	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e096:	fb12 f303 	smulbb	r3, r2, r3
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	bf28      	it	cs
 800e0a2:	4613      	movcs	r3, r2
 800e0a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e0ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0ae:	4413      	add	r3, r2
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d309      	bcc.n	800e0d0 <tcp_receive+0x2a0>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e0c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0c4:	4413      	add	r3, r2
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e0ce:	e060      	b.n	800e192 <tcp_receive+0x362>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e0da:	e05a      	b.n	800e192 <tcp_receive+0x362>
 800e0dc:	0801564c 	.word	0x0801564c
 800e0e0:	0801597c 	.word	0x0801597c
 800e0e4:	08015698 	.word	0x08015698
 800e0e8:	08015998 	.word	0x08015998
 800e0ec:	24005050 	.word	0x24005050
 800e0f0:	24005044 	.word	0x24005044
 800e0f4:	24005048 	.word	0x24005048
 800e0f8:	24005034 	.word	0x24005034
 800e0fc:	2400504e 	.word	0x2400504e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e108:	4413      	add	r3, r2
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e112:	429a      	cmp	r2, r3
 800e114:	d309      	bcc.n	800e12a <tcp_receive+0x2fa>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e11c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e11e:	4413      	add	r3, r2
 800e120:	b29a      	uxth	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e128:	e004      	b.n	800e134 <tcp_receive+0x304>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e140:	429a      	cmp	r2, r3
 800e142:	d326      	bcc.n	800e192 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	b29a      	uxth	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e164:	4413      	add	r3, r2
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e16e:	429a      	cmp	r2, r3
 800e170:	d30a      	bcc.n	800e188 <tcp_receive+0x358>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e17c:	4413      	add	r3, r2
 800e17e:	b29a      	uxth	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e186:	e004      	b.n	800e192 <tcp_receive+0x362>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e18e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e19a:	4a98      	ldr	r2, [pc, #608]	; (800e3fc <tcp_receive+0x5cc>)
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7ff fdcb 	bl	800dd38 <tcp_free_acked_segments>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b0:	4a93      	ldr	r2, [pc, #588]	; (800e400 <tcp_receive+0x5d0>)
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff fdc0 	bl	800dd38 <tcp_free_acked_segments>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d104      	bne.n	800e1d0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1cc:	861a      	strh	r2, [r3, #48]	; 0x30
 800e1ce:	e002      	b.n	800e1d6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d103      	bne.n	800e1ec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e1f2:	4b84      	ldr	r3, [pc, #528]	; (800e404 <tcp_receive+0x5d4>)
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	8b5b      	ldrh	r3, [r3, #26]
 800e204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d035      	beq.n	800e278 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e210:	2b00      	cmp	r3, #0
 800e212:	d118      	bne.n	800e246 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00c      	beq.n	800e236 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fb f93e 	bl	80094aa <lwip_htonl>
 800e22e:	4603      	mov	r3, r0
 800e230:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e232:	2b00      	cmp	r3, #0
 800e234:	dc20      	bgt.n	800e278 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	8b5b      	ldrh	r3, [r3, #26]
 800e23a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e23e:	b29a      	uxth	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e244:	e018      	b.n	800e278 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	4618      	mov	r0, r3
 800e254:	f7fb f929 	bl	80094aa <lwip_htonl>
 800e258:	4603      	mov	r3, r0
 800e25a:	1ae3      	subs	r3, r4, r3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dc0b      	bgt.n	800e278 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	8b5b      	ldrh	r3, [r3, #26]
 800e264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e268:	b29a      	uxth	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e26e:	e003      	b.n	800e278 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f001 ff75 	bl	8010160 <tcp_send_empty_ack>
 800e276:	e000      	b.n	800e27a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e278:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d05b      	beq.n	800e33a <tcp_receive+0x50a>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e286:	4b60      	ldr	r3, [pc, #384]	; (800e408 <tcp_receive+0x5d8>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	1ad3      	subs	r3, r2, r3
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	da54      	bge.n	800e33a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e290:	4b5e      	ldr	r3, [pc, #376]	; (800e40c <tcp_receive+0x5dc>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e2a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e2ae:	10db      	asrs	r3, r3, #3
 800e2b0:	b21b      	sxth	r3, r3
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	1ad3      	subs	r3, r2, r3
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e2c8:	4413      	add	r3, r2
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	b21a      	sxth	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e2d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	da05      	bge.n	800e2e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e2da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e2de:	425b      	negs	r3, r3
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e2e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e2f0:	109b      	asrs	r3, r3, #2
 800e2f2:	b21b      	sxth	r3, r3
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e304:	b29a      	uxth	r2, r3
 800e306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e30a:	4413      	add	r3, r2
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	b21a      	sxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e31a:	10db      	asrs	r3, r3, #3
 800e31c:	b21b      	sxth	r3, r3
 800e31e:	b29a      	uxth	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e326:	b29b      	uxth	r3, r3
 800e328:	4413      	add	r3, r2
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	b21a      	sxth	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e33a:	4b35      	ldr	r3, [pc, #212]	; (800e410 <tcp_receive+0x5e0>)
 800e33c:	881b      	ldrh	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 84e1 	beq.w	800ed06 <tcp_receive+0xed6>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	7d1b      	ldrb	r3, [r3, #20]
 800e348:	2b06      	cmp	r3, #6
 800e34a:	f200 84dc 	bhi.w	800ed06 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e352:	4b30      	ldr	r3, [pc, #192]	; (800e414 <tcp_receive+0x5e4>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	3b01      	subs	r3, #1
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f2c0 808e 	blt.w	800e47c <tcp_receive+0x64c>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e364:	4b2a      	ldr	r3, [pc, #168]	; (800e410 <tcp_receive+0x5e0>)
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	4619      	mov	r1, r3
 800e36a:	4b2a      	ldr	r3, [pc, #168]	; (800e414 <tcp_receive+0x5e4>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	440b      	add	r3, r1
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	3301      	adds	r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	f300 8081 	bgt.w	800e47c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e37a:	4b27      	ldr	r3, [pc, #156]	; (800e418 <tcp_receive+0x5e8>)
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e384:	4b23      	ldr	r3, [pc, #140]	; (800e414 <tcp_receive+0x5e4>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e38c:	4b22      	ldr	r3, [pc, #136]	; (800e418 <tcp_receive+0x5e8>)
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d106      	bne.n	800e3a2 <tcp_receive+0x572>
 800e394:	4b21      	ldr	r3, [pc, #132]	; (800e41c <tcp_receive+0x5ec>)
 800e396:	f240 5294 	movw	r2, #1428	; 0x594
 800e39a:	4921      	ldr	r1, [pc, #132]	; (800e420 <tcp_receive+0x5f0>)
 800e39c:	4821      	ldr	r0, [pc, #132]	; (800e424 <tcp_receive+0x5f4>)
 800e39e:	f004 ff7d 	bl	801329c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d906      	bls.n	800e3ba <tcp_receive+0x58a>
 800e3ac:	4b1b      	ldr	r3, [pc, #108]	; (800e41c <tcp_receive+0x5ec>)
 800e3ae:	f240 5295 	movw	r2, #1429	; 0x595
 800e3b2:	491d      	ldr	r1, [pc, #116]	; (800e428 <tcp_receive+0x5f8>)
 800e3b4:	481b      	ldr	r0, [pc, #108]	; (800e424 <tcp_receive+0x5f4>)
 800e3b6:	f004 ff71 	bl	801329c <iprintf>
      off = (u16_t)off32;
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e3c0:	4b15      	ldr	r3, [pc, #84]	; (800e418 <tcp_receive+0x5e8>)
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	891b      	ldrh	r3, [r3, #8]
 800e3c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d906      	bls.n	800e3dc <tcp_receive+0x5ac>
 800e3ce:	4b13      	ldr	r3, [pc, #76]	; (800e41c <tcp_receive+0x5ec>)
 800e3d0:	f240 5297 	movw	r2, #1431	; 0x597
 800e3d4:	4915      	ldr	r1, [pc, #84]	; (800e42c <tcp_receive+0x5fc>)
 800e3d6:	4813      	ldr	r0, [pc, #76]	; (800e424 <tcp_receive+0x5f4>)
 800e3d8:	f004 ff60 	bl	801329c <iprintf>
      inseg.len -= off;
 800e3dc:	4b0e      	ldr	r3, [pc, #56]	; (800e418 <tcp_receive+0x5e8>)
 800e3de:	891a      	ldrh	r2, [r3, #8]
 800e3e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e3e4:	1ad3      	subs	r3, r2, r3
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	4b0b      	ldr	r3, [pc, #44]	; (800e418 <tcp_receive+0x5e8>)
 800e3ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e3ec:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <tcp_receive+0x5e8>)
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	891a      	ldrh	r2, [r3, #8]
 800e3f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e3fa:	e029      	b.n	800e450 <tcp_receive+0x620>
 800e3fc:	080159b4 	.word	0x080159b4
 800e400:	080159bc 	.word	0x080159bc
 800e404:	2400504c 	.word	0x2400504c
 800e408:	24005048 	.word	0x24005048
 800e40c:	240084dc 	.word	0x240084dc
 800e410:	2400504e 	.word	0x2400504e
 800e414:	24005044 	.word	0x24005044
 800e418:	24005024 	.word	0x24005024
 800e41c:	0801564c 	.word	0x0801564c
 800e420:	080159c4 	.word	0x080159c4
 800e424:	08015698 	.word	0x08015698
 800e428:	080159d4 	.word	0x080159d4
 800e42c:	080159e4 	.word	0x080159e4
        off -= p->len;
 800e430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e432:	895b      	ldrh	r3, [r3, #10]
 800e434:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e440:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e442:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e446:	2200      	movs	r2, #0
 800e448:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e452:	895b      	ldrh	r3, [r3, #10]
 800e454:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e458:	429a      	cmp	r2, r3
 800e45a:	d8e9      	bhi.n	800e430 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e45c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e460:	4619      	mov	r1, r3
 800e462:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e464:	f7fc fb74 	bl	800ab50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46c:	4a91      	ldr	r2, [pc, #580]	; (800e6b4 <tcp_receive+0x884>)
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	4b91      	ldr	r3, [pc, #580]	; (800e6b8 <tcp_receive+0x888>)
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	4a8f      	ldr	r2, [pc, #572]	; (800e6b4 <tcp_receive+0x884>)
 800e476:	6812      	ldr	r2, [r2, #0]
 800e478:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e47a:	e00d      	b.n	800e498 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e47c:	4b8d      	ldr	r3, [pc, #564]	; (800e6b4 <tcp_receive+0x884>)
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	da06      	bge.n	800e498 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	8b5b      	ldrh	r3, [r3, #26]
 800e48e:	f043 0302 	orr.w	r3, r3, #2
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e498:	4b86      	ldr	r3, [pc, #536]	; (800e6b4 <tcp_receive+0x884>)
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f2c0 842a 	blt.w	800ecfc <tcp_receive+0xecc>
 800e4a8:	4b82      	ldr	r3, [pc, #520]	; (800e6b4 <tcp_receive+0x884>)
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b0:	6879      	ldr	r1, [r7, #4]
 800e4b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4b4:	440b      	add	r3, r1
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f300 841e 	bgt.w	800ecfc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4c4:	4b7b      	ldr	r3, [pc, #492]	; (800e6b4 <tcp_receive+0x884>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	f040 829a 	bne.w	800ea02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e4ce:	4b7a      	ldr	r3, [pc, #488]	; (800e6b8 <tcp_receive+0x888>)
 800e4d0:	891c      	ldrh	r4, [r3, #8]
 800e4d2:	4b79      	ldr	r3, [pc, #484]	; (800e6b8 <tcp_receive+0x888>)
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	899b      	ldrh	r3, [r3, #12]
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fa ffd0 	bl	8009480 <lwip_htons>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	f003 0303 	and.w	r3, r3, #3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <tcp_receive+0x6c0>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e000      	b.n	800e4f2 <tcp_receive+0x6c2>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4423      	add	r3, r4
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	4b71      	ldr	r3, [pc, #452]	; (800e6bc <tcp_receive+0x88c>)
 800e4f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4fe:	4b6f      	ldr	r3, [pc, #444]	; (800e6bc <tcp_receive+0x88c>)
 800e500:	881b      	ldrh	r3, [r3, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	d275      	bcs.n	800e5f2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e506:	4b6c      	ldr	r3, [pc, #432]	; (800e6b8 <tcp_receive+0x888>)
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	899b      	ldrh	r3, [r3, #12]
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fa ffb6 	bl	8009480 <lwip_htons>
 800e514:	4603      	mov	r3, r0
 800e516:	b2db      	uxtb	r3, r3
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d01f      	beq.n	800e560 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e520:	4b65      	ldr	r3, [pc, #404]	; (800e6b8 <tcp_receive+0x888>)
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	899b      	ldrh	r3, [r3, #12]
 800e526:	b29b      	uxth	r3, r3
 800e528:	b21b      	sxth	r3, r3
 800e52a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e52e:	b21c      	sxth	r4, r3
 800e530:	4b61      	ldr	r3, [pc, #388]	; (800e6b8 <tcp_receive+0x888>)
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	899b      	ldrh	r3, [r3, #12]
 800e536:	b29b      	uxth	r3, r3
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fa ffa1 	bl	8009480 <lwip_htons>
 800e53e:	4603      	mov	r3, r0
 800e540:	b2db      	uxtb	r3, r3
 800e542:	b29b      	uxth	r3, r3
 800e544:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e548:	b29b      	uxth	r3, r3
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fa ff98 	bl	8009480 <lwip_htons>
 800e550:	4603      	mov	r3, r0
 800e552:	b21b      	sxth	r3, r3
 800e554:	4323      	orrs	r3, r4
 800e556:	b21a      	sxth	r2, r3
 800e558:	4b57      	ldr	r3, [pc, #348]	; (800e6b8 <tcp_receive+0x888>)
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	b292      	uxth	r2, r2
 800e55e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e564:	4b54      	ldr	r3, [pc, #336]	; (800e6b8 <tcp_receive+0x888>)
 800e566:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e568:	4b53      	ldr	r3, [pc, #332]	; (800e6b8 <tcp_receive+0x888>)
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	899b      	ldrh	r3, [r3, #12]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	4618      	mov	r0, r3
 800e572:	f7fa ff85 	bl	8009480 <lwip_htons>
 800e576:	4603      	mov	r3, r0
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	f003 0302 	and.w	r3, r3, #2
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d005      	beq.n	800e58e <tcp_receive+0x75e>
            inseg.len -= 1;
 800e582:	4b4d      	ldr	r3, [pc, #308]	; (800e6b8 <tcp_receive+0x888>)
 800e584:	891b      	ldrh	r3, [r3, #8]
 800e586:	3b01      	subs	r3, #1
 800e588:	b29a      	uxth	r2, r3
 800e58a:	4b4b      	ldr	r3, [pc, #300]	; (800e6b8 <tcp_receive+0x888>)
 800e58c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e58e:	4b4a      	ldr	r3, [pc, #296]	; (800e6b8 <tcp_receive+0x888>)
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	4a49      	ldr	r2, [pc, #292]	; (800e6b8 <tcp_receive+0x888>)
 800e594:	8912      	ldrh	r2, [r2, #8]
 800e596:	4611      	mov	r1, r2
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fc f9d9 	bl	800a950 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e59e:	4b46      	ldr	r3, [pc, #280]	; (800e6b8 <tcp_receive+0x888>)
 800e5a0:	891c      	ldrh	r4, [r3, #8]
 800e5a2:	4b45      	ldr	r3, [pc, #276]	; (800e6b8 <tcp_receive+0x888>)
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	899b      	ldrh	r3, [r3, #12]
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fa ff68 	bl	8009480 <lwip_htons>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f003 0303 	and.w	r3, r3, #3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d001      	beq.n	800e5c0 <tcp_receive+0x790>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e000      	b.n	800e5c2 <tcp_receive+0x792>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4423      	add	r3, r4
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	4b3d      	ldr	r3, [pc, #244]	; (800e6bc <tcp_receive+0x88c>)
 800e5c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e5ca:	4b3c      	ldr	r3, [pc, #240]	; (800e6bc <tcp_receive+0x88c>)
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	4b38      	ldr	r3, [pc, #224]	; (800e6b4 <tcp_receive+0x884>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	441a      	add	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5da:	6879      	ldr	r1, [r7, #4]
 800e5dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5de:	440b      	add	r3, r1
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d006      	beq.n	800e5f2 <tcp_receive+0x7c2>
 800e5e4:	4b36      	ldr	r3, [pc, #216]	; (800e6c0 <tcp_receive+0x890>)
 800e5e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e5ea:	4936      	ldr	r1, [pc, #216]	; (800e6c4 <tcp_receive+0x894>)
 800e5ec:	4836      	ldr	r0, [pc, #216]	; (800e6c8 <tcp_receive+0x898>)
 800e5ee:	f004 fe55 	bl	801329c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 80e7 	beq.w	800e7ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e5fc:	4b2e      	ldr	r3, [pc, #184]	; (800e6b8 <tcp_receive+0x888>)
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	899b      	ldrh	r3, [r3, #12]
 800e602:	b29b      	uxth	r3, r3
 800e604:	4618      	mov	r0, r3
 800e606:	f7fa ff3b 	bl	8009480 <lwip_htons>
 800e60a:	4603      	mov	r3, r0
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	f003 0301 	and.w	r3, r3, #1
 800e612:	2b00      	cmp	r3, #0
 800e614:	d010      	beq.n	800e638 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e616:	e00a      	b.n	800e62e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e61c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f7fd fd96 	bl	800c15a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1f0      	bne.n	800e618 <tcp_receive+0x7e8>
 800e636:	e0c8      	b.n	800e7ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e63c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e63e:	e052      	b.n	800e6e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	899b      	ldrh	r3, [r3, #12]
 800e646:	b29b      	uxth	r3, r3
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fa ff19 	bl	8009480 <lwip_htons>
 800e64e:	4603      	mov	r3, r0
 800e650:	b2db      	uxtb	r3, r3
 800e652:	f003 0301 	and.w	r3, r3, #1
 800e656:	2b00      	cmp	r3, #0
 800e658:	d03d      	beq.n	800e6d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e65a:	4b17      	ldr	r3, [pc, #92]	; (800e6b8 <tcp_receive+0x888>)
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	899b      	ldrh	r3, [r3, #12]
 800e660:	b29b      	uxth	r3, r3
 800e662:	4618      	mov	r0, r3
 800e664:	f7fa ff0c 	bl	8009480 <lwip_htons>
 800e668:	4603      	mov	r3, r0
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e670:	2b00      	cmp	r3, #0
 800e672:	d130      	bne.n	800e6d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e674:	4b10      	ldr	r3, [pc, #64]	; (800e6b8 <tcp_receive+0x888>)
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	899b      	ldrh	r3, [r3, #12]
 800e67a:	b29c      	uxth	r4, r3
 800e67c:	2001      	movs	r0, #1
 800e67e:	f7fa feff 	bl	8009480 <lwip_htons>
 800e682:	4603      	mov	r3, r0
 800e684:	461a      	mov	r2, r3
 800e686:	4b0c      	ldr	r3, [pc, #48]	; (800e6b8 <tcp_receive+0x888>)
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	4322      	orrs	r2, r4
 800e68c:	b292      	uxth	r2, r2
 800e68e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e690:	4b09      	ldr	r3, [pc, #36]	; (800e6b8 <tcp_receive+0x888>)
 800e692:	891c      	ldrh	r4, [r3, #8]
 800e694:	4b08      	ldr	r3, [pc, #32]	; (800e6b8 <tcp_receive+0x888>)
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	899b      	ldrh	r3, [r3, #12]
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fa feef 	bl	8009480 <lwip_htons>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	f003 0303 	and.w	r3, r3, #3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00e      	beq.n	800e6cc <tcp_receive+0x89c>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e00d      	b.n	800e6ce <tcp_receive+0x89e>
 800e6b2:	bf00      	nop
 800e6b4:	24005044 	.word	0x24005044
 800e6b8:	24005024 	.word	0x24005024
 800e6bc:	2400504e 	.word	0x2400504e
 800e6c0:	0801564c 	.word	0x0801564c
 800e6c4:	080159f4 	.word	0x080159f4
 800e6c8:	08015698 	.word	0x08015698
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	4423      	add	r3, r4
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	4b98      	ldr	r3, [pc, #608]	; (800e934 <tcp_receive+0xb04>)
 800e6d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e6e0:	6938      	ldr	r0, [r7, #16]
 800e6e2:	f7fd fd3a 	bl	800c15a <tcp_seg_free>
            while (next &&
 800e6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00e      	beq.n	800e70a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e6ec:	4b91      	ldr	r3, [pc, #580]	; (800e934 <tcp_receive+0xb04>)
 800e6ee:	881b      	ldrh	r3, [r3, #0]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4b91      	ldr	r3, [pc, #580]	; (800e938 <tcp_receive+0xb08>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	441a      	add	r2, r3
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e700:	8909      	ldrh	r1, [r1, #8]
 800e702:	440b      	add	r3, r1
 800e704:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e706:	2b00      	cmp	r3, #0
 800e708:	da9a      	bge.n	800e640 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d059      	beq.n	800e7c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e710:	4b88      	ldr	r3, [pc, #544]	; (800e934 <tcp_receive+0xb04>)
 800e712:	881b      	ldrh	r3, [r3, #0]
 800e714:	461a      	mov	r2, r3
 800e716:	4b88      	ldr	r3, [pc, #544]	; (800e938 <tcp_receive+0xb08>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	441a      	add	r2, r3
 800e71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e724:	2b00      	cmp	r3, #0
 800e726:	dd4d      	ble.n	800e7c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	b29a      	uxth	r2, r3
 800e730:	4b81      	ldr	r3, [pc, #516]	; (800e938 <tcp_receive+0xb08>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	b29b      	uxth	r3, r3
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	b29a      	uxth	r2, r3
 800e73a:	4b80      	ldr	r3, [pc, #512]	; (800e93c <tcp_receive+0xb0c>)
 800e73c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e73e:	4b7f      	ldr	r3, [pc, #508]	; (800e93c <tcp_receive+0xb0c>)
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	899b      	ldrh	r3, [r3, #12]
 800e744:	b29b      	uxth	r3, r3
 800e746:	4618      	mov	r0, r3
 800e748:	f7fa fe9a 	bl	8009480 <lwip_htons>
 800e74c:	4603      	mov	r3, r0
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	f003 0302 	and.w	r3, r3, #2
 800e754:	2b00      	cmp	r3, #0
 800e756:	d005      	beq.n	800e764 <tcp_receive+0x934>
                inseg.len -= 1;
 800e758:	4b78      	ldr	r3, [pc, #480]	; (800e93c <tcp_receive+0xb0c>)
 800e75a:	891b      	ldrh	r3, [r3, #8]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	b29a      	uxth	r2, r3
 800e760:	4b76      	ldr	r3, [pc, #472]	; (800e93c <tcp_receive+0xb0c>)
 800e762:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e764:	4b75      	ldr	r3, [pc, #468]	; (800e93c <tcp_receive+0xb0c>)
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	4a74      	ldr	r2, [pc, #464]	; (800e93c <tcp_receive+0xb0c>)
 800e76a:	8912      	ldrh	r2, [r2, #8]
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fc f8ee 	bl	800a950 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e774:	4b71      	ldr	r3, [pc, #452]	; (800e93c <tcp_receive+0xb0c>)
 800e776:	891c      	ldrh	r4, [r3, #8]
 800e778:	4b70      	ldr	r3, [pc, #448]	; (800e93c <tcp_receive+0xb0c>)
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	899b      	ldrh	r3, [r3, #12]
 800e77e:	b29b      	uxth	r3, r3
 800e780:	4618      	mov	r0, r3
 800e782:	f7fa fe7d 	bl	8009480 <lwip_htons>
 800e786:	4603      	mov	r3, r0
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	f003 0303 	and.w	r3, r3, #3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <tcp_receive+0x966>
 800e792:	2301      	movs	r3, #1
 800e794:	e000      	b.n	800e798 <tcp_receive+0x968>
 800e796:	2300      	movs	r3, #0
 800e798:	4423      	add	r3, r4
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	4b65      	ldr	r3, [pc, #404]	; (800e934 <tcp_receive+0xb04>)
 800e79e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e7a0:	4b64      	ldr	r3, [pc, #400]	; (800e934 <tcp_receive+0xb04>)
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	4b64      	ldr	r3, [pc, #400]	; (800e938 <tcp_receive+0xb08>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	441a      	add	r2, r3
 800e7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d006      	beq.n	800e7c4 <tcp_receive+0x994>
 800e7b6:	4b62      	ldr	r3, [pc, #392]	; (800e940 <tcp_receive+0xb10>)
 800e7b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e7bc:	4961      	ldr	r1, [pc, #388]	; (800e944 <tcp_receive+0xb14>)
 800e7be:	4862      	ldr	r0, [pc, #392]	; (800e948 <tcp_receive+0xb18>)
 800e7c0:	f004 fd6c 	bl	801329c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e7ca:	4b5a      	ldr	r3, [pc, #360]	; (800e934 <tcp_receive+0xb04>)
 800e7cc:	881b      	ldrh	r3, [r3, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	4b59      	ldr	r3, [pc, #356]	; (800e938 <tcp_receive+0xb08>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	441a      	add	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7de:	4b55      	ldr	r3, [pc, #340]	; (800e934 <tcp_receive+0xb04>)
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d206      	bcs.n	800e7f4 <tcp_receive+0x9c4>
 800e7e6:	4b56      	ldr	r3, [pc, #344]	; (800e940 <tcp_receive+0xb10>)
 800e7e8:	f240 6207 	movw	r2, #1543	; 0x607
 800e7ec:	4957      	ldr	r1, [pc, #348]	; (800e94c <tcp_receive+0xb1c>)
 800e7ee:	4856      	ldr	r0, [pc, #344]	; (800e948 <tcp_receive+0xb18>)
 800e7f0:	f004 fd54 	bl	801329c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7f8:	4b4e      	ldr	r3, [pc, #312]	; (800e934 <tcp_receive+0xb04>)
 800e7fa:	881b      	ldrh	r3, [r3, #0]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7fc ffc9 	bl	800b79c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e80a:	4b4c      	ldr	r3, [pc, #304]	; (800e93c <tcp_receive+0xb0c>)
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	891b      	ldrh	r3, [r3, #8]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d006      	beq.n	800e822 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e814:	4b49      	ldr	r3, [pc, #292]	; (800e93c <tcp_receive+0xb0c>)
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	4a4d      	ldr	r2, [pc, #308]	; (800e950 <tcp_receive+0xb20>)
 800e81a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e81c:	4b47      	ldr	r3, [pc, #284]	; (800e93c <tcp_receive+0xb0c>)
 800e81e:	2200      	movs	r2, #0
 800e820:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e822:	4b46      	ldr	r3, [pc, #280]	; (800e93c <tcp_receive+0xb0c>)
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	899b      	ldrh	r3, [r3, #12]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fa fe28 	bl	8009480 <lwip_htons>
 800e830:	4603      	mov	r3, r0
 800e832:	b2db      	uxtb	r3, r3
 800e834:	f003 0301 	and.w	r3, r3, #1
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 80b8 	beq.w	800e9ae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e83e:	4b45      	ldr	r3, [pc, #276]	; (800e954 <tcp_receive+0xb24>)
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	f043 0320 	orr.w	r3, r3, #32
 800e846:	b2da      	uxtb	r2, r3
 800e848:	4b42      	ldr	r3, [pc, #264]	; (800e954 <tcp_receive+0xb24>)
 800e84a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e84c:	e0af      	b.n	800e9ae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e852:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	4a36      	ldr	r2, [pc, #216]	; (800e938 <tcp_receive+0xb08>)
 800e85e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	891b      	ldrh	r3, [r3, #8]
 800e864:	461c      	mov	r4, r3
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	899b      	ldrh	r3, [r3, #12]
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fa fe06 	bl	8009480 <lwip_htons>
 800e874:	4603      	mov	r3, r0
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 0303 	and.w	r3, r3, #3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <tcp_receive+0xa54>
 800e880:	2301      	movs	r3, #1
 800e882:	e000      	b.n	800e886 <tcp_receive+0xa56>
 800e884:	2300      	movs	r3, #0
 800e886:	191a      	adds	r2, r3, r4
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e88c:	441a      	add	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e896:	461c      	mov	r4, r3
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	891b      	ldrh	r3, [r3, #8]
 800e89c:	461d      	mov	r5, r3
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	899b      	ldrh	r3, [r3, #12]
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fa fdea 	bl	8009480 <lwip_htons>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	f003 0303 	and.w	r3, r3, #3
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <tcp_receive+0xa8c>
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e000      	b.n	800e8be <tcp_receive+0xa8e>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	442b      	add	r3, r5
 800e8c0:	429c      	cmp	r4, r3
 800e8c2:	d206      	bcs.n	800e8d2 <tcp_receive+0xaa2>
 800e8c4:	4b1e      	ldr	r3, [pc, #120]	; (800e940 <tcp_receive+0xb10>)
 800e8c6:	f240 622b 	movw	r2, #1579	; 0x62b
 800e8ca:	4923      	ldr	r1, [pc, #140]	; (800e958 <tcp_receive+0xb28>)
 800e8cc:	481e      	ldr	r0, [pc, #120]	; (800e948 <tcp_receive+0xb18>)
 800e8ce:	f004 fce5 	bl	801329c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	891b      	ldrh	r3, [r3, #8]
 800e8d6:	461c      	mov	r4, r3
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	899b      	ldrh	r3, [r3, #12]
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fa fdcd 	bl	8009480 <lwip_htons>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	f003 0303 	and.w	r3, r3, #3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <tcp_receive+0xac6>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e000      	b.n	800e8f8 <tcp_receive+0xac8>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	1919      	adds	r1, r3, r4
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e8fe:	b28b      	uxth	r3, r1
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	b29a      	uxth	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7fc ff47 	bl	800b79c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	891b      	ldrh	r3, [r3, #8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d028      	beq.n	800e96a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e918:	4b0d      	ldr	r3, [pc, #52]	; (800e950 <tcp_receive+0xb20>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01d      	beq.n	800e95c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e920:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <tcp_receive+0xb20>)
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	4619      	mov	r1, r3
 800e92a:	4610      	mov	r0, r2
 800e92c:	f7fc fa64 	bl	800adf8 <pbuf_cat>
 800e930:	e018      	b.n	800e964 <tcp_receive+0xb34>
 800e932:	bf00      	nop
 800e934:	2400504e 	.word	0x2400504e
 800e938:	24005044 	.word	0x24005044
 800e93c:	24005024 	.word	0x24005024
 800e940:	0801564c 	.word	0x0801564c
 800e944:	08015a2c 	.word	0x08015a2c
 800e948:	08015698 	.word	0x08015698
 800e94c:	08015a68 	.word	0x08015a68
 800e950:	24005054 	.word	0x24005054
 800e954:	24005051 	.word	0x24005051
 800e958:	08015a88 	.word	0x08015a88
            } else {
              recv_data = cseg->p;
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	4a70      	ldr	r2, [pc, #448]	; (800eb24 <tcp_receive+0xcf4>)
 800e962:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	2200      	movs	r2, #0
 800e968:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	899b      	ldrh	r3, [r3, #12]
 800e970:	b29b      	uxth	r3, r3
 800e972:	4618      	mov	r0, r3
 800e974:	f7fa fd84 	bl	8009480 <lwip_htons>
 800e978:	4603      	mov	r3, r0
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	f003 0301 	and.w	r3, r3, #1
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00d      	beq.n	800e9a0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e984:	4b68      	ldr	r3, [pc, #416]	; (800eb28 <tcp_receive+0xcf8>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	f043 0320 	orr.w	r3, r3, #32
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	4b66      	ldr	r3, [pc, #408]	; (800eb28 <tcp_receive+0xcf8>)
 800e990:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	7d1b      	ldrb	r3, [r3, #20]
 800e996:	2b04      	cmp	r3, #4
 800e998:	d102      	bne.n	800e9a0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2207      	movs	r2, #7
 800e99e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e9a8:	68b8      	ldr	r0, [r7, #8]
 800e9aa:	f7fd fbd6 	bl	800c15a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d008      	beq.n	800e9c8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	f43f af43 	beq.w	800e84e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	8b5b      	ldrh	r3, [r3, #26]
 800e9cc:	f003 0301 	and.w	r3, r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00e      	beq.n	800e9f2 <tcp_receive+0xbc2>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	8b5b      	ldrh	r3, [r3, #26]
 800e9d8:	f023 0301 	bic.w	r3, r3, #1
 800e9dc:	b29a      	uxth	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	835a      	strh	r2, [r3, #26]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	8b5b      	ldrh	r3, [r3, #26]
 800e9e6:	f043 0302 	orr.w	r3, r3, #2
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e9f0:	e188      	b.n	800ed04 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	8b5b      	ldrh	r3, [r3, #26]
 800e9f6:	f043 0301 	orr.w	r3, r3, #1
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ea00:	e180      	b.n	800ed04 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d106      	bne.n	800ea18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ea0a:	4848      	ldr	r0, [pc, #288]	; (800eb2c <tcp_receive+0xcfc>)
 800ea0c:	f7fd fbbe 	bl	800c18c <tcp_seg_copy>
 800ea10:	4602      	mov	r2, r0
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	675a      	str	r2, [r3, #116]	; 0x74
 800ea16:	e16d      	b.n	800ecf4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea20:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea22:	e157      	b.n	800ecd4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ea24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	685a      	ldr	r2, [r3, #4]
 800ea2a:	4b41      	ldr	r3, [pc, #260]	; (800eb30 <tcp_receive+0xd00>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d11d      	bne.n	800ea6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ea32:	4b3e      	ldr	r3, [pc, #248]	; (800eb2c <tcp_receive+0xcfc>)
 800ea34:	891a      	ldrh	r2, [r3, #8]
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	891b      	ldrh	r3, [r3, #8]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	f240 814f 	bls.w	800ecde <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ea40:	483a      	ldr	r0, [pc, #232]	; (800eb2c <tcp_receive+0xcfc>)
 800ea42:	f7fd fba3 	bl	800c18c <tcp_seg_copy>
 800ea46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f000 8149 	beq.w	800ece2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ea50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d003      	beq.n	800ea5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ea56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea58:	697a      	ldr	r2, [r7, #20]
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	e002      	b.n	800ea64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	697a      	ldr	r2, [r7, #20]
 800ea62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ea64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea66:	6978      	ldr	r0, [r7, #20]
 800ea68:	f7ff f8de 	bl	800dc28 <tcp_oos_insert_segment>
                }
                break;
 800ea6c:	e139      	b.n	800ece2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ea6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d117      	bne.n	800eaa4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ea74:	4b2e      	ldr	r3, [pc, #184]	; (800eb30 <tcp_receive+0xd00>)
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	da57      	bge.n	800eb34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ea84:	4829      	ldr	r0, [pc, #164]	; (800eb2c <tcp_receive+0xcfc>)
 800ea86:	f7fd fb81 	bl	800c18c <tcp_seg_copy>
 800ea8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 8129 	beq.w	800ece6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	69ba      	ldr	r2, [r7, #24]
 800ea98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ea9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea9c:	69b8      	ldr	r0, [r7, #24]
 800ea9e:	f7ff f8c3 	bl	800dc28 <tcp_oos_insert_segment>
                  }
                  break;
 800eaa2:	e120      	b.n	800ece6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800eaa4:	4b22      	ldr	r3, [pc, #136]	; (800eb30 <tcp_receive+0xd00>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	3b01      	subs	r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	db3e      	blt.n	800eb34 <tcp_receive+0xd04>
 800eab6:	4b1e      	ldr	r3, [pc, #120]	; (800eb30 <tcp_receive+0xd00>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	3301      	adds	r3, #1
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	dc35      	bgt.n	800eb34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800eac8:	4818      	ldr	r0, [pc, #96]	; (800eb2c <tcp_receive+0xcfc>)
 800eaca:	f7fd fb5f 	bl	800c18c <tcp_seg_copy>
 800eace:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	f000 8109 	beq.w	800ecea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ead8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eae0:	8912      	ldrh	r2, [r2, #8]
 800eae2:	441a      	add	r2, r3
 800eae4:	4b12      	ldr	r3, [pc, #72]	; (800eb30 <tcp_receive+0xd00>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dd12      	ble.n	800eb14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800eaee:	4b10      	ldr	r3, [pc, #64]	; (800eb30 <tcp_receive+0xd00>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800eb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb06:	685a      	ldr	r2, [r3, #4]
 800eb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0a:	891b      	ldrh	r3, [r3, #8]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	4610      	mov	r0, r2
 800eb10:	f7fb ff1e 	bl	800a950 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800eb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb16:	69fa      	ldr	r2, [r7, #28]
 800eb18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800eb1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb1c:	69f8      	ldr	r0, [r7, #28]
 800eb1e:	f7ff f883 	bl	800dc28 <tcp_oos_insert_segment>
                  }
                  break;
 800eb22:	e0e2      	b.n	800ecea <tcp_receive+0xeba>
 800eb24:	24005054 	.word	0x24005054
 800eb28:	24005051 	.word	0x24005051
 800eb2c:	24005024 	.word	0x24005024
 800eb30:	24005044 	.word	0x24005044
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800eb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f040 80c6 	bne.w	800ecce <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800eb42:	4b80      	ldr	r3, [pc, #512]	; (800ed44 <tcp_receive+0xf14>)
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f340 80bd 	ble.w	800ecce <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fa fc8f 	bl	8009480 <lwip_htons>
 800eb62:	4603      	mov	r3, r0
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f040 80bf 	bne.w	800ecee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800eb70:	4875      	ldr	r0, [pc, #468]	; (800ed48 <tcp_receive+0xf18>)
 800eb72:	f7fd fb0b 	bl	800c18c <tcp_seg_copy>
 800eb76:	4602      	mov	r2, r0
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800eb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f000 80b6 	beq.w	800ecf2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800eb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb8e:	8912      	ldrh	r2, [r2, #8]
 800eb90:	441a      	add	r2, r3
 800eb92:	4b6c      	ldr	r3, [pc, #432]	; (800ed44 <tcp_receive+0xf14>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	1ad3      	subs	r3, r2, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	dd12      	ble.n	800ebc2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800eb9c:	4b69      	ldr	r3, [pc, #420]	; (800ed44 <tcp_receive+0xf14>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	685a      	ldr	r2, [r3, #4]
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	891b      	ldrh	r3, [r3, #8]
 800ebba:	4619      	mov	r1, r3
 800ebbc:	4610      	mov	r0, r2
 800ebbe:	f7fb fec7 	bl	800a950 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ebc2:	4b62      	ldr	r3, [pc, #392]	; (800ed4c <tcp_receive+0xf1c>)
 800ebc4:	881b      	ldrh	r3, [r3, #0]
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	4b5e      	ldr	r3, [pc, #376]	; (800ed44 <tcp_receive+0xf14>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	441a      	add	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd2:	6879      	ldr	r1, [r7, #4]
 800ebd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebd6:	440b      	add	r3, r1
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f340 8089 	ble.w	800ecf2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ebe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	68db      	ldr	r3, [r3, #12]
 800ebe6:	899b      	ldrh	r3, [r3, #12]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fa fc48 	bl	8009480 <lwip_htons>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	f003 0301 	and.w	r3, r3, #1
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d022      	beq.n	800ec42 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	899b      	ldrh	r3, [r3, #12]
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	b21b      	sxth	r3, r3
 800ec08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec0c:	b21c      	sxth	r4, r3
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	899b      	ldrh	r3, [r3, #12]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fa fc31 	bl	8009480 <lwip_htons>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fa fc28 	bl	8009480 <lwip_htons>
 800ec30:	4603      	mov	r3, r0
 800ec32:	b21b      	sxth	r3, r3
 800ec34:	4323      	orrs	r3, r4
 800ec36:	b21a      	sxth	r2, r3
 800ec38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	b292      	uxth	r2, r2
 800ec40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec4c:	4413      	add	r3, r2
 800ec4e:	b299      	uxth	r1, r3
 800ec50:	4b3c      	ldr	r3, [pc, #240]	; (800ed44 <tcp_receive+0xf14>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	1a8a      	subs	r2, r1, r2
 800ec5c:	b292      	uxth	r2, r2
 800ec5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ec60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	685a      	ldr	r2, [r3, #4]
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	891b      	ldrh	r3, [r3, #8]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	4610      	mov	r0, r2
 800ec70:	f7fb fe6e 	bl	800a950 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ec74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	891c      	ldrh	r4, [r3, #8]
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	899b      	ldrh	r3, [r3, #12]
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fa fbfb 	bl	8009480 <lwip_htons>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	f003 0303 	and.w	r3, r3, #3
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <tcp_receive+0xe6a>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e000      	b.n	800ec9c <tcp_receive+0xe6c>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	4423      	add	r3, r4
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	4b2a      	ldr	r3, [pc, #168]	; (800ed4c <tcp_receive+0xf1c>)
 800eca2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eca4:	4b29      	ldr	r3, [pc, #164]	; (800ed4c <tcp_receive+0xf1c>)
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	4b26      	ldr	r3, [pc, #152]	; (800ed44 <tcp_receive+0xf14>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	441a      	add	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb4:	6879      	ldr	r1, [r7, #4]
 800ecb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecb8:	440b      	add	r3, r1
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d019      	beq.n	800ecf2 <tcp_receive+0xec2>
 800ecbe:	4b24      	ldr	r3, [pc, #144]	; (800ed50 <tcp_receive+0xf20>)
 800ecc0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ecc4:	4923      	ldr	r1, [pc, #140]	; (800ed54 <tcp_receive+0xf24>)
 800ecc6:	4824      	ldr	r0, [pc, #144]	; (800ed58 <tcp_receive+0xf28>)
 800ecc8:	f004 fae8 	bl	801329c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800eccc:	e011      	b.n	800ecf2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ecce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f47f aea4 	bne.w	800ea24 <tcp_receive+0xbf4>
 800ecdc:	e00a      	b.n	800ecf4 <tcp_receive+0xec4>
                break;
 800ecde:	bf00      	nop
 800ece0:	e008      	b.n	800ecf4 <tcp_receive+0xec4>
                break;
 800ece2:	bf00      	nop
 800ece4:	e006      	b.n	800ecf4 <tcp_receive+0xec4>
                  break;
 800ece6:	bf00      	nop
 800ece8:	e004      	b.n	800ecf4 <tcp_receive+0xec4>
                  break;
 800ecea:	bf00      	nop
 800ecec:	e002      	b.n	800ecf4 <tcp_receive+0xec4>
                  break;
 800ecee:	bf00      	nop
 800ecf0:	e000      	b.n	800ecf4 <tcp_receive+0xec4>
                break;
 800ecf2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f001 fa33 	bl	8010160 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ecfa:	e003      	b.n	800ed04 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f001 fa2f 	bl	8010160 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ed02:	e01a      	b.n	800ed3a <tcp_receive+0xf0a>
 800ed04:	e019      	b.n	800ed3a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ed06:	4b0f      	ldr	r3, [pc, #60]	; (800ed44 <tcp_receive+0xf14>)
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	db0a      	blt.n	800ed2a <tcp_receive+0xefa>
 800ed14:	4b0b      	ldr	r3, [pc, #44]	; (800ed44 <tcp_receive+0xf14>)
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1c:	6879      	ldr	r1, [r7, #4]
 800ed1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed20:	440b      	add	r3, r1
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	3301      	adds	r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dd07      	ble.n	800ed3a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	8b5b      	ldrh	r3, [r3, #26]
 800ed2e:	f043 0302 	orr.w	r3, r3, #2
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ed38:	e7ff      	b.n	800ed3a <tcp_receive+0xf0a>
 800ed3a:	bf00      	nop
 800ed3c:	3750      	adds	r7, #80	; 0x50
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bdb0      	pop	{r4, r5, r7, pc}
 800ed42:	bf00      	nop
 800ed44:	24005044 	.word	0x24005044
 800ed48:	24005024 	.word	0x24005024
 800ed4c:	2400504e 	.word	0x2400504e
 800ed50:	0801564c 	.word	0x0801564c
 800ed54:	080159f4 	.word	0x080159f4
 800ed58:	08015698 	.word	0x08015698

0800ed5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ed62:	4b15      	ldr	r3, [pc, #84]	; (800edb8 <tcp_get_next_optbyte+0x5c>)
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	1c5a      	adds	r2, r3, #1
 800ed68:	b291      	uxth	r1, r2
 800ed6a:	4a13      	ldr	r2, [pc, #76]	; (800edb8 <tcp_get_next_optbyte+0x5c>)
 800ed6c:	8011      	strh	r1, [r2, #0]
 800ed6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ed70:	4b12      	ldr	r3, [pc, #72]	; (800edbc <tcp_get_next_optbyte+0x60>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d004      	beq.n	800ed82 <tcp_get_next_optbyte+0x26>
 800ed78:	4b11      	ldr	r3, [pc, #68]	; (800edc0 <tcp_get_next_optbyte+0x64>)
 800ed7a:	881b      	ldrh	r3, [r3, #0]
 800ed7c:	88fa      	ldrh	r2, [r7, #6]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d208      	bcs.n	800ed94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ed82:	4b10      	ldr	r3, [pc, #64]	; (800edc4 <tcp_get_next_optbyte+0x68>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	3314      	adds	r3, #20
 800ed88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ed8a:	88fb      	ldrh	r3, [r7, #6]
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	4413      	add	r3, r2
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	e00b      	b.n	800edac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ed94:	88fb      	ldrh	r3, [r7, #6]
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	4b09      	ldr	r3, [pc, #36]	; (800edc0 <tcp_get_next_optbyte+0x64>)
 800ed9a:	881b      	ldrh	r3, [r3, #0]
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800eda2:	4b06      	ldr	r3, [pc, #24]	; (800edbc <tcp_get_next_optbyte+0x60>)
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	797b      	ldrb	r3, [r7, #5]
 800eda8:	4413      	add	r3, r2
 800edaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800edac:	4618      	mov	r0, r3
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr
 800edb8:	24005040 	.word	0x24005040
 800edbc:	2400503c 	.word	0x2400503c
 800edc0:	2400503a 	.word	0x2400503a
 800edc4:	24005034 	.word	0x24005034

0800edc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d106      	bne.n	800ede4 <tcp_parseopt+0x1c>
 800edd6:	4b32      	ldr	r3, [pc, #200]	; (800eea0 <tcp_parseopt+0xd8>)
 800edd8:	f240 727d 	movw	r2, #1917	; 0x77d
 800eddc:	4931      	ldr	r1, [pc, #196]	; (800eea4 <tcp_parseopt+0xdc>)
 800edde:	4832      	ldr	r0, [pc, #200]	; (800eea8 <tcp_parseopt+0xe0>)
 800ede0:	f004 fa5c 	bl	801329c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ede4:	4b31      	ldr	r3, [pc, #196]	; (800eeac <tcp_parseopt+0xe4>)
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d055      	beq.n	800ee98 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800edec:	4b30      	ldr	r3, [pc, #192]	; (800eeb0 <tcp_parseopt+0xe8>)
 800edee:	2200      	movs	r2, #0
 800edf0:	801a      	strh	r2, [r3, #0]
 800edf2:	e045      	b.n	800ee80 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800edf4:	f7ff ffb2 	bl	800ed5c <tcp_get_next_optbyte>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	d006      	beq.n	800ee10 <tcp_parseopt+0x48>
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	dc2b      	bgt.n	800ee5e <tcp_parseopt+0x96>
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d041      	beq.n	800ee8e <tcp_parseopt+0xc6>
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d127      	bne.n	800ee5e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ee0e:	e037      	b.n	800ee80 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ee10:	f7ff ffa4 	bl	800ed5c <tcp_get_next_optbyte>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b04      	cmp	r3, #4
 800ee18:	d13b      	bne.n	800ee92 <tcp_parseopt+0xca>
 800ee1a:	4b25      	ldr	r3, [pc, #148]	; (800eeb0 <tcp_parseopt+0xe8>)
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	4a22      	ldr	r2, [pc, #136]	; (800eeac <tcp_parseopt+0xe4>)
 800ee22:	8812      	ldrh	r2, [r2, #0]
 800ee24:	4293      	cmp	r3, r2
 800ee26:	da34      	bge.n	800ee92 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ee28:	f7ff ff98 	bl	800ed5c <tcp_get_next_optbyte>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	021b      	lsls	r3, r3, #8
 800ee32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ee34:	f7ff ff92 	bl	800ed5c <tcp_get_next_optbyte>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	89bb      	ldrh	r3, [r7, #12]
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ee42:	89bb      	ldrh	r3, [r7, #12]
 800ee44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ee48:	d804      	bhi.n	800ee54 <tcp_parseopt+0x8c>
 800ee4a:	89bb      	ldrh	r3, [r7, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d001      	beq.n	800ee54 <tcp_parseopt+0x8c>
 800ee50:	89ba      	ldrh	r2, [r7, #12]
 800ee52:	e001      	b.n	800ee58 <tcp_parseopt+0x90>
 800ee54:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ee5c:	e010      	b.n	800ee80 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ee5e:	f7ff ff7d 	bl	800ed5c <tcp_get_next_optbyte>
 800ee62:	4603      	mov	r3, r0
 800ee64:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ee66:	7afb      	ldrb	r3, [r7, #11]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d914      	bls.n	800ee96 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ee6c:	7afb      	ldrb	r3, [r7, #11]
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	4b0f      	ldr	r3, [pc, #60]	; (800eeb0 <tcp_parseopt+0xe8>)
 800ee72:	881b      	ldrh	r3, [r3, #0]
 800ee74:	4413      	add	r3, r2
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	3b02      	subs	r3, #2
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	4b0c      	ldr	r3, [pc, #48]	; (800eeb0 <tcp_parseopt+0xe8>)
 800ee7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ee80:	4b0b      	ldr	r3, [pc, #44]	; (800eeb0 <tcp_parseopt+0xe8>)
 800ee82:	881a      	ldrh	r2, [r3, #0]
 800ee84:	4b09      	ldr	r3, [pc, #36]	; (800eeac <tcp_parseopt+0xe4>)
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d3b3      	bcc.n	800edf4 <tcp_parseopt+0x2c>
 800ee8c:	e004      	b.n	800ee98 <tcp_parseopt+0xd0>
          return;
 800ee8e:	bf00      	nop
 800ee90:	e002      	b.n	800ee98 <tcp_parseopt+0xd0>
            return;
 800ee92:	bf00      	nop
 800ee94:	e000      	b.n	800ee98 <tcp_parseopt+0xd0>
            return;
 800ee96:	bf00      	nop
      }
    }
  }
}
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	0801564c 	.word	0x0801564c
 800eea4:	08015ab0 	.word	0x08015ab0
 800eea8:	08015698 	.word	0x08015698
 800eeac:	24005038 	.word	0x24005038
 800eeb0:	24005040 	.word	0x24005040

0800eeb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800eeb8:	4b05      	ldr	r3, [pc, #20]	; (800eed0 <tcp_trigger_input_pcb_close+0x1c>)
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	f043 0310 	orr.w	r3, r3, #16
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	4b03      	ldr	r3, [pc, #12]	; (800eed0 <tcp_trigger_input_pcb_close+0x1c>)
 800eec4:	701a      	strb	r2, [r3, #0]
}
 800eec6:	bf00      	nop
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	24005051 	.word	0x24005051

0800eed4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00a      	beq.n	800eefc <tcp_route+0x28>
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	7a1b      	ldrb	r3, [r3, #8]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d006      	beq.n	800eefc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	7a1b      	ldrb	r3, [r3, #8]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fb fb24 	bl	800a540 <netif_get_by_index>
 800eef8:	4603      	mov	r3, r0
 800eefa:	e003      	b.n	800ef04 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f002 fead 	bl	8011c5c <ip4_route>
 800ef02:	4603      	mov	r3, r0
  }
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ef0c:	b590      	push	{r4, r7, lr}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	603b      	str	r3, [r7, #0]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d105      	bne.n	800ef2e <tcp_create_segment+0x22>
 800ef22:	4b44      	ldr	r3, [pc, #272]	; (800f034 <tcp_create_segment+0x128>)
 800ef24:	22a3      	movs	r2, #163	; 0xa3
 800ef26:	4944      	ldr	r1, [pc, #272]	; (800f038 <tcp_create_segment+0x12c>)
 800ef28:	4844      	ldr	r0, [pc, #272]	; (800f03c <tcp_create_segment+0x130>)
 800ef2a:	f004 f9b7 	bl	801329c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d105      	bne.n	800ef40 <tcp_create_segment+0x34>
 800ef34:	4b3f      	ldr	r3, [pc, #252]	; (800f034 <tcp_create_segment+0x128>)
 800ef36:	22a4      	movs	r2, #164	; 0xa4
 800ef38:	4941      	ldr	r1, [pc, #260]	; (800f040 <tcp_create_segment+0x134>)
 800ef3a:	4840      	ldr	r0, [pc, #256]	; (800f03c <tcp_create_segment+0x130>)
 800ef3c:	f004 f9ae 	bl	801329c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ef40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	f003 0304 	and.w	r3, r3, #4
 800ef4c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ef4e:	2003      	movs	r0, #3
 800ef50:	f7fa ff6a 	bl	8009e28 <memp_malloc>
 800ef54:	6138      	str	r0, [r7, #16]
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d104      	bne.n	800ef66 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ef5c:	68b8      	ldr	r0, [r7, #8]
 800ef5e:	f7fb fe7d 	bl	800ac5c <pbuf_free>
    return NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	e061      	b.n	800f02a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ef6c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	2200      	movs	r2, #0
 800ef72:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	891a      	ldrh	r2, [r3, #8]
 800ef7e:	7dfb      	ldrb	r3, [r7, #23]
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d205      	bcs.n	800ef92 <tcp_create_segment+0x86>
 800ef86:	4b2b      	ldr	r3, [pc, #172]	; (800f034 <tcp_create_segment+0x128>)
 800ef88:	22b0      	movs	r2, #176	; 0xb0
 800ef8a:	492e      	ldr	r1, [pc, #184]	; (800f044 <tcp_create_segment+0x138>)
 800ef8c:	482b      	ldr	r0, [pc, #172]	; (800f03c <tcp_create_segment+0x130>)
 800ef8e:	f004 f985 	bl	801329c <iprintf>
  seg->len = p->tot_len - optlen;
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	891a      	ldrh	r2, [r3, #8]
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800efa2:	2114      	movs	r1, #20
 800efa4:	68b8      	ldr	r0, [r7, #8]
 800efa6:	f7fb fdc3 	bl	800ab30 <pbuf_add_header>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800efb0:	6938      	ldr	r0, [r7, #16]
 800efb2:	f7fd f8d2 	bl	800c15a <tcp_seg_free>
    return NULL;
 800efb6:	2300      	movs	r3, #0
 800efb8:	e037      	b.n	800f02a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	685a      	ldr	r2, [r3, #4]
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	8ada      	ldrh	r2, [r3, #22]
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	68dc      	ldr	r4, [r3, #12]
 800efcc:	4610      	mov	r0, r2
 800efce:	f7fa fa57 	bl	8009480 <lwip_htons>
 800efd2:	4603      	mov	r3, r0
 800efd4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	8b1a      	ldrh	r2, [r3, #24]
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	68dc      	ldr	r4, [r3, #12]
 800efde:	4610      	mov	r0, r2
 800efe0:	f7fa fa4e 	bl	8009480 <lwip_htons>
 800efe4:	4603      	mov	r3, r0
 800efe6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	68dc      	ldr	r4, [r3, #12]
 800efec:	6838      	ldr	r0, [r7, #0]
 800efee:	f7fa fa5c 	bl	80094aa <lwip_htonl>
 800eff2:	4603      	mov	r3, r0
 800eff4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eff6:	7dfb      	ldrb	r3, [r7, #23]
 800eff8:	089b      	lsrs	r3, r3, #2
 800effa:	b2db      	uxtb	r3, r3
 800effc:	b29b      	uxth	r3, r3
 800effe:	3305      	adds	r3, #5
 800f000:	b29b      	uxth	r3, r3
 800f002:	031b      	lsls	r3, r3, #12
 800f004:	b29a      	uxth	r2, r3
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	b29b      	uxth	r3, r3
 800f00a:	4313      	orrs	r3, r2
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	68dc      	ldr	r4, [r3, #12]
 800f012:	4610      	mov	r0, r2
 800f014:	f7fa fa34 	bl	8009480 <lwip_htons>
 800f018:	4603      	mov	r3, r0
 800f01a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	749a      	strb	r2, [r3, #18]
 800f024:	2200      	movs	r2, #0
 800f026:	74da      	strb	r2, [r3, #19]
  return seg;
 800f028:	693b      	ldr	r3, [r7, #16]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	371c      	adds	r7, #28
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd90      	pop	{r4, r7, pc}
 800f032:	bf00      	nop
 800f034:	08015acc 	.word	0x08015acc
 800f038:	08015b00 	.word	0x08015b00
 800f03c:	08015b20 	.word	0x08015b20
 800f040:	08015b48 	.word	0x08015b48
 800f044:	08015b6c 	.word	0x08015b6c

0800f048 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f048:	b590      	push	{r4, r7, lr}
 800f04a:	b08b      	sub	sp, #44	; 0x2c
 800f04c:	af02      	add	r7, sp, #8
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f054:	2300      	movs	r3, #0
 800f056:	61fb      	str	r3, [r7, #28]
 800f058:	2300      	movs	r3, #0
 800f05a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f05c:	2300      	movs	r3, #0
 800f05e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d106      	bne.n	800f074 <tcp_split_unsent_seg+0x2c>
 800f066:	4b95      	ldr	r3, [pc, #596]	; (800f2bc <tcp_split_unsent_seg+0x274>)
 800f068:	f240 324b 	movw	r2, #843	; 0x34b
 800f06c:	4994      	ldr	r1, [pc, #592]	; (800f2c0 <tcp_split_unsent_seg+0x278>)
 800f06e:	4895      	ldr	r0, [pc, #596]	; (800f2c4 <tcp_split_unsent_seg+0x27c>)
 800f070:	f004 f914 	bl	801329c <iprintf>

  useg = pcb->unsent;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f078:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d102      	bne.n	800f086 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f080:	f04f 33ff 	mov.w	r3, #4294967295
 800f084:	e116      	b.n	800f2b4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f086:	887b      	ldrh	r3, [r7, #2]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d109      	bne.n	800f0a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f08c:	4b8b      	ldr	r3, [pc, #556]	; (800f2bc <tcp_split_unsent_seg+0x274>)
 800f08e:	f240 3253 	movw	r2, #851	; 0x353
 800f092:	498d      	ldr	r1, [pc, #564]	; (800f2c8 <tcp_split_unsent_seg+0x280>)
 800f094:	488b      	ldr	r0, [pc, #556]	; (800f2c4 <tcp_split_unsent_seg+0x27c>)
 800f096:	f004 f901 	bl	801329c <iprintf>
    return ERR_VAL;
 800f09a:	f06f 0305 	mvn.w	r3, #5
 800f09e:	e109      	b.n	800f2b4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	891b      	ldrh	r3, [r3, #8]
 800f0a4:	887a      	ldrh	r2, [r7, #2]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d301      	bcc.n	800f0ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	e102      	b.n	800f2b4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0b2:	887a      	ldrh	r2, [r7, #2]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d906      	bls.n	800f0c6 <tcp_split_unsent_seg+0x7e>
 800f0b8:	4b80      	ldr	r3, [pc, #512]	; (800f2bc <tcp_split_unsent_seg+0x274>)
 800f0ba:	f240 325b 	movw	r2, #859	; 0x35b
 800f0be:	4983      	ldr	r1, [pc, #524]	; (800f2cc <tcp_split_unsent_seg+0x284>)
 800f0c0:	4880      	ldr	r0, [pc, #512]	; (800f2c4 <tcp_split_unsent_seg+0x27c>)
 800f0c2:	f004 f8eb 	bl	801329c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	891b      	ldrh	r3, [r3, #8]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d106      	bne.n	800f0dc <tcp_split_unsent_seg+0x94>
 800f0ce:	4b7b      	ldr	r3, [pc, #492]	; (800f2bc <tcp_split_unsent_seg+0x274>)
 800f0d0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f0d4:	497e      	ldr	r1, [pc, #504]	; (800f2d0 <tcp_split_unsent_seg+0x288>)
 800f0d6:	487b      	ldr	r0, [pc, #492]	; (800f2c4 <tcp_split_unsent_seg+0x27c>)
 800f0d8:	f004 f8e0 	bl	801329c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	7a9b      	ldrb	r3, [r3, #10]
 800f0e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f0e2:	7bfb      	ldrb	r3, [r7, #15]
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	891a      	ldrh	r2, [r3, #8]
 800f0f2:	887b      	ldrh	r3, [r7, #2]
 800f0f4:	1ad3      	subs	r3, r2, r3
 800f0f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f0f8:	7bbb      	ldrb	r3, [r7, #14]
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	89bb      	ldrh	r3, [r7, #12]
 800f0fe:	4413      	add	r3, r2
 800f100:	b29b      	uxth	r3, r3
 800f102:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f106:	4619      	mov	r1, r3
 800f108:	2036      	movs	r0, #54	; 0x36
 800f10a:	f7fb fac3 	bl	800a694 <pbuf_alloc>
 800f10e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	2b00      	cmp	r3, #0
 800f114:	f000 80b7 	beq.w	800f286 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	891a      	ldrh	r2, [r3, #8]
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	891b      	ldrh	r3, [r3, #8]
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	b29a      	uxth	r2, r3
 800f126:	887b      	ldrh	r3, [r7, #2]
 800f128:	4413      	add	r3, r2
 800f12a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	6858      	ldr	r0, [r3, #4]
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	685a      	ldr	r2, [r3, #4]
 800f134:	7bbb      	ldrb	r3, [r7, #14]
 800f136:	18d1      	adds	r1, r2, r3
 800f138:	897b      	ldrh	r3, [r7, #10]
 800f13a:	89ba      	ldrh	r2, [r7, #12]
 800f13c:	f7fb ff84 	bl	800b048 <pbuf_copy_partial>
 800f140:	4603      	mov	r3, r0
 800f142:	461a      	mov	r2, r3
 800f144:	89bb      	ldrh	r3, [r7, #12]
 800f146:	4293      	cmp	r3, r2
 800f148:	f040 809f 	bne.w	800f28a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	899b      	ldrh	r3, [r3, #12]
 800f152:	b29b      	uxth	r3, r3
 800f154:	4618      	mov	r0, r3
 800f156:	f7fa f993 	bl	8009480 <lwip_htons>
 800f15a:	4603      	mov	r3, r0
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f162:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f164:	2300      	movs	r3, #0
 800f166:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f168:	7efb      	ldrb	r3, [r7, #27]
 800f16a:	f003 0308 	and.w	r3, r3, #8
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d007      	beq.n	800f182 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f172:	7efb      	ldrb	r3, [r7, #27]
 800f174:	f023 0308 	bic.w	r3, r3, #8
 800f178:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f17a:	7ebb      	ldrb	r3, [r7, #26]
 800f17c:	f043 0308 	orr.w	r3, r3, #8
 800f180:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f182:	7efb      	ldrb	r3, [r7, #27]
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d007      	beq.n	800f19c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f18c:	7efb      	ldrb	r3, [r7, #27]
 800f18e:	f023 0301 	bic.w	r3, r3, #1
 800f192:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f194:	7ebb      	ldrb	r3, [r7, #26]
 800f196:	f043 0301 	orr.w	r3, r3, #1
 800f19a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fa f981 	bl	80094aa <lwip_htonl>
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	887b      	ldrh	r3, [r7, #2]
 800f1ac:	18d1      	adds	r1, r2, r3
 800f1ae:	7eba      	ldrb	r2, [r7, #26]
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	6939      	ldr	r1, [r7, #16]
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f7ff fea7 	bl	800ef0c <tcp_create_segment>
 800f1be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d063      	beq.n	800f28e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fb fdd4 	bl	800ad78 <pbuf_clen>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	6858      	ldr	r0, [r3, #4]
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	891a      	ldrh	r2, [r3, #8]
 800f1ee:	89bb      	ldrh	r3, [r7, #12]
 800f1f0:	1ad3      	subs	r3, r2, r3
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	f7fb fbab 	bl	800a950 <pbuf_realloc>
  useg->len -= remainder;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	891a      	ldrh	r2, [r3, #8]
 800f1fe:	89bb      	ldrh	r3, [r7, #12]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	b29a      	uxth	r2, r3
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	899b      	ldrh	r3, [r3, #12]
 800f20e:	b29c      	uxth	r4, r3
 800f210:	7efb      	ldrb	r3, [r7, #27]
 800f212:	b29b      	uxth	r3, r3
 800f214:	4618      	mov	r0, r3
 800f216:	f7fa f933 	bl	8009480 <lwip_htons>
 800f21a:	4603      	mov	r3, r0
 800f21c:	461a      	mov	r2, r3
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	4322      	orrs	r2, r4
 800f224:	b292      	uxth	r2, r2
 800f226:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fb fda3 	bl	800ad78 <pbuf_clen>
 800f232:	4603      	mov	r3, r0
 800f234:	461a      	mov	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f23c:	4413      	add	r3, r2
 800f23e:	b29a      	uxth	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fb fd94 	bl	800ad78 <pbuf_clen>
 800f250:	4603      	mov	r3, r0
 800f252:	461a      	mov	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f25a:	4413      	add	r3, r2
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	69fa      	ldr	r2, [r7, #28]
 800f270:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d103      	bne.n	800f282 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	e016      	b.n	800f2b4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f286:	bf00      	nop
 800f288:	e002      	b.n	800f290 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f28a:	bf00      	nop
 800f28c:	e000      	b.n	800f290 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f28e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d006      	beq.n	800f2a4 <tcp_split_unsent_seg+0x25c>
 800f296:	4b09      	ldr	r3, [pc, #36]	; (800f2bc <tcp_split_unsent_seg+0x274>)
 800f298:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f29c:	490d      	ldr	r1, [pc, #52]	; (800f2d4 <tcp_split_unsent_seg+0x28c>)
 800f29e:	4809      	ldr	r0, [pc, #36]	; (800f2c4 <tcp_split_unsent_seg+0x27c>)
 800f2a0:	f003 fffc 	bl	801329c <iprintf>
  if (p != NULL) {
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d002      	beq.n	800f2b0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f2aa:	6938      	ldr	r0, [r7, #16]
 800f2ac:	f7fb fcd6 	bl	800ac5c <pbuf_free>
  }

  return ERR_MEM;
 800f2b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3724      	adds	r7, #36	; 0x24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd90      	pop	{r4, r7, pc}
 800f2bc:	08015acc 	.word	0x08015acc
 800f2c0:	08015e60 	.word	0x08015e60
 800f2c4:	08015b20 	.word	0x08015b20
 800f2c8:	08015e84 	.word	0x08015e84
 800f2cc:	08015ea8 	.word	0x08015ea8
 800f2d0:	08015eb8 	.word	0x08015eb8
 800f2d4:	08015ec8 	.word	0x08015ec8

0800f2d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f2d8:	b590      	push	{r4, r7, lr}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d106      	bne.n	800f2f4 <tcp_send_fin+0x1c>
 800f2e6:	4b21      	ldr	r3, [pc, #132]	; (800f36c <tcp_send_fin+0x94>)
 800f2e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f2ec:	4920      	ldr	r1, [pc, #128]	; (800f370 <tcp_send_fin+0x98>)
 800f2ee:	4821      	ldr	r0, [pc, #132]	; (800f374 <tcp_send_fin+0x9c>)
 800f2f0:	f003 ffd4 	bl	801329c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d02e      	beq.n	800f35a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f300:	60fb      	str	r3, [r7, #12]
 800f302:	e002      	b.n	800f30a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1f8      	bne.n	800f304 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	899b      	ldrh	r3, [r3, #12]
 800f318:	b29b      	uxth	r3, r3
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fa f8b0 	bl	8009480 <lwip_htons>
 800f320:	4603      	mov	r3, r0
 800f322:	b2db      	uxtb	r3, r3
 800f324:	f003 0307 	and.w	r3, r3, #7
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d116      	bne.n	800f35a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	899b      	ldrh	r3, [r3, #12]
 800f332:	b29c      	uxth	r4, r3
 800f334:	2001      	movs	r0, #1
 800f336:	f7fa f8a3 	bl	8009480 <lwip_htons>
 800f33a:	4603      	mov	r3, r0
 800f33c:	461a      	mov	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	4322      	orrs	r2, r4
 800f344:	b292      	uxth	r2, r2
 800f346:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	8b5b      	ldrh	r3, [r3, #26]
 800f34c:	f043 0320 	orr.w	r3, r3, #32
 800f350:	b29a      	uxth	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	e004      	b.n	800f364 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f35a:	2101      	movs	r1, #1
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 f80b 	bl	800f378 <tcp_enqueue_flags>
 800f362:	4603      	mov	r3, r0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3714      	adds	r7, #20
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd90      	pop	{r4, r7, pc}
 800f36c:	08015acc 	.word	0x08015acc
 800f370:	08015ed4 	.word	0x08015ed4
 800f374:	08015b20 	.word	0x08015b20

0800f378 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08a      	sub	sp, #40	; 0x28
 800f37c:	af02      	add	r7, sp, #8
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	460b      	mov	r3, r1
 800f382:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f388:	2300      	movs	r3, #0
 800f38a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f38c:	78fb      	ldrb	r3, [r7, #3]
 800f38e:	f003 0303 	and.w	r3, r3, #3
 800f392:	2b00      	cmp	r3, #0
 800f394:	d106      	bne.n	800f3a4 <tcp_enqueue_flags+0x2c>
 800f396:	4b67      	ldr	r3, [pc, #412]	; (800f534 <tcp_enqueue_flags+0x1bc>)
 800f398:	f240 4211 	movw	r2, #1041	; 0x411
 800f39c:	4966      	ldr	r1, [pc, #408]	; (800f538 <tcp_enqueue_flags+0x1c0>)
 800f39e:	4867      	ldr	r0, [pc, #412]	; (800f53c <tcp_enqueue_flags+0x1c4>)
 800f3a0:	f003 ff7c 	bl	801329c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d106      	bne.n	800f3b8 <tcp_enqueue_flags+0x40>
 800f3aa:	4b62      	ldr	r3, [pc, #392]	; (800f534 <tcp_enqueue_flags+0x1bc>)
 800f3ac:	f240 4213 	movw	r2, #1043	; 0x413
 800f3b0:	4963      	ldr	r1, [pc, #396]	; (800f540 <tcp_enqueue_flags+0x1c8>)
 800f3b2:	4862      	ldr	r0, [pc, #392]	; (800f53c <tcp_enqueue_flags+0x1c4>)
 800f3b4:	f003 ff72 	bl	801329c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f3b8:	78fb      	ldrb	r3, [r7, #3]
 800f3ba:	f003 0302 	and.w	r3, r3, #2
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f3c6:	7ffb      	ldrb	r3, [r7, #31]
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f3d2:	7dfb      	ldrb	r3, [r7, #23]
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3da:	4619      	mov	r1, r3
 800f3dc:	2036      	movs	r0, #54	; 0x36
 800f3de:	f7fb f959 	bl	800a694 <pbuf_alloc>
 800f3e2:	6138      	str	r0, [r7, #16]
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d109      	bne.n	800f3fe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	8b5b      	ldrh	r3, [r3, #26]
 800f3ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fc:	e095      	b.n	800f52a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	895a      	ldrh	r2, [r3, #10]
 800f402:	7dfb      	ldrb	r3, [r7, #23]
 800f404:	b29b      	uxth	r3, r3
 800f406:	429a      	cmp	r2, r3
 800f408:	d206      	bcs.n	800f418 <tcp_enqueue_flags+0xa0>
 800f40a:	4b4a      	ldr	r3, [pc, #296]	; (800f534 <tcp_enqueue_flags+0x1bc>)
 800f40c:	f240 4239 	movw	r2, #1081	; 0x439
 800f410:	494c      	ldr	r1, [pc, #304]	; (800f544 <tcp_enqueue_flags+0x1cc>)
 800f412:	484a      	ldr	r0, [pc, #296]	; (800f53c <tcp_enqueue_flags+0x1c4>)
 800f414:	f003 ff42 	bl	801329c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f41c:	78fa      	ldrb	r2, [r7, #3]
 800f41e:	7ffb      	ldrb	r3, [r7, #31]
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	460b      	mov	r3, r1
 800f424:	6939      	ldr	r1, [r7, #16]
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff fd70 	bl	800ef0c <tcp_create_segment>
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d109      	bne.n	800f448 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	8b5b      	ldrh	r3, [r3, #26]
 800f438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f442:	f04f 33ff 	mov.w	r3, #4294967295
 800f446:	e070      	b.n	800f52a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	f003 0303 	and.w	r3, r3, #3
 800f450:	2b00      	cmp	r3, #0
 800f452:	d006      	beq.n	800f462 <tcp_enqueue_flags+0xea>
 800f454:	4b37      	ldr	r3, [pc, #220]	; (800f534 <tcp_enqueue_flags+0x1bc>)
 800f456:	f240 4242 	movw	r2, #1090	; 0x442
 800f45a:	493b      	ldr	r1, [pc, #236]	; (800f548 <tcp_enqueue_flags+0x1d0>)
 800f45c:	4837      	ldr	r0, [pc, #220]	; (800f53c <tcp_enqueue_flags+0x1c4>)
 800f45e:	f003 ff1d 	bl	801329c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	891b      	ldrh	r3, [r3, #8]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d006      	beq.n	800f478 <tcp_enqueue_flags+0x100>
 800f46a:	4b32      	ldr	r3, [pc, #200]	; (800f534 <tcp_enqueue_flags+0x1bc>)
 800f46c:	f240 4243 	movw	r2, #1091	; 0x443
 800f470:	4936      	ldr	r1, [pc, #216]	; (800f54c <tcp_enqueue_flags+0x1d4>)
 800f472:	4832      	ldr	r0, [pc, #200]	; (800f53c <tcp_enqueue_flags+0x1c4>)
 800f474:	f003 ff12 	bl	801329c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d103      	bne.n	800f488 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	66da      	str	r2, [r3, #108]	; 0x6c
 800f486:	e00d      	b.n	800f4a4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48c:	61bb      	str	r3, [r7, #24]
 800f48e:	e002      	b.n	800f496 <tcp_enqueue_flags+0x11e>
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	61bb      	str	r3, [r7, #24]
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d1f8      	bne.n	800f490 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f4ac:	78fb      	ldrb	r3, [r7, #3]
 800f4ae:	f003 0302 	and.w	r3, r3, #2
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d104      	bne.n	800f4c0 <tcp_enqueue_flags+0x148>
 800f4b6:	78fb      	ldrb	r3, [r7, #3]
 800f4b8:	f003 0301 	and.w	r3, r3, #1
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d004      	beq.n	800f4ca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4c4:	1c5a      	adds	r2, r3, #1
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f4ca:	78fb      	ldrb	r3, [r7, #3]
 800f4cc:	f003 0301 	and.w	r3, r3, #1
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d006      	beq.n	800f4e2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	8b5b      	ldrh	r3, [r3, #26]
 800f4d8:	f043 0320 	orr.w	r3, r3, #32
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fb fc46 	bl	800ad78 <pbuf_clen>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4f6:	4413      	add	r3, r2
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00e      	beq.n	800f528 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d10a      	bne.n	800f528 <tcp_enqueue_flags+0x1b0>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d106      	bne.n	800f528 <tcp_enqueue_flags+0x1b0>
 800f51a:	4b06      	ldr	r3, [pc, #24]	; (800f534 <tcp_enqueue_flags+0x1bc>)
 800f51c:	f240 4265 	movw	r2, #1125	; 0x465
 800f520:	490b      	ldr	r1, [pc, #44]	; (800f550 <tcp_enqueue_flags+0x1d8>)
 800f522:	4806      	ldr	r0, [pc, #24]	; (800f53c <tcp_enqueue_flags+0x1c4>)
 800f524:	f003 feba 	bl	801329c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3720      	adds	r7, #32
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	08015acc 	.word	0x08015acc
 800f538:	08015ef0 	.word	0x08015ef0
 800f53c:	08015b20 	.word	0x08015b20
 800f540:	08015f48 	.word	0x08015f48
 800f544:	08015f68 	.word	0x08015f68
 800f548:	08015fa4 	.word	0x08015fa4
 800f54c:	08015fbc 	.word	0x08015fbc
 800f550:	08015fe8 	.word	0x08015fe8

0800f554 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f554:	b5b0      	push	{r4, r5, r7, lr}
 800f556:	b08a      	sub	sp, #40	; 0x28
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d106      	bne.n	800f570 <tcp_output+0x1c>
 800f562:	4b9e      	ldr	r3, [pc, #632]	; (800f7dc <tcp_output+0x288>)
 800f564:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f568:	499d      	ldr	r1, [pc, #628]	; (800f7e0 <tcp_output+0x28c>)
 800f56a:	489e      	ldr	r0, [pc, #632]	; (800f7e4 <tcp_output+0x290>)
 800f56c:	f003 fe96 	bl	801329c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	7d1b      	ldrb	r3, [r3, #20]
 800f574:	2b01      	cmp	r3, #1
 800f576:	d106      	bne.n	800f586 <tcp_output+0x32>
 800f578:	4b98      	ldr	r3, [pc, #608]	; (800f7dc <tcp_output+0x288>)
 800f57a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f57e:	499a      	ldr	r1, [pc, #616]	; (800f7e8 <tcp_output+0x294>)
 800f580:	4898      	ldr	r0, [pc, #608]	; (800f7e4 <tcp_output+0x290>)
 800f582:	f003 fe8b 	bl	801329c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f586:	4b99      	ldr	r3, [pc, #612]	; (800f7ec <tcp_output+0x298>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d101      	bne.n	800f594 <tcp_output+0x40>
    return ERR_OK;
 800f590:	2300      	movs	r3, #0
 800f592:	e1ce      	b.n	800f932 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	bf28      	it	cs
 800f5a4:	4613      	movcs	r3, r2
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10b      	bne.n	800f5ce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	8b5b      	ldrh	r3, [r3, #26]
 800f5ba:	f003 0302 	and.w	r3, r3, #2
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f000 81aa 	beq.w	800f918 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 fdcb 	bl	8010160 <tcp_send_empty_ack>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	e1b1      	b.n	800f932 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f5ce:	6879      	ldr	r1, [r7, #4]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff fc7c 	bl	800eed4 <tcp_route>
 800f5dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d102      	bne.n	800f5ea <tcp_output+0x96>
    return ERR_RTE;
 800f5e4:	f06f 0303 	mvn.w	r3, #3
 800f5e8:	e1a3      	b.n	800f932 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d003      	beq.n	800f5f8 <tcp_output+0xa4>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d111      	bne.n	800f61c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d002      	beq.n	800f604 <tcp_output+0xb0>
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	3304      	adds	r3, #4
 800f602:	e000      	b.n	800f606 <tcp_output+0xb2>
 800f604:	2300      	movs	r3, #0
 800f606:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d102      	bne.n	800f614 <tcp_output+0xc0>
      return ERR_RTE;
 800f60e:	f06f 0303 	mvn.w	r3, #3
 800f612:	e18e      	b.n	800f932 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4618      	mov	r0, r3
 800f624:	f7f9 ff41 	bl	80094aa <lwip_htonl>
 800f628:	4602      	mov	r2, r0
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f632:	8912      	ldrh	r2, [r2, #8]
 800f634:	4413      	add	r3, r2
 800f636:	69ba      	ldr	r2, [r7, #24]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d227      	bcs.n	800f68c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f642:	461a      	mov	r2, r3
 800f644:	69bb      	ldr	r3, [r7, #24]
 800f646:	4293      	cmp	r3, r2
 800f648:	d114      	bne.n	800f674 <tcp_output+0x120>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d110      	bne.n	800f674 <tcp_output+0x120>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10b      	bne.n	800f674 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2201      	movs	r2, #1
 800f668:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	8b5b      	ldrh	r3, [r3, #26]
 800f678:	f003 0302 	and.w	r3, r3, #2
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f000 814d 	beq.w	800f91c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 fd6c 	bl	8010160 <tcp_send_empty_ack>
 800f688:	4603      	mov	r3, r0
 800f68a:	e152      	b.n	800f932 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f698:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f69a:	6a3b      	ldr	r3, [r7, #32]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 811c 	beq.w	800f8da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f6a2:	e002      	b.n	800f6aa <tcp_output+0x156>
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	623b      	str	r3, [r7, #32]
 800f6aa:	6a3b      	ldr	r3, [r7, #32]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d1f8      	bne.n	800f6a4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f6b2:	e112      	b.n	800f8da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	899b      	ldrh	r3, [r3, #12]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7f9 fedf 	bl	8009480 <lwip_htons>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	f003 0304 	and.w	r3, r3, #4
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d006      	beq.n	800f6dc <tcp_output+0x188>
 800f6ce:	4b43      	ldr	r3, [pc, #268]	; (800f7dc <tcp_output+0x288>)
 800f6d0:	f240 5236 	movw	r2, #1334	; 0x536
 800f6d4:	4946      	ldr	r1, [pc, #280]	; (800f7f0 <tcp_output+0x29c>)
 800f6d6:	4843      	ldr	r0, [pc, #268]	; (800f7e4 <tcp_output+0x290>)
 800f6d8:	f003 fde0 	bl	801329c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01f      	beq.n	800f724 <tcp_output+0x1d0>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	8b5b      	ldrh	r3, [r3, #26]
 800f6e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d119      	bne.n	800f724 <tcp_output+0x1d0>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00b      	beq.n	800f710 <tcp_output+0x1bc>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d110      	bne.n	800f724 <tcp_output+0x1d0>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f706:	891a      	ldrh	r2, [r3, #8]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d209      	bcs.n	800f724 <tcp_output+0x1d0>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f716:	2b00      	cmp	r3, #0
 800f718:	d004      	beq.n	800f724 <tcp_output+0x1d0>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f720:	2b08      	cmp	r3, #8
 800f722:	d901      	bls.n	800f728 <tcp_output+0x1d4>
 800f724:	2301      	movs	r3, #1
 800f726:	e000      	b.n	800f72a <tcp_output+0x1d6>
 800f728:	2300      	movs	r3, #0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d106      	bne.n	800f73c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	8b5b      	ldrh	r3, [r3, #26]
 800f732:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 80e4 	beq.w	800f904 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	7d1b      	ldrb	r3, [r3, #20]
 800f740:	2b02      	cmp	r3, #2
 800f742:	d00d      	beq.n	800f760 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	899b      	ldrh	r3, [r3, #12]
 800f74a:	b29c      	uxth	r4, r3
 800f74c:	2010      	movs	r0, #16
 800f74e:	f7f9 fe97 	bl	8009480 <lwip_htons>
 800f752:	4603      	mov	r3, r0
 800f754:	461a      	mov	r2, r3
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	4322      	orrs	r2, r4
 800f75c:	b292      	uxth	r2, r2
 800f75e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f766:	f000 f909 	bl	800f97c <tcp_output_segment>
 800f76a:	4603      	mov	r3, r0
 800f76c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d009      	beq.n	800f78a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	8b5b      	ldrh	r3, [r3, #26]
 800f77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77e:	b29a      	uxth	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	835a      	strh	r2, [r3, #26]
      return err;
 800f784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f788:	e0d3      	b.n	800f932 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	7d1b      	ldrb	r3, [r3, #20]
 800f796:	2b02      	cmp	r3, #2
 800f798:	d006      	beq.n	800f7a8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	8b5b      	ldrh	r3, [r3, #26]
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7f9 fe7b 	bl	80094aa <lwip_htonl>
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b8:	891b      	ldrh	r3, [r3, #8]
 800f7ba:	461d      	mov	r5, r3
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	899b      	ldrh	r3, [r3, #12]
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7f9 fe5b 	bl	8009480 <lwip_htons>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	f003 0303 	and.w	r3, r3, #3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00e      	beq.n	800f7f4 <tcp_output+0x2a0>
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e00d      	b.n	800f7f6 <tcp_output+0x2a2>
 800f7da:	bf00      	nop
 800f7dc:	08015acc 	.word	0x08015acc
 800f7e0:	08016010 	.word	0x08016010
 800f7e4:	08015b20 	.word	0x08015b20
 800f7e8:	08016028 	.word	0x08016028
 800f7ec:	240084ec 	.word	0x240084ec
 800f7f0:	08016050 	.word	0x08016050
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	442b      	add	r3, r5
 800f7f8:	4423      	add	r3, r4
 800f7fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	2b00      	cmp	r3, #0
 800f806:	da02      	bge.n	800f80e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68ba      	ldr	r2, [r7, #8]
 800f80c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f810:	891b      	ldrh	r3, [r3, #8]
 800f812:	461c      	mov	r4, r3
 800f814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	899b      	ldrh	r3, [r3, #12]
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7f9 fe2f 	bl	8009480 <lwip_htons>
 800f822:	4603      	mov	r3, r0
 800f824:	b2db      	uxtb	r3, r3
 800f826:	f003 0303 	and.w	r3, r3, #3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d001      	beq.n	800f832 <tcp_output+0x2de>
 800f82e:	2301      	movs	r3, #1
 800f830:	e000      	b.n	800f834 <tcp_output+0x2e0>
 800f832:	2300      	movs	r3, #0
 800f834:	4423      	add	r3, r4
 800f836:	2b00      	cmp	r3, #0
 800f838:	d049      	beq.n	800f8ce <tcp_output+0x37a>
      seg->next = NULL;
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	2200      	movs	r2, #0
 800f83e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f844:	2b00      	cmp	r3, #0
 800f846:	d105      	bne.n	800f854 <tcp_output+0x300>
        pcb->unacked = seg;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f84c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f850:	623b      	str	r3, [r7, #32]
 800f852:	e03f      	b.n	800f8d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7f9 fe25 	bl	80094aa <lwip_htonl>
 800f860:	4604      	mov	r4, r0
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	4618      	mov	r0, r3
 800f86a:	f7f9 fe1e 	bl	80094aa <lwip_htonl>
 800f86e:	4603      	mov	r3, r0
 800f870:	1ae3      	subs	r3, r4, r3
 800f872:	2b00      	cmp	r3, #0
 800f874:	da24      	bge.n	800f8c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	3370      	adds	r3, #112	; 0x70
 800f87a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f87c:	e002      	b.n	800f884 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d011      	beq.n	800f8b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	f7f9 fe08 	bl	80094aa <lwip_htonl>
 800f89a:	4604      	mov	r4, r0
 800f89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f9 fe01 	bl	80094aa <lwip_htonl>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	dbe6      	blt.n	800f87e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8bc:	601a      	str	r2, [r3, #0]
 800f8be:	e009      	b.n	800f8d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f8c0:	6a3b      	ldr	r3, [r7, #32]
 800f8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f8c6:	6a3b      	ldr	r3, [r7, #32]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	623b      	str	r3, [r7, #32]
 800f8cc:	e002      	b.n	800f8d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f8ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8d0:	f7fc fc43 	bl	800c15a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d012      	beq.n	800f906 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f9 fddf 	bl	80094aa <lwip_htonl>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8f6:	8912      	ldrh	r2, [r2, #8]
 800f8f8:	4413      	add	r3, r2
  while (seg != NULL &&
 800f8fa:	69ba      	ldr	r2, [r7, #24]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	f4bf aed9 	bcs.w	800f6b4 <tcp_output+0x160>
 800f902:	e000      	b.n	800f906 <tcp_output+0x3b2>
      break;
 800f904:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d108      	bne.n	800f920 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f916:	e004      	b.n	800f922 <tcp_output+0x3ce>
    goto output_done;
 800f918:	bf00      	nop
 800f91a:	e002      	b.n	800f922 <tcp_output+0x3ce>
    goto output_done;
 800f91c:	bf00      	nop
 800f91e:	e000      	b.n	800f922 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f920:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	8b5b      	ldrh	r3, [r3, #26]
 800f926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f930:	2300      	movs	r3, #0
}
 800f932:	4618      	mov	r0, r3
 800f934:	3728      	adds	r7, #40	; 0x28
 800f936:	46bd      	mov	sp, r7
 800f938:	bdb0      	pop	{r4, r5, r7, pc}
 800f93a:	bf00      	nop

0800f93c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d106      	bne.n	800f958 <tcp_output_segment_busy+0x1c>
 800f94a:	4b09      	ldr	r3, [pc, #36]	; (800f970 <tcp_output_segment_busy+0x34>)
 800f94c:	f240 529a 	movw	r2, #1434	; 0x59a
 800f950:	4908      	ldr	r1, [pc, #32]	; (800f974 <tcp_output_segment_busy+0x38>)
 800f952:	4809      	ldr	r0, [pc, #36]	; (800f978 <tcp_output_segment_busy+0x3c>)
 800f954:	f003 fca2 	bl	801329c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	7b9b      	ldrb	r3, [r3, #14]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d001      	beq.n	800f966 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f962:	2301      	movs	r3, #1
 800f964:	e000      	b.n	800f968 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f966:	2300      	movs	r3, #0
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	08015acc 	.word	0x08015acc
 800f974:	08016068 	.word	0x08016068
 800f978:	08015b20 	.word	0x08015b20

0800f97c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f97c:	b5b0      	push	{r4, r5, r7, lr}
 800f97e:	b08c      	sub	sp, #48	; 0x30
 800f980:	af04      	add	r7, sp, #16
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d106      	bne.n	800f99c <tcp_output_segment+0x20>
 800f98e:	4b63      	ldr	r3, [pc, #396]	; (800fb1c <tcp_output_segment+0x1a0>)
 800f990:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f994:	4962      	ldr	r1, [pc, #392]	; (800fb20 <tcp_output_segment+0x1a4>)
 800f996:	4863      	ldr	r0, [pc, #396]	; (800fb24 <tcp_output_segment+0x1a8>)
 800f998:	f003 fc80 	bl	801329c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d106      	bne.n	800f9b0 <tcp_output_segment+0x34>
 800f9a2:	4b5e      	ldr	r3, [pc, #376]	; (800fb1c <tcp_output_segment+0x1a0>)
 800f9a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f9a8:	495f      	ldr	r1, [pc, #380]	; (800fb28 <tcp_output_segment+0x1ac>)
 800f9aa:	485e      	ldr	r0, [pc, #376]	; (800fb24 <tcp_output_segment+0x1a8>)
 800f9ac:	f003 fc76 	bl	801329c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d106      	bne.n	800f9c4 <tcp_output_segment+0x48>
 800f9b6:	4b59      	ldr	r3, [pc, #356]	; (800fb1c <tcp_output_segment+0x1a0>)
 800f9b8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f9bc:	495b      	ldr	r1, [pc, #364]	; (800fb2c <tcp_output_segment+0x1b0>)
 800f9be:	4859      	ldr	r0, [pc, #356]	; (800fb24 <tcp_output_segment+0x1a8>)
 800f9c0:	f003 fc6c 	bl	801329c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f7ff ffb9 	bl	800f93c <tcp_output_segment_busy>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d001      	beq.n	800f9d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	e09f      	b.n	800fb14 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	68dc      	ldr	r4, [r3, #12]
 800f9dc:	4610      	mov	r0, r2
 800f9de:	f7f9 fd64 	bl	80094aa <lwip_htonl>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	68dc      	ldr	r4, [r3, #12]
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	f7f9 fd46 	bl	8009480 <lwip_htons>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fc:	68ba      	ldr	r2, [r7, #8]
 800f9fe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fa00:	441a      	add	r2, r3
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	3314      	adds	r3, #20
 800fa0c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	7a9b      	ldrb	r3, [r3, #10]
 800fa12:	f003 0301 	and.w	r3, r3, #1
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d015      	beq.n	800fa46 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	3304      	adds	r3, #4
 800fa1e:	461a      	mov	r2, r3
 800fa20:	6879      	ldr	r1, [r7, #4]
 800fa22:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fa26:	f7fc fe8f 	bl	800c748 <tcp_eff_send_mss_netif>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fa2e:	8b7b      	ldrh	r3, [r7, #26]
 800fa30:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7f9 fd38 	bl	80094aa <lwip_htonl>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	3304      	adds	r3, #4
 800fa44:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	da02      	bge.n	800fa56 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2200      	movs	r2, #0
 800fa54:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d10c      	bne.n	800fa78 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fa5e:	4b34      	ldr	r3, [pc, #208]	; (800fb30 <tcp_output_segment+0x1b4>)
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f9 fd1c 	bl	80094aa <lwip_htonl>
 800fa72:	4602      	mov	r2, r0
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	68da      	ldr	r2, [r3, #12]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	8959      	ldrh	r1, [r3, #10]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	8b3a      	ldrh	r2, [r7, #24]
 800fa92:	1a8a      	subs	r2, r1, r2
 800fa94:	b292      	uxth	r2, r2
 800fa96:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	8919      	ldrh	r1, [r3, #8]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	8b3a      	ldrh	r2, [r7, #24]
 800faa4:	1a8a      	subs	r2, r1, r2
 800faa6:	b292      	uxth	r2, r2
 800faa8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	68fa      	ldr	r2, [r7, #12]
 800fab0:	68d2      	ldr	r2, [r2, #12]
 800fab2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	2200      	movs	r2, #0
 800faba:	741a      	strb	r2, [r3, #16]
 800fabc:	2200      	movs	r2, #0
 800fabe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	f103 0214 	add.w	r2, r3, #20
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	7a9b      	ldrb	r3, [r3, #10]
 800facc:	009b      	lsls	r3, r3, #2
 800face:	f003 0304 	and.w	r3, r3, #4
 800fad2:	4413      	add	r3, r2
 800fad4:	69fa      	ldr	r2, [r7, #28]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d006      	beq.n	800fae8 <tcp_output_segment+0x16c>
 800fada:	4b10      	ldr	r3, [pc, #64]	; (800fb1c <tcp_output_segment+0x1a0>)
 800fadc:	f240 621c 	movw	r2, #1564	; 0x61c
 800fae0:	4914      	ldr	r1, [pc, #80]	; (800fb34 <tcp_output_segment+0x1b8>)
 800fae2:	4810      	ldr	r0, [pc, #64]	; (800fb24 <tcp_output_segment+0x1a8>)
 800fae4:	f003 fbda 	bl	801329c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6858      	ldr	r0, [r3, #4]
 800faec:	68b9      	ldr	r1, [r7, #8]
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	1d1c      	adds	r4, r3, #4
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	7add      	ldrb	r5, [r3, #11]
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	7a9b      	ldrb	r3, [r3, #10]
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	9202      	str	r2, [sp, #8]
 800fafe:	2206      	movs	r2, #6
 800fb00:	9201      	str	r2, [sp, #4]
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	462b      	mov	r3, r5
 800fb06:	4622      	mov	r2, r4
 800fb08:	f002 fa66 	bl	8011fd8 <ip4_output_if>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fb10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3720      	adds	r7, #32
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb1c:	08015acc 	.word	0x08015acc
 800fb20:	08016090 	.word	0x08016090
 800fb24:	08015b20 	.word	0x08015b20
 800fb28:	080160b0 	.word	0x080160b0
 800fb2c:	080160d0 	.word	0x080160d0
 800fb30:	240084dc 	.word	0x240084dc
 800fb34:	080160f4 	.word	0x080160f4

0800fb38 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fb38:	b5b0      	push	{r4, r5, r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d106      	bne.n	800fb54 <tcp_rexmit_rto_prepare+0x1c>
 800fb46:	4b31      	ldr	r3, [pc, #196]	; (800fc0c <tcp_rexmit_rto_prepare+0xd4>)
 800fb48:	f240 6263 	movw	r2, #1635	; 0x663
 800fb4c:	4930      	ldr	r1, [pc, #192]	; (800fc10 <tcp_rexmit_rto_prepare+0xd8>)
 800fb4e:	4831      	ldr	r0, [pc, #196]	; (800fc14 <tcp_rexmit_rto_prepare+0xdc>)
 800fb50:	f003 fba4 	bl	801329c <iprintf>

  if (pcb->unacked == NULL) {
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d102      	bne.n	800fb62 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fb5c:	f06f 0305 	mvn.w	r3, #5
 800fb60:	e050      	b.n	800fc04 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb66:	60fb      	str	r3, [r7, #12]
 800fb68:	e00b      	b.n	800fb82 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	f7ff fee6 	bl	800f93c <tcp_output_segment_busy>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d002      	beq.n	800fb7c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fb76:	f06f 0305 	mvn.w	r3, #5
 800fb7a:	e043      	b.n	800fc04 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	60fb      	str	r3, [r7, #12]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1ef      	bne.n	800fb6a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7ff fed6 	bl	800f93c <tcp_output_segment_busy>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d002      	beq.n	800fb9c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fb96:	f06f 0305 	mvn.w	r3, #5
 800fb9a:	e033      	b.n	800fc04 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8b5b      	ldrh	r3, [r3, #26]
 800fbb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f9 fc6f 	bl	80094aa <lwip_htonl>
 800fbcc:	4604      	mov	r4, r0
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	891b      	ldrh	r3, [r3, #8]
 800fbd2:	461d      	mov	r5, r3
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	899b      	ldrh	r3, [r3, #12]
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7f9 fc4f 	bl	8009480 <lwip_htons>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	f003 0303 	and.w	r3, r3, #3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <tcp_rexmit_rto_prepare+0xba>
 800fbee:	2301      	movs	r3, #1
 800fbf0:	e000      	b.n	800fbf4 <tcp_rexmit_rto_prepare+0xbc>
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	442b      	add	r3, r5
 800fbf6:	18e2      	adds	r2, r4, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3710      	adds	r7, #16
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc0c:	08015acc 	.word	0x08015acc
 800fc10:	08016108 	.word	0x08016108
 800fc14:	08015b20 	.word	0x08015b20

0800fc18 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <tcp_rexmit_rto_commit+0x1c>
 800fc26:	4b0d      	ldr	r3, [pc, #52]	; (800fc5c <tcp_rexmit_rto_commit+0x44>)
 800fc28:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fc2c:	490c      	ldr	r1, [pc, #48]	; (800fc60 <tcp_rexmit_rto_commit+0x48>)
 800fc2e:	480d      	ldr	r0, [pc, #52]	; (800fc64 <tcp_rexmit_rto_commit+0x4c>)
 800fc30:	f003 fb34 	bl	801329c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc3a:	2bff      	cmp	r3, #255	; 0xff
 800fc3c:	d007      	beq.n	800fc4e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc44:	3301      	adds	r3, #1
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7ff fc80 	bl	800f554 <tcp_output>
}
 800fc54:	bf00      	nop
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	08015acc 	.word	0x08015acc
 800fc60:	0801612c 	.word	0x0801612c
 800fc64:	08015b20 	.word	0x08015b20

0800fc68 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d106      	bne.n	800fc84 <tcp_rexmit_rto+0x1c>
 800fc76:	4b0a      	ldr	r3, [pc, #40]	; (800fca0 <tcp_rexmit_rto+0x38>)
 800fc78:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fc7c:	4909      	ldr	r1, [pc, #36]	; (800fca4 <tcp_rexmit_rto+0x3c>)
 800fc7e:	480a      	ldr	r0, [pc, #40]	; (800fca8 <tcp_rexmit_rto+0x40>)
 800fc80:	f003 fb0c 	bl	801329c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7ff ff57 	bl	800fb38 <tcp_rexmit_rto_prepare>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d102      	bne.n	800fc96 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff ffc1 	bl	800fc18 <tcp_rexmit_rto_commit>
  }
}
 800fc96:	bf00      	nop
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	08015acc 	.word	0x08015acc
 800fca4:	08016150 	.word	0x08016150
 800fca8:	08015b20 	.word	0x08015b20

0800fcac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fcac:	b590      	push	{r4, r7, lr}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <tcp_rexmit+0x1c>
 800fcba:	4b2f      	ldr	r3, [pc, #188]	; (800fd78 <tcp_rexmit+0xcc>)
 800fcbc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fcc0:	492e      	ldr	r1, [pc, #184]	; (800fd7c <tcp_rexmit+0xd0>)
 800fcc2:	482f      	ldr	r0, [pc, #188]	; (800fd80 <tcp_rexmit+0xd4>)
 800fcc4:	f003 faea 	bl	801329c <iprintf>

  if (pcb->unacked == NULL) {
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d102      	bne.n	800fcd6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fcd0:	f06f 0305 	mvn.w	r3, #5
 800fcd4:	e04c      	b.n	800fd70 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcda:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fcdc:	68b8      	ldr	r0, [r7, #8]
 800fcde:	f7ff fe2d 	bl	800f93c <tcp_output_segment_busy>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d002      	beq.n	800fcee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fce8:	f06f 0305 	mvn.w	r3, #5
 800fcec:	e040      	b.n	800fd70 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	336c      	adds	r3, #108	; 0x6c
 800fcfa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fcfc:	e002      	b.n	800fd04 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d011      	beq.n	800fd30 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7f9 fbc8 	bl	80094aa <lwip_htonl>
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7f9 fbc1 	bl	80094aa <lwip_htonl>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	dbe6      	blt.n	800fcfe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d103      	bne.n	800fd4e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd54:	2bff      	cmp	r3, #255	; 0xff
 800fd56:	d007      	beq.n	800fd68 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd5e:	3301      	adds	r3, #1
 800fd60:	b2da      	uxtb	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fd6e:	2300      	movs	r3, #0
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3714      	adds	r7, #20
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd90      	pop	{r4, r7, pc}
 800fd78:	08015acc 	.word	0x08015acc
 800fd7c:	0801616c 	.word	0x0801616c
 800fd80:	08015b20 	.word	0x08015b20

0800fd84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d106      	bne.n	800fda0 <tcp_rexmit_fast+0x1c>
 800fd92:	4b2a      	ldr	r3, [pc, #168]	; (800fe3c <tcp_rexmit_fast+0xb8>)
 800fd94:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fd98:	4929      	ldr	r1, [pc, #164]	; (800fe40 <tcp_rexmit_fast+0xbc>)
 800fd9a:	482a      	ldr	r0, [pc, #168]	; (800fe44 <tcp_rexmit_fast+0xc0>)
 800fd9c:	f003 fa7e 	bl	801329c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d045      	beq.n	800fe34 <tcp_rexmit_fast+0xb0>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	8b5b      	ldrh	r3, [r3, #26]
 800fdac:	f003 0304 	and.w	r3, r3, #4
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d13f      	bne.n	800fe34 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff ff79 	bl	800fcac <tcp_rexmit>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d139      	bne.n	800fe34 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	bf28      	it	cs
 800fdd0:	4613      	movcs	r3, r2
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	da00      	bge.n	800fdda <tcp_rexmit_fast+0x56>
 800fdd8:	3301      	adds	r3, #1
 800fdda:	105b      	asrs	r3, r3, #1
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fdea:	461a      	mov	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdf0:	005b      	lsls	r3, r3, #1
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d206      	bcs.n	800fe04 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdfa:	005b      	lsls	r3, r3, #1
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe0e:	4619      	mov	r1, r3
 800fe10:	0049      	lsls	r1, r1, #1
 800fe12:	440b      	add	r3, r1
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	4413      	add	r3, r2
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	8b5b      	ldrh	r3, [r3, #26]
 800fe24:	f043 0304 	orr.w	r3, r3, #4
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fe34:	bf00      	nop
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	08015acc 	.word	0x08015acc
 800fe40:	08016184 	.word	0x08016184
 800fe44:	08015b20 	.word	0x08015b20

0800fe48 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	607b      	str	r3, [r7, #4]
 800fe52:	460b      	mov	r3, r1
 800fe54:	817b      	strh	r3, [r7, #10]
 800fe56:	4613      	mov	r3, r2
 800fe58:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fe5a:	897a      	ldrh	r2, [r7, #10]
 800fe5c:	893b      	ldrh	r3, [r7, #8]
 800fe5e:	4413      	add	r3, r2
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	3314      	adds	r3, #20
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	2022      	movs	r0, #34	; 0x22
 800fe6e:	f7fa fc11 	bl	800a694 <pbuf_alloc>
 800fe72:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d04d      	beq.n	800ff16 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fe7a:	897b      	ldrh	r3, [r7, #10]
 800fe7c:	3313      	adds	r3, #19
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	8952      	ldrh	r2, [r2, #10]
 800fe82:	4293      	cmp	r3, r2
 800fe84:	db06      	blt.n	800fe94 <tcp_output_alloc_header_common+0x4c>
 800fe86:	4b26      	ldr	r3, [pc, #152]	; (800ff20 <tcp_output_alloc_header_common+0xd8>)
 800fe88:	f240 7223 	movw	r2, #1827	; 0x723
 800fe8c:	4925      	ldr	r1, [pc, #148]	; (800ff24 <tcp_output_alloc_header_common+0xdc>)
 800fe8e:	4826      	ldr	r0, [pc, #152]	; (800ff28 <tcp_output_alloc_header_common+0xe0>)
 800fe90:	f003 fa04 	bl	801329c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fe9a:	8c3b      	ldrh	r3, [r7, #32]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7f9 faef 	bl	8009480 <lwip_htons>
 800fea2:	4603      	mov	r3, r0
 800fea4:	461a      	mov	r2, r3
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800feaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800feac:	4618      	mov	r0, r3
 800feae:	f7f9 fae7 	bl	8009480 <lwip_htons>
 800feb2:	4603      	mov	r3, r0
 800feb4:	461a      	mov	r2, r3
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f7f9 faf2 	bl	80094aa <lwip_htonl>
 800fec6:	4602      	mov	r2, r0
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fecc:	897b      	ldrh	r3, [r7, #10]
 800fece:	089b      	lsrs	r3, r3, #2
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	3305      	adds	r3, #5
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	031b      	lsls	r3, r3, #12
 800fed8:	b29a      	uxth	r2, r3
 800feda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fede:	b29b      	uxth	r3, r3
 800fee0:	4313      	orrs	r3, r2
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7f9 facb 	bl	8009480 <lwip_htons>
 800feea:	4603      	mov	r3, r0
 800feec:	461a      	mov	r2, r3
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fef2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7f9 fac3 	bl	8009480 <lwip_htons>
 800fefa:	4603      	mov	r3, r0
 800fefc:	461a      	mov	r2, r3
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	2200      	movs	r2, #0
 800ff06:	741a      	strb	r2, [r3, #16]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	749a      	strb	r2, [r3, #18]
 800ff12:	2200      	movs	r2, #0
 800ff14:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ff16:	697b      	ldr	r3, [r7, #20]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3718      	adds	r7, #24
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	08015acc 	.word	0x08015acc
 800ff24:	080161a4 	.word	0x080161a4
 800ff28:	08015b20 	.word	0x08015b20

0800ff2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ff2c:	b5b0      	push	{r4, r5, r7, lr}
 800ff2e:	b08a      	sub	sp, #40	; 0x28
 800ff30:	af04      	add	r7, sp, #16
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	607b      	str	r3, [r7, #4]
 800ff36:	460b      	mov	r3, r1
 800ff38:	817b      	strh	r3, [r7, #10]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d106      	bne.n	800ff52 <tcp_output_alloc_header+0x26>
 800ff44:	4b15      	ldr	r3, [pc, #84]	; (800ff9c <tcp_output_alloc_header+0x70>)
 800ff46:	f240 7242 	movw	r2, #1858	; 0x742
 800ff4a:	4915      	ldr	r1, [pc, #84]	; (800ffa0 <tcp_output_alloc_header+0x74>)
 800ff4c:	4815      	ldr	r0, [pc, #84]	; (800ffa4 <tcp_output_alloc_header+0x78>)
 800ff4e:	f003 f9a5 	bl	801329c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	8adb      	ldrh	r3, [r3, #22]
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	8b12      	ldrh	r2, [r2, #24]
 800ff5e:	68f9      	ldr	r1, [r7, #12]
 800ff60:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ff62:	893d      	ldrh	r5, [r7, #8]
 800ff64:	897c      	ldrh	r4, [r7, #10]
 800ff66:	9103      	str	r1, [sp, #12]
 800ff68:	2110      	movs	r1, #16
 800ff6a:	9102      	str	r1, [sp, #8]
 800ff6c:	9201      	str	r2, [sp, #4]
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	462a      	mov	r2, r5
 800ff74:	4621      	mov	r1, r4
 800ff76:	f7ff ff67 	bl	800fe48 <tcp_output_alloc_header_common>
 800ff7a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d006      	beq.n	800ff90 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff86:	68fa      	ldr	r2, [r7, #12]
 800ff88:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ff8a:	441a      	add	r2, r3
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ff90:	697b      	ldr	r3, [r7, #20]
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3718      	adds	r7, #24
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bdb0      	pop	{r4, r5, r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	08015acc 	.word	0x08015acc
 800ffa0:	080161d4 	.word	0x080161d4
 800ffa4:	08015b20 	.word	0x08015b20

0800ffa8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b088      	sub	sp, #32
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	4611      	mov	r1, r2
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	71fb      	strb	r3, [r7, #7]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d106      	bne.n	800ffd6 <tcp_output_fill_options+0x2e>
 800ffc8:	4b13      	ldr	r3, [pc, #76]	; (8010018 <tcp_output_fill_options+0x70>)
 800ffca:	f240 7256 	movw	r2, #1878	; 0x756
 800ffce:	4913      	ldr	r1, [pc, #76]	; (801001c <tcp_output_fill_options+0x74>)
 800ffd0:	4813      	ldr	r0, [pc, #76]	; (8010020 <tcp_output_fill_options+0x78>)
 800ffd2:	f003 f963 	bl	801329c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ffdc:	69bb      	ldr	r3, [r7, #24]
 800ffde:	3314      	adds	r3, #20
 800ffe0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	f103 0214 	add.w	r2, r3, #20
 800ffe8:	8bfb      	ldrh	r3, [r7, #30]
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	4619      	mov	r1, r3
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	f003 0304 	and.w	r3, r3, #4
 800fff6:	440b      	add	r3, r1
 800fff8:	4413      	add	r3, r2
 800fffa:	697a      	ldr	r2, [r7, #20]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d006      	beq.n	801000e <tcp_output_fill_options+0x66>
 8010000:	4b05      	ldr	r3, [pc, #20]	; (8010018 <tcp_output_fill_options+0x70>)
 8010002:	f240 7275 	movw	r2, #1909	; 0x775
 8010006:	4907      	ldr	r1, [pc, #28]	; (8010024 <tcp_output_fill_options+0x7c>)
 8010008:	4805      	ldr	r0, [pc, #20]	; (8010020 <tcp_output_fill_options+0x78>)
 801000a:	f003 f947 	bl	801329c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801000e:	bf00      	nop
 8010010:	3720      	adds	r7, #32
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	08015acc 	.word	0x08015acc
 801001c:	080161fc 	.word	0x080161fc
 8010020:	08015b20 	.word	0x08015b20
 8010024:	080160f4 	.word	0x080160f4

08010028 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b08a      	sub	sp, #40	; 0x28
 801002c:	af04      	add	r7, sp, #16
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
 8010034:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d106      	bne.n	801004a <tcp_output_control_segment+0x22>
 801003c:	4b1c      	ldr	r3, [pc, #112]	; (80100b0 <tcp_output_control_segment+0x88>)
 801003e:	f240 7287 	movw	r2, #1927	; 0x787
 8010042:	491c      	ldr	r1, [pc, #112]	; (80100b4 <tcp_output_control_segment+0x8c>)
 8010044:	481c      	ldr	r0, [pc, #112]	; (80100b8 <tcp_output_control_segment+0x90>)
 8010046:	f003 f929 	bl	801329c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801004a:	683a      	ldr	r2, [r7, #0]
 801004c:	6879      	ldr	r1, [r7, #4]
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	f7fe ff40 	bl	800eed4 <tcp_route>
 8010054:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d102      	bne.n	8010062 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801005c:	23fc      	movs	r3, #252	; 0xfc
 801005e:	75fb      	strb	r3, [r7, #23]
 8010060:	e01c      	b.n	801009c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d006      	beq.n	8010076 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	7adb      	ldrb	r3, [r3, #11]
 801006c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	7a9b      	ldrb	r3, [r3, #10]
 8010072:	757b      	strb	r3, [r7, #21]
 8010074:	e003      	b.n	801007e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010076:	23ff      	movs	r3, #255	; 0xff
 8010078:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801007a:	2300      	movs	r3, #0
 801007c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801007e:	7dba      	ldrb	r2, [r7, #22]
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	9302      	str	r3, [sp, #8]
 8010084:	2306      	movs	r3, #6
 8010086:	9301      	str	r3, [sp, #4]
 8010088:	7d7b      	ldrb	r3, [r7, #21]
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	4613      	mov	r3, r2
 801008e:	683a      	ldr	r2, [r7, #0]
 8010090:	6879      	ldr	r1, [r7, #4]
 8010092:	68b8      	ldr	r0, [r7, #8]
 8010094:	f001 ffa0 	bl	8011fd8 <ip4_output_if>
 8010098:	4603      	mov	r3, r0
 801009a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801009c:	68b8      	ldr	r0, [r7, #8]
 801009e:	f7fa fddd 	bl	800ac5c <pbuf_free>
  return err;
 80100a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3718      	adds	r7, #24
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	08015acc 	.word	0x08015acc
 80100b4:	08016224 	.word	0x08016224
 80100b8:	08015b20 	.word	0x08015b20

080100bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80100bc:	b590      	push	{r4, r7, lr}
 80100be:	b08b      	sub	sp, #44	; 0x2c
 80100c0:	af04      	add	r7, sp, #16
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
 80100c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d106      	bne.n	80100de <tcp_rst+0x22>
 80100d0:	4b1f      	ldr	r3, [pc, #124]	; (8010150 <tcp_rst+0x94>)
 80100d2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80100d6:	491f      	ldr	r1, [pc, #124]	; (8010154 <tcp_rst+0x98>)
 80100d8:	481f      	ldr	r0, [pc, #124]	; (8010158 <tcp_rst+0x9c>)
 80100da:	f003 f8df 	bl	801329c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80100de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d106      	bne.n	80100f2 <tcp_rst+0x36>
 80100e4:	4b1a      	ldr	r3, [pc, #104]	; (8010150 <tcp_rst+0x94>)
 80100e6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80100ea:	491c      	ldr	r1, [pc, #112]	; (801015c <tcp_rst+0xa0>)
 80100ec:	481a      	ldr	r0, [pc, #104]	; (8010158 <tcp_rst+0x9c>)
 80100ee:	f003 f8d5 	bl	801329c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80100f2:	2300      	movs	r3, #0
 80100f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80100f6:	f246 0308 	movw	r3, #24584	; 0x6008
 80100fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80100fc:	7dfb      	ldrb	r3, [r7, #23]
 80100fe:	b29c      	uxth	r4, r3
 8010100:	68b8      	ldr	r0, [r7, #8]
 8010102:	f7f9 f9d2 	bl	80094aa <lwip_htonl>
 8010106:	4602      	mov	r2, r0
 8010108:	8abb      	ldrh	r3, [r7, #20]
 801010a:	9303      	str	r3, [sp, #12]
 801010c:	2314      	movs	r3, #20
 801010e:	9302      	str	r3, [sp, #8]
 8010110:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010112:	9301      	str	r3, [sp, #4]
 8010114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	4613      	mov	r3, r2
 801011a:	2200      	movs	r2, #0
 801011c:	4621      	mov	r1, r4
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7ff fe92 	bl	800fe48 <tcp_output_alloc_header_common>
 8010124:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00c      	beq.n	8010146 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801012c:	7dfb      	ldrb	r3, [r7, #23]
 801012e:	2200      	movs	r2, #0
 8010130:	6939      	ldr	r1, [r7, #16]
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	f7ff ff38 	bl	800ffa8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	6939      	ldr	r1, [r7, #16]
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f7ff ff72 	bl	8010028 <tcp_output_control_segment>
 8010144:	e000      	b.n	8010148 <tcp_rst+0x8c>
    return;
 8010146:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010148:	371c      	adds	r7, #28
 801014a:	46bd      	mov	sp, r7
 801014c:	bd90      	pop	{r4, r7, pc}
 801014e:	bf00      	nop
 8010150:	08015acc 	.word	0x08015acc
 8010154:	08016250 	.word	0x08016250
 8010158:	08015b20 	.word	0x08015b20
 801015c:	0801626c 	.word	0x0801626c

08010160 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010160:	b590      	push	{r4, r7, lr}
 8010162:	b087      	sub	sp, #28
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801016c:	2300      	movs	r3, #0
 801016e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <tcp_send_empty_ack+0x24>
 8010176:	4b28      	ldr	r3, [pc, #160]	; (8010218 <tcp_send_empty_ack+0xb8>)
 8010178:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801017c:	4927      	ldr	r1, [pc, #156]	; (801021c <tcp_send_empty_ack+0xbc>)
 801017e:	4828      	ldr	r0, [pc, #160]	; (8010220 <tcp_send_empty_ack+0xc0>)
 8010180:	f003 f88c 	bl	801329c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010184:	7dfb      	ldrb	r3, [r7, #23]
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	b2db      	uxtb	r3, r3
 801018a:	f003 0304 	and.w	r3, r3, #4
 801018e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010190:	7d7b      	ldrb	r3, [r7, #21]
 8010192:	b29c      	uxth	r4, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010198:	4618      	mov	r0, r3
 801019a:	f7f9 f986 	bl	80094aa <lwip_htonl>
 801019e:	4603      	mov	r3, r0
 80101a0:	2200      	movs	r2, #0
 80101a2:	4621      	mov	r1, r4
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7ff fec1 	bl	800ff2c <tcp_output_alloc_header>
 80101aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d109      	bne.n	80101c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	8b5b      	ldrh	r3, [r3, #26]
 80101b6:	f043 0303 	orr.w	r3, r3, #3
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80101c0:	f06f 0301 	mvn.w	r3, #1
 80101c4:	e023      	b.n	801020e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80101c6:	7dbb      	ldrb	r3, [r7, #22]
 80101c8:	7dfa      	ldrb	r2, [r7, #23]
 80101ca:	6939      	ldr	r1, [r7, #16]
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f7ff feeb 	bl	800ffa8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	3304      	adds	r3, #4
 80101d8:	6939      	ldr	r1, [r7, #16]
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7ff ff24 	bl	8010028 <tcp_output_control_segment>
 80101e0:	4603      	mov	r3, r0
 80101e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80101e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d007      	beq.n	80101fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	8b5b      	ldrh	r3, [r3, #26]
 80101f0:	f043 0303 	orr.w	r3, r3, #3
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	835a      	strh	r2, [r3, #26]
 80101fa:	e006      	b.n	801020a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	8b5b      	ldrh	r3, [r3, #26]
 8010200:	f023 0303 	bic.w	r3, r3, #3
 8010204:	b29a      	uxth	r2, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801020a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801020e:	4618      	mov	r0, r3
 8010210:	371c      	adds	r7, #28
 8010212:	46bd      	mov	sp, r7
 8010214:	bd90      	pop	{r4, r7, pc}
 8010216:	bf00      	nop
 8010218:	08015acc 	.word	0x08015acc
 801021c:	08016288 	.word	0x08016288
 8010220:	08015b20 	.word	0x08015b20

08010224 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010224:	b590      	push	{r4, r7, lr}
 8010226:	b087      	sub	sp, #28
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801022c:	2300      	movs	r3, #0
 801022e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d106      	bne.n	8010244 <tcp_keepalive+0x20>
 8010236:	4b18      	ldr	r3, [pc, #96]	; (8010298 <tcp_keepalive+0x74>)
 8010238:	f640 0224 	movw	r2, #2084	; 0x824
 801023c:	4917      	ldr	r1, [pc, #92]	; (801029c <tcp_keepalive+0x78>)
 801023e:	4818      	ldr	r0, [pc, #96]	; (80102a0 <tcp_keepalive+0x7c>)
 8010240:	f003 f82c 	bl	801329c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010244:	7dfb      	ldrb	r3, [r7, #23]
 8010246:	b29c      	uxth	r4, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801024c:	3b01      	subs	r3, #1
 801024e:	4618      	mov	r0, r3
 8010250:	f7f9 f92b 	bl	80094aa <lwip_htonl>
 8010254:	4603      	mov	r3, r0
 8010256:	2200      	movs	r2, #0
 8010258:	4621      	mov	r1, r4
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7ff fe66 	bl	800ff2c <tcp_output_alloc_header>
 8010260:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d102      	bne.n	801026e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010268:	f04f 33ff 	mov.w	r3, #4294967295
 801026c:	e010      	b.n	8010290 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	2200      	movs	r2, #0
 8010272:	6939      	ldr	r1, [r7, #16]
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7ff fe97 	bl	800ffa8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	3304      	adds	r3, #4
 8010280:	6939      	ldr	r1, [r7, #16]
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f7ff fed0 	bl	8010028 <tcp_output_control_segment>
 8010288:	4603      	mov	r3, r0
 801028a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801028c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010290:	4618      	mov	r0, r3
 8010292:	371c      	adds	r7, #28
 8010294:	46bd      	mov	sp, r7
 8010296:	bd90      	pop	{r4, r7, pc}
 8010298:	08015acc 	.word	0x08015acc
 801029c:	080162a8 	.word	0x080162a8
 80102a0:	08015b20 	.word	0x08015b20

080102a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80102a4:	b590      	push	{r4, r7, lr}
 80102a6:	b08b      	sub	sp, #44	; 0x2c
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80102ac:	2300      	movs	r3, #0
 80102ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d106      	bne.n	80102c6 <tcp_zero_window_probe+0x22>
 80102b8:	4b4c      	ldr	r3, [pc, #304]	; (80103ec <tcp_zero_window_probe+0x148>)
 80102ba:	f640 024f 	movw	r2, #2127	; 0x84f
 80102be:	494c      	ldr	r1, [pc, #304]	; (80103f0 <tcp_zero_window_probe+0x14c>)
 80102c0:	484c      	ldr	r0, [pc, #304]	; (80103f4 <tcp_zero_window_probe+0x150>)
 80102c2:	f002 ffeb 	bl	801329c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102ca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d101      	bne.n	80102d6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	e086      	b.n	80103e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80102dc:	2bff      	cmp	r3, #255	; 0xff
 80102de:	d007      	beq.n	80102f0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80102e6:	3301      	adds	r3, #1
 80102e8:	b2da      	uxtb	r2, r3
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80102f0:	6a3b      	ldr	r3, [r7, #32]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	899b      	ldrh	r3, [r3, #12]
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7f9 f8c1 	bl	8009480 <lwip_htons>
 80102fe:	4603      	mov	r3, r0
 8010300:	b2db      	uxtb	r3, r3
 8010302:	f003 0301 	and.w	r3, r3, #1
 8010306:	2b00      	cmp	r3, #0
 8010308:	d005      	beq.n	8010316 <tcp_zero_window_probe+0x72>
 801030a:	6a3b      	ldr	r3, [r7, #32]
 801030c:	891b      	ldrh	r3, [r3, #8]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d101      	bne.n	8010316 <tcp_zero_window_probe+0x72>
 8010312:	2301      	movs	r3, #1
 8010314:	e000      	b.n	8010318 <tcp_zero_window_probe+0x74>
 8010316:	2300      	movs	r3, #0
 8010318:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801031a:	7ffb      	ldrb	r3, [r7, #31]
 801031c:	2b00      	cmp	r3, #0
 801031e:	bf0c      	ite	eq
 8010320:	2301      	moveq	r3, #1
 8010322:	2300      	movne	r3, #0
 8010324:	b2db      	uxtb	r3, r3
 8010326:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801032c:	b299      	uxth	r1, r3
 801032e:	6a3b      	ldr	r3, [r7, #32]
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	8bba      	ldrh	r2, [r7, #28]
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f7ff fdf8 	bl	800ff2c <tcp_output_alloc_header>
 801033c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d102      	bne.n	801034a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010344:	f04f 33ff 	mov.w	r3, #4294967295
 8010348:	e04c      	b.n	80103e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010350:	7ffb      	ldrb	r3, [r7, #31]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d011      	beq.n	801037a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	899b      	ldrh	r3, [r3, #12]
 801035a:	b29b      	uxth	r3, r3
 801035c:	b21b      	sxth	r3, r3
 801035e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010362:	b21c      	sxth	r4, r3
 8010364:	2011      	movs	r0, #17
 8010366:	f7f9 f88b 	bl	8009480 <lwip_htons>
 801036a:	4603      	mov	r3, r0
 801036c:	b21b      	sxth	r3, r3
 801036e:	4323      	orrs	r3, r4
 8010370:	b21b      	sxth	r3, r3
 8010372:	b29a      	uxth	r2, r3
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	819a      	strh	r2, [r3, #12]
 8010378:	e010      	b.n	801039c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	3314      	adds	r3, #20
 8010380:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010382:	6a3b      	ldr	r3, [r7, #32]
 8010384:	6858      	ldr	r0, [r3, #4]
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	891a      	ldrh	r2, [r3, #8]
 801038c:	6a3b      	ldr	r3, [r7, #32]
 801038e:	891b      	ldrh	r3, [r3, #8]
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	b29b      	uxth	r3, r3
 8010394:	2201      	movs	r2, #1
 8010396:	6939      	ldr	r1, [r7, #16]
 8010398:	f7fa fe56 	bl	800b048 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7f9 f881 	bl	80094aa <lwip_htonl>
 80103a8:	4603      	mov	r3, r0
 80103aa:	3301      	adds	r3, #1
 80103ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	da02      	bge.n	80103c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80103c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103c4:	2200      	movs	r2, #0
 80103c6:	69b9      	ldr	r1, [r7, #24]
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff fded 	bl	800ffa8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3304      	adds	r3, #4
 80103d4:	69b9      	ldr	r1, [r7, #24]
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f7ff fe26 	bl	8010028 <tcp_output_control_segment>
 80103dc:	4603      	mov	r3, r0
 80103de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80103e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	372c      	adds	r7, #44	; 0x2c
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd90      	pop	{r4, r7, pc}
 80103ec:	08015acc 	.word	0x08015acc
 80103f0:	080162c4 	.word	0x080162c4
 80103f4:	08015b20 	.word	0x08015b20

080103f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010400:	f7fa ff10 	bl	800b224 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010404:	4b0a      	ldr	r3, [pc, #40]	; (8010430 <tcpip_tcp_timer+0x38>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d103      	bne.n	8010414 <tcpip_tcp_timer+0x1c>
 801040c:	4b09      	ldr	r3, [pc, #36]	; (8010434 <tcpip_tcp_timer+0x3c>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d005      	beq.n	8010420 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010414:	2200      	movs	r2, #0
 8010416:	4908      	ldr	r1, [pc, #32]	; (8010438 <tcpip_tcp_timer+0x40>)
 8010418:	20fa      	movs	r0, #250	; 0xfa
 801041a:	f000 f8f3 	bl	8010604 <sys_timeout>
 801041e:	e003      	b.n	8010428 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010420:	4b06      	ldr	r3, [pc, #24]	; (801043c <tcpip_tcp_timer+0x44>)
 8010422:	2200      	movs	r2, #0
 8010424:	601a      	str	r2, [r3, #0]
  }
}
 8010426:	bf00      	nop
 8010428:	bf00      	nop
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	240084d8 	.word	0x240084d8
 8010434:	240084e8 	.word	0x240084e8
 8010438:	080103f9 	.word	0x080103f9
 801043c:	24005060 	.word	0x24005060

08010440 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010444:	4b0a      	ldr	r3, [pc, #40]	; (8010470 <tcp_timer_needed+0x30>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d10f      	bne.n	801046c <tcp_timer_needed+0x2c>
 801044c:	4b09      	ldr	r3, [pc, #36]	; (8010474 <tcp_timer_needed+0x34>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d103      	bne.n	801045c <tcp_timer_needed+0x1c>
 8010454:	4b08      	ldr	r3, [pc, #32]	; (8010478 <tcp_timer_needed+0x38>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d007      	beq.n	801046c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801045c:	4b04      	ldr	r3, [pc, #16]	; (8010470 <tcp_timer_needed+0x30>)
 801045e:	2201      	movs	r2, #1
 8010460:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010462:	2200      	movs	r2, #0
 8010464:	4905      	ldr	r1, [pc, #20]	; (801047c <tcp_timer_needed+0x3c>)
 8010466:	20fa      	movs	r0, #250	; 0xfa
 8010468:	f000 f8cc 	bl	8010604 <sys_timeout>
  }
}
 801046c:	bf00      	nop
 801046e:	bd80      	pop	{r7, pc}
 8010470:	24005060 	.word	0x24005060
 8010474:	240084d8 	.word	0x240084d8
 8010478:	240084e8 	.word	0x240084e8
 801047c:	080103f9 	.word	0x080103f9

08010480 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801048c:	200a      	movs	r0, #10
 801048e:	f7f9 fccb 	bl	8009e28 <memp_malloc>
 8010492:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d109      	bne.n	80104ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d151      	bne.n	8010544 <sys_timeout_abs+0xc4>
 80104a0:	4b2a      	ldr	r3, [pc, #168]	; (801054c <sys_timeout_abs+0xcc>)
 80104a2:	22be      	movs	r2, #190	; 0xbe
 80104a4:	492a      	ldr	r1, [pc, #168]	; (8010550 <sys_timeout_abs+0xd0>)
 80104a6:	482b      	ldr	r0, [pc, #172]	; (8010554 <sys_timeout_abs+0xd4>)
 80104a8:	f002 fef8 	bl	801329c <iprintf>
    return;
 80104ac:	e04a      	b.n	8010544 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	2200      	movs	r2, #0
 80104b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	68ba      	ldr	r2, [r7, #8]
 80104b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80104c6:	4b24      	ldr	r3, [pc, #144]	; (8010558 <sys_timeout_abs+0xd8>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d103      	bne.n	80104d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80104ce:	4a22      	ldr	r2, [pc, #136]	; (8010558 <sys_timeout_abs+0xd8>)
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	6013      	str	r3, [r2, #0]
    return;
 80104d4:	e037      	b.n	8010546 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	685a      	ldr	r2, [r3, #4]
 80104da:	4b1f      	ldr	r3, [pc, #124]	; (8010558 <sys_timeout_abs+0xd8>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	0fdb      	lsrs	r3, r3, #31
 80104e4:	f003 0301 	and.w	r3, r3, #1
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d007      	beq.n	80104fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80104ee:	4b1a      	ldr	r3, [pc, #104]	; (8010558 <sys_timeout_abs+0xd8>)
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80104f6:	4a18      	ldr	r2, [pc, #96]	; (8010558 <sys_timeout_abs+0xd8>)
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	e023      	b.n	8010546 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80104fe:	4b16      	ldr	r3, [pc, #88]	; (8010558 <sys_timeout_abs+0xd8>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	617b      	str	r3, [r7, #20]
 8010504:	e01a      	b.n	801053c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00b      	beq.n	8010526 <sys_timeout_abs+0xa6>
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	685a      	ldr	r2, [r3, #4]
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	0fdb      	lsrs	r3, r3, #31
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	b2db      	uxtb	r3, r3
 8010522:	2b00      	cmp	r3, #0
 8010524:	d007      	beq.n	8010536 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	601a      	str	r2, [r3, #0]
        break;
 8010534:	e007      	b.n	8010546 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	617b      	str	r3, [r7, #20]
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1e1      	bne.n	8010506 <sys_timeout_abs+0x86>
 8010542:	e000      	b.n	8010546 <sys_timeout_abs+0xc6>
    return;
 8010544:	bf00      	nop
      }
    }
  }
}
 8010546:	3718      	adds	r7, #24
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	080162e8 	.word	0x080162e8
 8010550:	0801631c 	.word	0x0801631c
 8010554:	0801635c 	.word	0x0801635c
 8010558:	24005058 	.word	0x24005058

0801055c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b086      	sub	sp, #24
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	4798      	blx	r3

  now = sys_now();
 801056e:	f7f4 ff09 	bl	8005384 <sys_now>
 8010572:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	4b0f      	ldr	r3, [pc, #60]	; (80105b8 <lwip_cyclic_timer+0x5c>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4413      	add	r3, r2
 801057e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	1ad3      	subs	r3, r2, r3
 8010586:	0fdb      	lsrs	r3, r3, #31
 8010588:	f003 0301 	and.w	r3, r3, #1
 801058c:	b2db      	uxtb	r3, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	d009      	beq.n	80105a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	4413      	add	r3, r2
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	4907      	ldr	r1, [pc, #28]	; (80105bc <lwip_cyclic_timer+0x60>)
 801059e:	4618      	mov	r0, r3
 80105a0:	f7ff ff6e 	bl	8010480 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80105a4:	e004      	b.n	80105b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	4904      	ldr	r1, [pc, #16]	; (80105bc <lwip_cyclic_timer+0x60>)
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	f7ff ff68 	bl	8010480 <sys_timeout_abs>
}
 80105b0:	bf00      	nop
 80105b2:	3718      	adds	r7, #24
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	2400505c 	.word	0x2400505c
 80105bc:	0801055d 	.word	0x0801055d

080105c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80105c6:	2301      	movs	r3, #1
 80105c8:	607b      	str	r3, [r7, #4]
 80105ca:	e00e      	b.n	80105ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80105cc:	4a0b      	ldr	r2, [pc, #44]	; (80105fc <sys_timeouts_init+0x3c>)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	00db      	lsls	r3, r3, #3
 80105d8:	4a08      	ldr	r2, [pc, #32]	; (80105fc <sys_timeouts_init+0x3c>)
 80105da:	4413      	add	r3, r2
 80105dc:	461a      	mov	r2, r3
 80105de:	4908      	ldr	r1, [pc, #32]	; (8010600 <sys_timeouts_init+0x40>)
 80105e0:	f000 f810 	bl	8010604 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	3301      	adds	r3, #1
 80105e8:	607b      	str	r3, [r7, #4]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d9ed      	bls.n	80105cc <sys_timeouts_init+0xc>
  }
}
 80105f0:	bf00      	nop
 80105f2:	bf00      	nop
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	08016f30 	.word	0x08016f30
 8010600:	0801055d 	.word	0x0801055d

08010604 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010616:	d306      	bcc.n	8010626 <sys_timeout+0x22>
 8010618:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <sys_timeout+0x40>)
 801061a:	f240 1229 	movw	r2, #297	; 0x129
 801061e:	490a      	ldr	r1, [pc, #40]	; (8010648 <sys_timeout+0x44>)
 8010620:	480a      	ldr	r0, [pc, #40]	; (801064c <sys_timeout+0x48>)
 8010622:	f002 fe3b 	bl	801329c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010626:	f7f4 fead 	bl	8005384 <sys_now>
 801062a:	4602      	mov	r2, r0
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	4413      	add	r3, r2
 8010630:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	68b9      	ldr	r1, [r7, #8]
 8010636:	6978      	ldr	r0, [r7, #20]
 8010638:	f7ff ff22 	bl	8010480 <sys_timeout_abs>
#endif
}
 801063c:	bf00      	nop
 801063e:	3718      	adds	r7, #24
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	080162e8 	.word	0x080162e8
 8010648:	08016384 	.word	0x08016384
 801064c:	0801635c 	.word	0x0801635c

08010650 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010656:	f7f4 fe95 	bl	8005384 <sys_now>
 801065a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801065c:	4b17      	ldr	r3, [pc, #92]	; (80106bc <sys_check_timeouts+0x6c>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d022      	beq.n	80106ae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	68fa      	ldr	r2, [r7, #12]
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	0fdb      	lsrs	r3, r3, #31
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	d11a      	bne.n	80106b2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a0e      	ldr	r2, [pc, #56]	; (80106bc <sys_check_timeouts+0x6c>)
 8010682:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	4a0a      	ldr	r2, [pc, #40]	; (80106c0 <sys_check_timeouts+0x70>)
 8010696:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010698:	68b9      	ldr	r1, [r7, #8]
 801069a:	200a      	movs	r0, #10
 801069c:	f7f9 fc3a 	bl	8009f14 <memp_free>
    if (handler != NULL) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d0da      	beq.n	801065c <sys_check_timeouts+0xc>
      handler(arg);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6838      	ldr	r0, [r7, #0]
 80106aa:	4798      	blx	r3
  do {
 80106ac:	e7d6      	b.n	801065c <sys_check_timeouts+0xc>
      return;
 80106ae:	bf00      	nop
 80106b0:	e000      	b.n	80106b4 <sys_check_timeouts+0x64>
      return;
 80106b2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	24005058 	.word	0x24005058
 80106c0:	2400505c 	.word	0x2400505c

080106c4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80106ca:	4b16      	ldr	r3, [pc, #88]	; (8010724 <sys_timeouts_sleeptime+0x60>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d102      	bne.n	80106d8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80106d2:	f04f 33ff 	mov.w	r3, #4294967295
 80106d6:	e020      	b.n	801071a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80106d8:	f7f4 fe54 	bl	8005384 <sys_now>
 80106dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80106de:	4b11      	ldr	r3, [pc, #68]	; (8010724 <sys_timeouts_sleeptime+0x60>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	0fdb      	lsrs	r3, r3, #31
 80106ea:	f003 0301 	and.w	r3, r3, #1
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d001      	beq.n	80106f8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80106f4:	2300      	movs	r3, #0
 80106f6:	e010      	b.n	801071a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80106f8:	4b0a      	ldr	r3, [pc, #40]	; (8010724 <sys_timeouts_sleeptime+0x60>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	da06      	bge.n	8010718 <sys_timeouts_sleeptime+0x54>
 801070a:	4b07      	ldr	r3, [pc, #28]	; (8010728 <sys_timeouts_sleeptime+0x64>)
 801070c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010710:	4906      	ldr	r1, [pc, #24]	; (801072c <sys_timeouts_sleeptime+0x68>)
 8010712:	4807      	ldr	r0, [pc, #28]	; (8010730 <sys_timeouts_sleeptime+0x6c>)
 8010714:	f002 fdc2 	bl	801329c <iprintf>
    return ret;
 8010718:	683b      	ldr	r3, [r7, #0]
  }
}
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	24005058 	.word	0x24005058
 8010728:	080162e8 	.word	0x080162e8
 801072c:	080163bc 	.word	0x080163bc
 8010730:	0801635c 	.word	0x0801635c

08010734 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010738:	f002 fdc8 	bl	80132cc <rand>
 801073c:	4603      	mov	r3, r0
 801073e:	b29b      	uxth	r3, r3
 8010740:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010744:	b29b      	uxth	r3, r3
 8010746:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801074a:	b29a      	uxth	r2, r3
 801074c:	4b01      	ldr	r3, [pc, #4]	; (8010754 <udp_init+0x20>)
 801074e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010750:	bf00      	nop
 8010752:	bd80      	pop	{r7, pc}
 8010754:	24000030 	.word	0x24000030

08010758 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	4613      	mov	r3, r2
 8010764:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d105      	bne.n	8010778 <udp_input_local_match+0x20>
 801076c:	4b27      	ldr	r3, [pc, #156]	; (801080c <udp_input_local_match+0xb4>)
 801076e:	2287      	movs	r2, #135	; 0x87
 8010770:	4927      	ldr	r1, [pc, #156]	; (8010810 <udp_input_local_match+0xb8>)
 8010772:	4828      	ldr	r0, [pc, #160]	; (8010814 <udp_input_local_match+0xbc>)
 8010774:	f002 fd92 	bl	801329c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d105      	bne.n	801078a <udp_input_local_match+0x32>
 801077e:	4b23      	ldr	r3, [pc, #140]	; (801080c <udp_input_local_match+0xb4>)
 8010780:	2288      	movs	r2, #136	; 0x88
 8010782:	4925      	ldr	r1, [pc, #148]	; (8010818 <udp_input_local_match+0xc0>)
 8010784:	4823      	ldr	r0, [pc, #140]	; (8010814 <udp_input_local_match+0xbc>)
 8010786:	f002 fd89 	bl	801329c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	7a1b      	ldrb	r3, [r3, #8]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00b      	beq.n	80107aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	7a1a      	ldrb	r2, [r3, #8]
 8010796:	4b21      	ldr	r3, [pc, #132]	; (801081c <udp_input_local_match+0xc4>)
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801079e:	3301      	adds	r3, #1
 80107a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d001      	beq.n	80107aa <udp_input_local_match+0x52>
    return 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	e02b      	b.n	8010802 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80107aa:	79fb      	ldrb	r3, [r7, #7]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d018      	beq.n	80107e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d013      	beq.n	80107de <udp_input_local_match+0x86>
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00f      	beq.n	80107de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80107be:	4b17      	ldr	r3, [pc, #92]	; (801081c <udp_input_local_match+0xc4>)
 80107c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c6:	d00a      	beq.n	80107de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	4b13      	ldr	r3, [pc, #76]	; (801081c <udp_input_local_match+0xc4>)
 80107ce:	695b      	ldr	r3, [r3, #20]
 80107d0:	405a      	eors	r2, r3
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	3308      	adds	r3, #8
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d110      	bne.n	8010800 <udp_input_local_match+0xa8>
          return 1;
 80107de:	2301      	movs	r3, #1
 80107e0:	e00f      	b.n	8010802 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d009      	beq.n	80107fc <udp_input_local_match+0xa4>
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d005      	beq.n	80107fc <udp_input_local_match+0xa4>
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	4b09      	ldr	r3, [pc, #36]	; (801081c <udp_input_local_match+0xc4>)
 80107f6:	695b      	ldr	r3, [r3, #20]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d101      	bne.n	8010800 <udp_input_local_match+0xa8>
        return 1;
 80107fc:	2301      	movs	r3, #1
 80107fe:	e000      	b.n	8010802 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3710      	adds	r7, #16
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	080163d0 	.word	0x080163d0
 8010810:	08016400 	.word	0x08016400
 8010814:	08016424 	.word	0x08016424
 8010818:	0801644c 	.word	0x0801644c
 801081c:	24005418 	.word	0x24005418

08010820 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010820:	b590      	push	{r4, r7, lr}
 8010822:	b08d      	sub	sp, #52	; 0x34
 8010824:	af02      	add	r7, sp, #8
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801082a:	2300      	movs	r3, #0
 801082c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d105      	bne.n	8010840 <udp_input+0x20>
 8010834:	4b7c      	ldr	r3, [pc, #496]	; (8010a28 <udp_input+0x208>)
 8010836:	22cf      	movs	r2, #207	; 0xcf
 8010838:	497c      	ldr	r1, [pc, #496]	; (8010a2c <udp_input+0x20c>)
 801083a:	487d      	ldr	r0, [pc, #500]	; (8010a30 <udp_input+0x210>)
 801083c:	f002 fd2e 	bl	801329c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d105      	bne.n	8010852 <udp_input+0x32>
 8010846:	4b78      	ldr	r3, [pc, #480]	; (8010a28 <udp_input+0x208>)
 8010848:	22d0      	movs	r2, #208	; 0xd0
 801084a:	497a      	ldr	r1, [pc, #488]	; (8010a34 <udp_input+0x214>)
 801084c:	4878      	ldr	r0, [pc, #480]	; (8010a30 <udp_input+0x210>)
 801084e:	f002 fd25 	bl	801329c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	895b      	ldrh	r3, [r3, #10]
 8010856:	2b07      	cmp	r3, #7
 8010858:	d803      	bhi.n	8010862 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7fa f9fe 	bl	800ac5c <pbuf_free>
    goto end;
 8010860:	e0de      	b.n	8010a20 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010868:	4b73      	ldr	r3, [pc, #460]	; (8010a38 <udp_input+0x218>)
 801086a:	695b      	ldr	r3, [r3, #20]
 801086c:	4a72      	ldr	r2, [pc, #456]	; (8010a38 <udp_input+0x218>)
 801086e:	6812      	ldr	r2, [r2, #0]
 8010870:	4611      	mov	r1, r2
 8010872:	4618      	mov	r0, r3
 8010874:	f001 fc88 	bl	8012188 <ip4_addr_isbroadcast_u32>
 8010878:	4603      	mov	r3, r0
 801087a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	881b      	ldrh	r3, [r3, #0]
 8010880:	b29b      	uxth	r3, r3
 8010882:	4618      	mov	r0, r3
 8010884:	f7f8 fdfc 	bl	8009480 <lwip_htons>
 8010888:	4603      	mov	r3, r0
 801088a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	885b      	ldrh	r3, [r3, #2]
 8010890:	b29b      	uxth	r3, r3
 8010892:	4618      	mov	r0, r3
 8010894:	f7f8 fdf4 	bl	8009480 <lwip_htons>
 8010898:	4603      	mov	r3, r0
 801089a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801089c:	2300      	movs	r3, #0
 801089e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80108a0:	2300      	movs	r3, #0
 80108a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80108a4:	2300      	movs	r3, #0
 80108a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80108a8:	4b64      	ldr	r3, [pc, #400]	; (8010a3c <udp_input+0x21c>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	627b      	str	r3, [r7, #36]	; 0x24
 80108ae:	e054      	b.n	801095a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	8a5b      	ldrh	r3, [r3, #18]
 80108b4:	89fa      	ldrh	r2, [r7, #14]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d14a      	bne.n	8010950 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80108ba:	7cfb      	ldrb	r3, [r7, #19]
 80108bc:	461a      	mov	r2, r3
 80108be:	6839      	ldr	r1, [r7, #0]
 80108c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108c2:	f7ff ff49 	bl	8010758 <udp_input_local_match>
 80108c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d041      	beq.n	8010950 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	7c1b      	ldrb	r3, [r3, #16]
 80108d0:	f003 0304 	and.w	r3, r3, #4
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d11d      	bne.n	8010914 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d102      	bne.n	80108e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	61fb      	str	r3, [r7, #28]
 80108e2:	e017      	b.n	8010914 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80108e4:	7cfb      	ldrb	r3, [r7, #19]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d014      	beq.n	8010914 <udp_input+0xf4>
 80108ea:	4b53      	ldr	r3, [pc, #332]	; (8010a38 <udp_input+0x218>)
 80108ec:	695b      	ldr	r3, [r3, #20]
 80108ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f2:	d10f      	bne.n	8010914 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	3304      	adds	r3, #4
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d008      	beq.n	8010914 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	3304      	adds	r3, #4
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	429a      	cmp	r2, r3
 801090e:	d101      	bne.n	8010914 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010912:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	8a9b      	ldrh	r3, [r3, #20]
 8010918:	8a3a      	ldrh	r2, [r7, #16]
 801091a:	429a      	cmp	r2, r3
 801091c:	d118      	bne.n	8010950 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010920:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010922:	2b00      	cmp	r3, #0
 8010924:	d005      	beq.n	8010932 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	685a      	ldr	r2, [r3, #4]
 801092a:	4b43      	ldr	r3, [pc, #268]	; (8010a38 <udp_input+0x218>)
 801092c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801092e:	429a      	cmp	r2, r3
 8010930:	d10e      	bne.n	8010950 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010932:	6a3b      	ldr	r3, [r7, #32]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d014      	beq.n	8010962 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	68da      	ldr	r2, [r3, #12]
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010940:	4b3e      	ldr	r3, [pc, #248]	; (8010a3c <udp_input+0x21c>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010946:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010948:	4a3c      	ldr	r2, [pc, #240]	; (8010a3c <udp_input+0x21c>)
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801094e:	e008      	b.n	8010962 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	627b      	str	r3, [r7, #36]	; 0x24
 801095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095c:	2b00      	cmp	r3, #0
 801095e:	d1a7      	bne.n	80108b0 <udp_input+0x90>
 8010960:	e000      	b.n	8010964 <udp_input+0x144>
        break;
 8010962:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010966:	2b00      	cmp	r3, #0
 8010968:	d101      	bne.n	801096e <udp_input+0x14e>
    pcb = uncon_pcb;
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010970:	2b00      	cmp	r3, #0
 8010972:	d002      	beq.n	801097a <udp_input+0x15a>
    for_us = 1;
 8010974:	2301      	movs	r3, #1
 8010976:	76fb      	strb	r3, [r7, #27]
 8010978:	e00a      	b.n	8010990 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	3304      	adds	r3, #4
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	4b2d      	ldr	r3, [pc, #180]	; (8010a38 <udp_input+0x218>)
 8010982:	695b      	ldr	r3, [r3, #20]
 8010984:	429a      	cmp	r2, r3
 8010986:	bf0c      	ite	eq
 8010988:	2301      	moveq	r3, #1
 801098a:	2300      	movne	r3, #0
 801098c:	b2db      	uxtb	r3, r3
 801098e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010990:	7efb      	ldrb	r3, [r7, #27]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d041      	beq.n	8010a1a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010996:	2108      	movs	r1, #8
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7fa f8d9 	bl	800ab50 <pbuf_remove_header>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00a      	beq.n	80109ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80109a4:	4b20      	ldr	r3, [pc, #128]	; (8010a28 <udp_input+0x208>)
 80109a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80109aa:	4925      	ldr	r1, [pc, #148]	; (8010a40 <udp_input+0x220>)
 80109ac:	4820      	ldr	r0, [pc, #128]	; (8010a30 <udp_input+0x210>)
 80109ae:	f002 fc75 	bl	801329c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7fa f952 	bl	800ac5c <pbuf_free>
      goto end;
 80109b8:	e032      	b.n	8010a20 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80109ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d012      	beq.n	80109e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	699b      	ldr	r3, [r3, #24]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00a      	beq.n	80109de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	699c      	ldr	r4, [r3, #24]
 80109cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ce:	69d8      	ldr	r0, [r3, #28]
 80109d0:	8a3b      	ldrh	r3, [r7, #16]
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	4b1b      	ldr	r3, [pc, #108]	; (8010a44 <udp_input+0x224>)
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80109dc:	e021      	b.n	8010a22 <udp_input+0x202>
        pbuf_free(p);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f7fa f93c 	bl	800ac5c <pbuf_free>
        goto end;
 80109e4:	e01c      	b.n	8010a20 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80109e6:	7cfb      	ldrb	r3, [r7, #19]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d112      	bne.n	8010a12 <udp_input+0x1f2>
 80109ec:	4b12      	ldr	r3, [pc, #72]	; (8010a38 <udp_input+0x218>)
 80109ee:	695b      	ldr	r3, [r3, #20]
 80109f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109f4:	2be0      	cmp	r3, #224	; 0xe0
 80109f6:	d00c      	beq.n	8010a12 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80109f8:	4b0f      	ldr	r3, [pc, #60]	; (8010a38 <udp_input+0x218>)
 80109fa:	899b      	ldrh	r3, [r3, #12]
 80109fc:	3308      	adds	r3, #8
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	b21b      	sxth	r3, r3
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7fa f916 	bl	800ac36 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010a0a:	2103      	movs	r1, #3
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f001 f89b 	bl	8011b48 <icmp_dest_unreach>
      pbuf_free(p);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7fa f922 	bl	800ac5c <pbuf_free>
  return;
 8010a18:	e003      	b.n	8010a22 <udp_input+0x202>
    pbuf_free(p);
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7fa f91e 	bl	800ac5c <pbuf_free>
  return;
 8010a20:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010a22:	372c      	adds	r7, #44	; 0x2c
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd90      	pop	{r4, r7, pc}
 8010a28:	080163d0 	.word	0x080163d0
 8010a2c:	08016474 	.word	0x08016474
 8010a30:	08016424 	.word	0x08016424
 8010a34:	0801648c 	.word	0x0801648c
 8010a38:	24005418 	.word	0x24005418
 8010a3c:	240084f0 	.word	0x240084f0
 8010a40:	080164a8 	.word	0x080164a8
 8010a44:	24005428 	.word	0x24005428

08010a48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d01e      	beq.n	8010a96 <udp_netif_ip_addr_changed+0x4e>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d01a      	beq.n	8010a96 <udp_netif_ip_addr_changed+0x4e>
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d017      	beq.n	8010a96 <udp_netif_ip_addr_changed+0x4e>
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d013      	beq.n	8010a96 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010a6e:	4b0d      	ldr	r3, [pc, #52]	; (8010aa4 <udp_netif_ip_addr_changed+0x5c>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	60fb      	str	r3, [r7, #12]
 8010a74:	e00c      	b.n	8010a90 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d103      	bne.n	8010a8a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	68db      	ldr	r3, [r3, #12]
 8010a8e:	60fb      	str	r3, [r7, #12]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1ef      	bne.n	8010a76 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010a96:	bf00      	nop
 8010a98:	3714      	adds	r7, #20
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop
 8010aa4:	240084f0 	.word	0x240084f0

08010aa8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010ab0:	4915      	ldr	r1, [pc, #84]	; (8010b08 <etharp_free_entry+0x60>)
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	4413      	add	r3, r2
 8010aba:	00db      	lsls	r3, r3, #3
 8010abc:	440b      	add	r3, r1
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d013      	beq.n	8010aec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010ac4:	4910      	ldr	r1, [pc, #64]	; (8010b08 <etharp_free_entry+0x60>)
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	4413      	add	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	440b      	add	r3, r1
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fa f8c1 	bl	800ac5c <pbuf_free>
    arp_table[i].q = NULL;
 8010ada:	490b      	ldr	r1, [pc, #44]	; (8010b08 <etharp_free_entry+0x60>)
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	4613      	mov	r3, r2
 8010ae0:	005b      	lsls	r3, r3, #1
 8010ae2:	4413      	add	r3, r2
 8010ae4:	00db      	lsls	r3, r3, #3
 8010ae6:	440b      	add	r3, r1
 8010ae8:	2200      	movs	r2, #0
 8010aea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010aec:	4906      	ldr	r1, [pc, #24]	; (8010b08 <etharp_free_entry+0x60>)
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	4613      	mov	r3, r2
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	4413      	add	r3, r2
 8010af6:	00db      	lsls	r3, r3, #3
 8010af8:	440b      	add	r3, r1
 8010afa:	3314      	adds	r3, #20
 8010afc:	2200      	movs	r2, #0
 8010afe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	24005064 	.word	0x24005064

08010b0c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b12:	2300      	movs	r3, #0
 8010b14:	607b      	str	r3, [r7, #4]
 8010b16:	e096      	b.n	8010c46 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010b18:	494f      	ldr	r1, [pc, #316]	; (8010c58 <etharp_tmr+0x14c>)
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	4413      	add	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	440b      	add	r3, r1
 8010b26:	3314      	adds	r3, #20
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010b2c:	78fb      	ldrb	r3, [r7, #3]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f000 8086 	beq.w	8010c40 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010b34:	4948      	ldr	r1, [pc, #288]	; (8010c58 <etharp_tmr+0x14c>)
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	4413      	add	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	440b      	add	r3, r1
 8010b42:	3312      	adds	r3, #18
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	3301      	adds	r3, #1
 8010b48:	b298      	uxth	r0, r3
 8010b4a:	4943      	ldr	r1, [pc, #268]	; (8010c58 <etharp_tmr+0x14c>)
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	4613      	mov	r3, r2
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	4413      	add	r3, r2
 8010b54:	00db      	lsls	r3, r3, #3
 8010b56:	440b      	add	r3, r1
 8010b58:	3312      	adds	r3, #18
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b5e:	493e      	ldr	r1, [pc, #248]	; (8010c58 <etharp_tmr+0x14c>)
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	4613      	mov	r3, r2
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4413      	add	r3, r2
 8010b68:	00db      	lsls	r3, r3, #3
 8010b6a:	440b      	add	r3, r1
 8010b6c:	3312      	adds	r3, #18
 8010b6e:	881b      	ldrh	r3, [r3, #0]
 8010b70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010b74:	d215      	bcs.n	8010ba2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b76:	4938      	ldr	r1, [pc, #224]	; (8010c58 <etharp_tmr+0x14c>)
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	4413      	add	r3, r2
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	440b      	add	r3, r1
 8010b84:	3314      	adds	r3, #20
 8010b86:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d10e      	bne.n	8010baa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010b8c:	4932      	ldr	r1, [pc, #200]	; (8010c58 <etharp_tmr+0x14c>)
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	4613      	mov	r3, r2
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	4413      	add	r3, r2
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	440b      	add	r3, r1
 8010b9a:	3312      	adds	r3, #18
 8010b9c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b9e:	2b04      	cmp	r3, #4
 8010ba0:	d903      	bls.n	8010baa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff ff80 	bl	8010aa8 <etharp_free_entry>
 8010ba8:	e04a      	b.n	8010c40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010baa:	492b      	ldr	r1, [pc, #172]	; (8010c58 <etharp_tmr+0x14c>)
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	005b      	lsls	r3, r3, #1
 8010bb2:	4413      	add	r3, r2
 8010bb4:	00db      	lsls	r3, r3, #3
 8010bb6:	440b      	add	r3, r1
 8010bb8:	3314      	adds	r3, #20
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	d10a      	bne.n	8010bd6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010bc0:	4925      	ldr	r1, [pc, #148]	; (8010c58 <etharp_tmr+0x14c>)
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	005b      	lsls	r3, r3, #1
 8010bc8:	4413      	add	r3, r2
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	440b      	add	r3, r1
 8010bce:	3314      	adds	r3, #20
 8010bd0:	2204      	movs	r2, #4
 8010bd2:	701a      	strb	r2, [r3, #0]
 8010bd4:	e034      	b.n	8010c40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010bd6:	4920      	ldr	r1, [pc, #128]	; (8010c58 <etharp_tmr+0x14c>)
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	4613      	mov	r3, r2
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	4413      	add	r3, r2
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	440b      	add	r3, r1
 8010be4:	3314      	adds	r3, #20
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	2b04      	cmp	r3, #4
 8010bea:	d10a      	bne.n	8010c02 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010bec:	491a      	ldr	r1, [pc, #104]	; (8010c58 <etharp_tmr+0x14c>)
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	005b      	lsls	r3, r3, #1
 8010bf4:	4413      	add	r3, r2
 8010bf6:	00db      	lsls	r3, r3, #3
 8010bf8:	440b      	add	r3, r1
 8010bfa:	3314      	adds	r3, #20
 8010bfc:	2202      	movs	r2, #2
 8010bfe:	701a      	strb	r2, [r3, #0]
 8010c00:	e01e      	b.n	8010c40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c02:	4915      	ldr	r1, [pc, #84]	; (8010c58 <etharp_tmr+0x14c>)
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	440b      	add	r3, r1
 8010c10:	3314      	adds	r3, #20
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	d113      	bne.n	8010c40 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010c18:	490f      	ldr	r1, [pc, #60]	; (8010c58 <etharp_tmr+0x14c>)
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	440b      	add	r3, r1
 8010c26:	3308      	adds	r3, #8
 8010c28:	6818      	ldr	r0, [r3, #0]
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	4413      	add	r3, r2
 8010c32:	00db      	lsls	r3, r3, #3
 8010c34:	4a08      	ldr	r2, [pc, #32]	; (8010c58 <etharp_tmr+0x14c>)
 8010c36:	4413      	add	r3, r2
 8010c38:	3304      	adds	r3, #4
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	f000 fe6e 	bl	801191c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	3301      	adds	r3, #1
 8010c44:	607b      	str	r3, [r7, #4]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2b09      	cmp	r3, #9
 8010c4a:	f77f af65 	ble.w	8010b18 <etharp_tmr+0xc>
      }
    }
  }
}
 8010c4e:	bf00      	nop
 8010c50:	bf00      	nop
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	24005064 	.word	0x24005064

08010c5c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b08a      	sub	sp, #40	; 0x28
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	460b      	mov	r3, r1
 8010c66:	607a      	str	r2, [r7, #4]
 8010c68:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010c6a:	230a      	movs	r3, #10
 8010c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010c6e:	230a      	movs	r3, #10
 8010c70:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010c72:	230a      	movs	r3, #10
 8010c74:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010c7a:	230a      	movs	r3, #10
 8010c7c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	83bb      	strh	r3, [r7, #28]
 8010c82:	2300      	movs	r3, #0
 8010c84:	837b      	strh	r3, [r7, #26]
 8010c86:	2300      	movs	r3, #0
 8010c88:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	843b      	strh	r3, [r7, #32]
 8010c8e:	e0ae      	b.n	8010dee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c94:	49a6      	ldr	r1, [pc, #664]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010c96:	4613      	mov	r3, r2
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	4413      	add	r3, r2
 8010c9c:	00db      	lsls	r3, r3, #3
 8010c9e:	440b      	add	r3, r1
 8010ca0:	3314      	adds	r3, #20
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010ca6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010caa:	2b0a      	cmp	r3, #10
 8010cac:	d105      	bne.n	8010cba <etharp_find_entry+0x5e>
 8010cae:	7dfb      	ldrb	r3, [r7, #23]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d102      	bne.n	8010cba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010cb4:	8c3b      	ldrh	r3, [r7, #32]
 8010cb6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010cb8:	e095      	b.n	8010de6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010cba:	7dfb      	ldrb	r3, [r7, #23]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f000 8092 	beq.w	8010de6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d009      	beq.n	8010cdc <etharp_find_entry+0x80>
 8010cc8:	7dfb      	ldrb	r3, [r7, #23]
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d806      	bhi.n	8010cdc <etharp_find_entry+0x80>
 8010cce:	4b99      	ldr	r3, [pc, #612]	; (8010f34 <etharp_find_entry+0x2d8>)
 8010cd0:	f240 1223 	movw	r2, #291	; 0x123
 8010cd4:	4998      	ldr	r1, [pc, #608]	; (8010f38 <etharp_find_entry+0x2dc>)
 8010cd6:	4899      	ldr	r0, [pc, #612]	; (8010f3c <etharp_find_entry+0x2e0>)
 8010cd8:	f002 fae0 	bl	801329c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d020      	beq.n	8010d24 <etharp_find_entry+0xc8>
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	6819      	ldr	r1, [r3, #0]
 8010ce6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cea:	4891      	ldr	r0, [pc, #580]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010cec:	4613      	mov	r3, r2
 8010cee:	005b      	lsls	r3, r3, #1
 8010cf0:	4413      	add	r3, r2
 8010cf2:	00db      	lsls	r3, r3, #3
 8010cf4:	4403      	add	r3, r0
 8010cf6:	3304      	adds	r3, #4
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4299      	cmp	r1, r3
 8010cfc:	d112      	bne.n	8010d24 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00c      	beq.n	8010d1e <etharp_find_entry+0xc2>
 8010d04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d08:	4989      	ldr	r1, [pc, #548]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	005b      	lsls	r3, r3, #1
 8010d0e:	4413      	add	r3, r2
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	440b      	add	r3, r1
 8010d14:	3308      	adds	r3, #8
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d102      	bne.n	8010d24 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010d1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d22:	e100      	b.n	8010f26 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010d24:	7dfb      	ldrb	r3, [r7, #23]
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d140      	bne.n	8010dac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010d2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d2e:	4980      	ldr	r1, [pc, #512]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010d30:	4613      	mov	r3, r2
 8010d32:	005b      	lsls	r3, r3, #1
 8010d34:	4413      	add	r3, r2
 8010d36:	00db      	lsls	r3, r3, #3
 8010d38:	440b      	add	r3, r1
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d01a      	beq.n	8010d76 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010d40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d44:	497a      	ldr	r1, [pc, #488]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010d46:	4613      	mov	r3, r2
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	4413      	add	r3, r2
 8010d4c:	00db      	lsls	r3, r3, #3
 8010d4e:	440b      	add	r3, r1
 8010d50:	3312      	adds	r3, #18
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	8bba      	ldrh	r2, [r7, #28]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d845      	bhi.n	8010de6 <etharp_find_entry+0x18a>
            old_queue = i;
 8010d5a:	8c3b      	ldrh	r3, [r7, #32]
 8010d5c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010d5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d62:	4973      	ldr	r1, [pc, #460]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010d64:	4613      	mov	r3, r2
 8010d66:	005b      	lsls	r3, r3, #1
 8010d68:	4413      	add	r3, r2
 8010d6a:	00db      	lsls	r3, r3, #3
 8010d6c:	440b      	add	r3, r1
 8010d6e:	3312      	adds	r3, #18
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	83bb      	strh	r3, [r7, #28]
 8010d74:	e037      	b.n	8010de6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d7a:	496d      	ldr	r1, [pc, #436]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	4413      	add	r3, r2
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	440b      	add	r3, r1
 8010d86:	3312      	adds	r3, #18
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	8b7a      	ldrh	r2, [r7, #26]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d82a      	bhi.n	8010de6 <etharp_find_entry+0x18a>
            old_pending = i;
 8010d90:	8c3b      	ldrh	r3, [r7, #32]
 8010d92:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010d94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d98:	4965      	ldr	r1, [pc, #404]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	005b      	lsls	r3, r3, #1
 8010d9e:	4413      	add	r3, r2
 8010da0:	00db      	lsls	r3, r3, #3
 8010da2:	440b      	add	r3, r1
 8010da4:	3312      	adds	r3, #18
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	837b      	strh	r3, [r7, #26]
 8010daa:	e01c      	b.n	8010de6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010dac:	7dfb      	ldrb	r3, [r7, #23]
 8010dae:	2b01      	cmp	r3, #1
 8010db0:	d919      	bls.n	8010de6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010db2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010db6:	495e      	ldr	r1, [pc, #376]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010db8:	4613      	mov	r3, r2
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	4413      	add	r3, r2
 8010dbe:	00db      	lsls	r3, r3, #3
 8010dc0:	440b      	add	r3, r1
 8010dc2:	3312      	adds	r3, #18
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	8b3a      	ldrh	r2, [r7, #24]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d80c      	bhi.n	8010de6 <etharp_find_entry+0x18a>
            old_stable = i;
 8010dcc:	8c3b      	ldrh	r3, [r7, #32]
 8010dce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010dd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dd4:	4956      	ldr	r1, [pc, #344]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	4413      	add	r3, r2
 8010ddc:	00db      	lsls	r3, r3, #3
 8010dde:	440b      	add	r3, r1
 8010de0:	3312      	adds	r3, #18
 8010de2:	881b      	ldrh	r3, [r3, #0]
 8010de4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010de6:	8c3b      	ldrh	r3, [r7, #32]
 8010de8:	3301      	adds	r3, #1
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	843b      	strh	r3, [r7, #32]
 8010dee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010df2:	2b09      	cmp	r3, #9
 8010df4:	f77f af4c 	ble.w	8010c90 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010df8:	7afb      	ldrb	r3, [r7, #11]
 8010dfa:	f003 0302 	and.w	r3, r3, #2
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d108      	bne.n	8010e14 <etharp_find_entry+0x1b8>
 8010e02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e06:	2b0a      	cmp	r3, #10
 8010e08:	d107      	bne.n	8010e1a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010e0a:	7afb      	ldrb	r3, [r7, #11]
 8010e0c:	f003 0301 	and.w	r3, r3, #1
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d102      	bne.n	8010e1a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010e14:	f04f 33ff 	mov.w	r3, #4294967295
 8010e18:	e085      	b.n	8010f26 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010e1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e1e:	2b09      	cmp	r3, #9
 8010e20:	dc02      	bgt.n	8010e28 <etharp_find_entry+0x1cc>
    i = empty;
 8010e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e24:	843b      	strh	r3, [r7, #32]
 8010e26:	e039      	b.n	8010e9c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010e28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010e2c:	2b09      	cmp	r3, #9
 8010e2e:	dc14      	bgt.n	8010e5a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e32:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010e34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e38:	493d      	ldr	r1, [pc, #244]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	005b      	lsls	r3, r3, #1
 8010e3e:	4413      	add	r3, r2
 8010e40:	00db      	lsls	r3, r3, #3
 8010e42:	440b      	add	r3, r1
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d018      	beq.n	8010e7c <etharp_find_entry+0x220>
 8010e4a:	4b3a      	ldr	r3, [pc, #232]	; (8010f34 <etharp_find_entry+0x2d8>)
 8010e4c:	f240 126d 	movw	r2, #365	; 0x16d
 8010e50:	493b      	ldr	r1, [pc, #236]	; (8010f40 <etharp_find_entry+0x2e4>)
 8010e52:	483a      	ldr	r0, [pc, #232]	; (8010f3c <etharp_find_entry+0x2e0>)
 8010e54:	f002 fa22 	bl	801329c <iprintf>
 8010e58:	e010      	b.n	8010e7c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010e5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010e5e:	2b09      	cmp	r3, #9
 8010e60:	dc02      	bgt.n	8010e68 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e64:	843b      	strh	r3, [r7, #32]
 8010e66:	e009      	b.n	8010e7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010e68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e6c:	2b09      	cmp	r3, #9
 8010e6e:	dc02      	bgt.n	8010e76 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010e70:	8bfb      	ldrh	r3, [r7, #30]
 8010e72:	843b      	strh	r3, [r7, #32]
 8010e74:	e002      	b.n	8010e7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010e76:	f04f 33ff 	mov.w	r3, #4294967295
 8010e7a:	e054      	b.n	8010f26 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e80:	2b09      	cmp	r3, #9
 8010e82:	dd06      	ble.n	8010e92 <etharp_find_entry+0x236>
 8010e84:	4b2b      	ldr	r3, [pc, #172]	; (8010f34 <etharp_find_entry+0x2d8>)
 8010e86:	f240 127f 	movw	r2, #383	; 0x17f
 8010e8a:	492e      	ldr	r1, [pc, #184]	; (8010f44 <etharp_find_entry+0x2e8>)
 8010e8c:	482b      	ldr	r0, [pc, #172]	; (8010f3c <etharp_find_entry+0x2e0>)
 8010e8e:	f002 fa05 	bl	801329c <iprintf>
    etharp_free_entry(i);
 8010e92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ff fe06 	bl	8010aa8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ea0:	2b09      	cmp	r3, #9
 8010ea2:	dd06      	ble.n	8010eb2 <etharp_find_entry+0x256>
 8010ea4:	4b23      	ldr	r3, [pc, #140]	; (8010f34 <etharp_find_entry+0x2d8>)
 8010ea6:	f240 1283 	movw	r2, #387	; 0x183
 8010eaa:	4926      	ldr	r1, [pc, #152]	; (8010f44 <etharp_find_entry+0x2e8>)
 8010eac:	4823      	ldr	r0, [pc, #140]	; (8010f3c <etharp_find_entry+0x2e0>)
 8010eae:	f002 f9f5 	bl	801329c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010eb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010eb6:	491e      	ldr	r1, [pc, #120]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010eb8:	4613      	mov	r3, r2
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	00db      	lsls	r3, r3, #3
 8010ec0:	440b      	add	r3, r1
 8010ec2:	3314      	adds	r3, #20
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d006      	beq.n	8010ed8 <etharp_find_entry+0x27c>
 8010eca:	4b1a      	ldr	r3, [pc, #104]	; (8010f34 <etharp_find_entry+0x2d8>)
 8010ecc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010ed0:	491d      	ldr	r1, [pc, #116]	; (8010f48 <etharp_find_entry+0x2ec>)
 8010ed2:	481a      	ldr	r0, [pc, #104]	; (8010f3c <etharp_find_entry+0x2e0>)
 8010ed4:	f002 f9e2 	bl	801329c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d00b      	beq.n	8010ef6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010ede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	6819      	ldr	r1, [r3, #0]
 8010ee6:	4812      	ldr	r0, [pc, #72]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010ee8:	4613      	mov	r3, r2
 8010eea:	005b      	lsls	r3, r3, #1
 8010eec:	4413      	add	r3, r2
 8010eee:	00db      	lsls	r3, r3, #3
 8010ef0:	4403      	add	r3, r0
 8010ef2:	3304      	adds	r3, #4
 8010ef4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010ef6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010efa:	490d      	ldr	r1, [pc, #52]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010efc:	4613      	mov	r3, r2
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	4413      	add	r3, r2
 8010f02:	00db      	lsls	r3, r3, #3
 8010f04:	440b      	add	r3, r1
 8010f06:	3312      	adds	r3, #18
 8010f08:	2200      	movs	r2, #0
 8010f0a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010f0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f10:	4907      	ldr	r1, [pc, #28]	; (8010f30 <etharp_find_entry+0x2d4>)
 8010f12:	4613      	mov	r3, r2
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	4413      	add	r3, r2
 8010f18:	00db      	lsls	r3, r3, #3
 8010f1a:	440b      	add	r3, r1
 8010f1c:	3308      	adds	r3, #8
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010f22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3728      	adds	r7, #40	; 0x28
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	24005064 	.word	0x24005064
 8010f34:	08016734 	.word	0x08016734
 8010f38:	0801676c 	.word	0x0801676c
 8010f3c:	080167ac 	.word	0x080167ac
 8010f40:	080167d4 	.word	0x080167d4
 8010f44:	080167ec 	.word	0x080167ec
 8010f48:	08016800 	.word	0x08016800

08010f4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b088      	sub	sp, #32
 8010f50:	af02      	add	r7, sp, #8
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
 8010f58:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f60:	2b06      	cmp	r3, #6
 8010f62:	d006      	beq.n	8010f72 <etharp_update_arp_entry+0x26>
 8010f64:	4b48      	ldr	r3, [pc, #288]	; (8011088 <etharp_update_arp_entry+0x13c>)
 8010f66:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010f6a:	4948      	ldr	r1, [pc, #288]	; (801108c <etharp_update_arp_entry+0x140>)
 8010f6c:	4848      	ldr	r0, [pc, #288]	; (8011090 <etharp_update_arp_entry+0x144>)
 8010f6e:	f002 f995 	bl	801329c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d012      	beq.n	8010f9e <etharp_update_arp_entry+0x52>
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00e      	beq.n	8010f9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68f9      	ldr	r1, [r7, #12]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f001 f8fe 	bl	8012188 <ip4_addr_isbroadcast_u32>
 8010f8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d105      	bne.n	8010f9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f9a:	2be0      	cmp	r3, #224	; 0xe0
 8010f9c:	d102      	bne.n	8010fa4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010f9e:	f06f 030f 	mvn.w	r3, #15
 8010fa2:	e06c      	b.n	801107e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010fa4:	78fb      	ldrb	r3, [r7, #3]
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	4619      	mov	r1, r3
 8010faa:	68b8      	ldr	r0, [r7, #8]
 8010fac:	f7ff fe56 	bl	8010c5c <etharp_find_entry>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010fb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	da02      	bge.n	8010fc2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010fbc:	8afb      	ldrh	r3, [r7, #22]
 8010fbe:	b25b      	sxtb	r3, r3
 8010fc0:	e05d      	b.n	801107e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010fc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fc6:	4933      	ldr	r1, [pc, #204]	; (8011094 <etharp_update_arp_entry+0x148>)
 8010fc8:	4613      	mov	r3, r2
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	4413      	add	r3, r2
 8010fce:	00db      	lsls	r3, r3, #3
 8010fd0:	440b      	add	r3, r1
 8010fd2:	3314      	adds	r3, #20
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010fd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fdc:	492d      	ldr	r1, [pc, #180]	; (8011094 <etharp_update_arp_entry+0x148>)
 8010fde:	4613      	mov	r3, r2
 8010fe0:	005b      	lsls	r3, r3, #1
 8010fe2:	4413      	add	r3, r2
 8010fe4:	00db      	lsls	r3, r3, #3
 8010fe6:	440b      	add	r3, r1
 8010fe8:	3308      	adds	r3, #8
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010fee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	4413      	add	r3, r2
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	3308      	adds	r3, #8
 8010ffc:	4a25      	ldr	r2, [pc, #148]	; (8011094 <etharp_update_arp_entry+0x148>)
 8010ffe:	4413      	add	r3, r2
 8011000:	3304      	adds	r3, #4
 8011002:	2206      	movs	r2, #6
 8011004:	6879      	ldr	r1, [r7, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	f002 f932 	bl	8013270 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801100c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011010:	4920      	ldr	r1, [pc, #128]	; (8011094 <etharp_update_arp_entry+0x148>)
 8011012:	4613      	mov	r3, r2
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	4413      	add	r3, r2
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	440b      	add	r3, r1
 801101c:	3312      	adds	r3, #18
 801101e:	2200      	movs	r2, #0
 8011020:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011022:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011026:	491b      	ldr	r1, [pc, #108]	; (8011094 <etharp_update_arp_entry+0x148>)
 8011028:	4613      	mov	r3, r2
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	440b      	add	r3, r1
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d021      	beq.n	801107c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011038:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801103c:	4915      	ldr	r1, [pc, #84]	; (8011094 <etharp_update_arp_entry+0x148>)
 801103e:	4613      	mov	r3, r2
 8011040:	005b      	lsls	r3, r3, #1
 8011042:	4413      	add	r3, r2
 8011044:	00db      	lsls	r3, r3, #3
 8011046:	440b      	add	r3, r1
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801104c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011050:	4910      	ldr	r1, [pc, #64]	; (8011094 <etharp_update_arp_entry+0x148>)
 8011052:	4613      	mov	r3, r2
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	4413      	add	r3, r2
 8011058:	00db      	lsls	r3, r3, #3
 801105a:	440b      	add	r3, r1
 801105c:	2200      	movs	r2, #0
 801105e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6939      	ldr	r1, [r7, #16]
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f001 ff91 	bl	8012f98 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011076:	6938      	ldr	r0, [r7, #16]
 8011078:	f7f9 fdf0 	bl	800ac5c <pbuf_free>
  }
  return ERR_OK;
 801107c:	2300      	movs	r3, #0
}
 801107e:	4618      	mov	r0, r3
 8011080:	3718      	adds	r7, #24
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	08016734 	.word	0x08016734
 801108c:	0801682c 	.word	0x0801682c
 8011090:	080167ac 	.word	0x080167ac
 8011094:	24005064 	.word	0x24005064

08011098 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110a0:	2300      	movs	r3, #0
 80110a2:	60fb      	str	r3, [r7, #12]
 80110a4:	e01e      	b.n	80110e4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80110a6:	4913      	ldr	r1, [pc, #76]	; (80110f4 <etharp_cleanup_netif+0x5c>)
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	4613      	mov	r3, r2
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	4413      	add	r3, r2
 80110b0:	00db      	lsls	r3, r3, #3
 80110b2:	440b      	add	r3, r1
 80110b4:	3314      	adds	r3, #20
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80110ba:	7afb      	ldrb	r3, [r7, #11]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d00e      	beq.n	80110de <etharp_cleanup_netif+0x46>
 80110c0:	490c      	ldr	r1, [pc, #48]	; (80110f4 <etharp_cleanup_netif+0x5c>)
 80110c2:	68fa      	ldr	r2, [r7, #12]
 80110c4:	4613      	mov	r3, r2
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	4413      	add	r3, r2
 80110ca:	00db      	lsls	r3, r3, #3
 80110cc:	440b      	add	r3, r1
 80110ce:	3308      	adds	r3, #8
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d102      	bne.n	80110de <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	f7ff fce5 	bl	8010aa8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3301      	adds	r3, #1
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2b09      	cmp	r3, #9
 80110e8:	dddd      	ble.n	80110a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80110ea:	bf00      	nop
 80110ec:	bf00      	nop
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	24005064 	.word	0x24005064

080110f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80110f8:	b5b0      	push	{r4, r5, r7, lr}
 80110fa:	b08a      	sub	sp, #40	; 0x28
 80110fc:	af04      	add	r7, sp, #16
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d107      	bne.n	8011118 <etharp_input+0x20>
 8011108:	4b3d      	ldr	r3, [pc, #244]	; (8011200 <etharp_input+0x108>)
 801110a:	f240 228a 	movw	r2, #650	; 0x28a
 801110e:	493d      	ldr	r1, [pc, #244]	; (8011204 <etharp_input+0x10c>)
 8011110:	483d      	ldr	r0, [pc, #244]	; (8011208 <etharp_input+0x110>)
 8011112:	f002 f8c3 	bl	801329c <iprintf>
 8011116:	e06f      	b.n	80111f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	b29b      	uxth	r3, r3
 8011124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011128:	d10c      	bne.n	8011144 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801112e:	2b06      	cmp	r3, #6
 8011130:	d108      	bne.n	8011144 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011136:	2b04      	cmp	r3, #4
 8011138:	d104      	bne.n	8011144 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	885b      	ldrh	r3, [r3, #2]
 801113e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011140:	2b08      	cmp	r3, #8
 8011142:	d003      	beq.n	801114c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f7f9 fd89 	bl	800ac5c <pbuf_free>
    return;
 801114a:	e055      	b.n	80111f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	330e      	adds	r3, #14
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	3318      	adds	r3, #24
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	3304      	adds	r3, #4
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d102      	bne.n	801116c <etharp_input+0x74>
    for_us = 0;
 8011166:	2300      	movs	r3, #0
 8011168:	75fb      	strb	r3, [r7, #23]
 801116a:	e009      	b.n	8011180 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801116c:	68ba      	ldr	r2, [r7, #8]
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	3304      	adds	r3, #4
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	429a      	cmp	r2, r3
 8011176:	bf0c      	ite	eq
 8011178:	2301      	moveq	r3, #1
 801117a:	2300      	movne	r3, #0
 801117c:	b2db      	uxtb	r3, r3
 801117e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	f103 0208 	add.w	r2, r3, #8
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d001      	beq.n	8011190 <etharp_input+0x98>
 801118c:	2301      	movs	r3, #1
 801118e:	e000      	b.n	8011192 <etharp_input+0x9a>
 8011190:	2302      	movs	r3, #2
 8011192:	f107 010c 	add.w	r1, r7, #12
 8011196:	6838      	ldr	r0, [r7, #0]
 8011198:	f7ff fed8 	bl	8010f4c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	88db      	ldrh	r3, [r3, #6]
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111a6:	d003      	beq.n	80111b0 <etharp_input+0xb8>
 80111a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111ac:	d01e      	beq.n	80111ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80111ae:	e020      	b.n	80111f2 <etharp_input+0xfa>
      if (for_us) {
 80111b0:	7dfb      	ldrb	r3, [r7, #23]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d01c      	beq.n	80111f0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80111cc:	693a      	ldr	r2, [r7, #16]
 80111ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 80111d0:	2102      	movs	r1, #2
 80111d2:	9103      	str	r1, [sp, #12]
 80111d4:	f107 010c 	add.w	r1, r7, #12
 80111d8:	9102      	str	r1, [sp, #8]
 80111da:	9201      	str	r2, [sp, #4]
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	462b      	mov	r3, r5
 80111e0:	4622      	mov	r2, r4
 80111e2:	4601      	mov	r1, r0
 80111e4:	6838      	ldr	r0, [r7, #0]
 80111e6:	f000 faeb 	bl	80117c0 <etharp_raw>
      break;
 80111ea:	e001      	b.n	80111f0 <etharp_input+0xf8>
      break;
 80111ec:	bf00      	nop
 80111ee:	e000      	b.n	80111f2 <etharp_input+0xfa>
      break;
 80111f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f7f9 fd32 	bl	800ac5c <pbuf_free>
}
 80111f8:	3718      	adds	r7, #24
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bdb0      	pop	{r4, r5, r7, pc}
 80111fe:	bf00      	nop
 8011200:	08016734 	.word	0x08016734
 8011204:	08016884 	.word	0x08016884
 8011208:	080167ac 	.word	0x080167ac

0801120c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b086      	sub	sp, #24
 8011210:	af02      	add	r7, sp, #8
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	4613      	mov	r3, r2
 8011218:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801121a:	79fa      	ldrb	r2, [r7, #7]
 801121c:	4944      	ldr	r1, [pc, #272]	; (8011330 <etharp_output_to_arp_index+0x124>)
 801121e:	4613      	mov	r3, r2
 8011220:	005b      	lsls	r3, r3, #1
 8011222:	4413      	add	r3, r2
 8011224:	00db      	lsls	r3, r3, #3
 8011226:	440b      	add	r3, r1
 8011228:	3314      	adds	r3, #20
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b01      	cmp	r3, #1
 801122e:	d806      	bhi.n	801123e <etharp_output_to_arp_index+0x32>
 8011230:	4b40      	ldr	r3, [pc, #256]	; (8011334 <etharp_output_to_arp_index+0x128>)
 8011232:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011236:	4940      	ldr	r1, [pc, #256]	; (8011338 <etharp_output_to_arp_index+0x12c>)
 8011238:	4840      	ldr	r0, [pc, #256]	; (801133c <etharp_output_to_arp_index+0x130>)
 801123a:	f002 f82f 	bl	801329c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801123e:	79fa      	ldrb	r2, [r7, #7]
 8011240:	493b      	ldr	r1, [pc, #236]	; (8011330 <etharp_output_to_arp_index+0x124>)
 8011242:	4613      	mov	r3, r2
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	4413      	add	r3, r2
 8011248:	00db      	lsls	r3, r3, #3
 801124a:	440b      	add	r3, r1
 801124c:	3314      	adds	r3, #20
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	2b02      	cmp	r3, #2
 8011252:	d153      	bne.n	80112fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011254:	79fa      	ldrb	r2, [r7, #7]
 8011256:	4936      	ldr	r1, [pc, #216]	; (8011330 <etharp_output_to_arp_index+0x124>)
 8011258:	4613      	mov	r3, r2
 801125a:	005b      	lsls	r3, r3, #1
 801125c:	4413      	add	r3, r2
 801125e:	00db      	lsls	r3, r3, #3
 8011260:	440b      	add	r3, r1
 8011262:	3312      	adds	r3, #18
 8011264:	881b      	ldrh	r3, [r3, #0]
 8011266:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801126a:	d919      	bls.n	80112a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801126c:	79fa      	ldrb	r2, [r7, #7]
 801126e:	4613      	mov	r3, r2
 8011270:	005b      	lsls	r3, r3, #1
 8011272:	4413      	add	r3, r2
 8011274:	00db      	lsls	r3, r3, #3
 8011276:	4a2e      	ldr	r2, [pc, #184]	; (8011330 <etharp_output_to_arp_index+0x124>)
 8011278:	4413      	add	r3, r2
 801127a:	3304      	adds	r3, #4
 801127c:	4619      	mov	r1, r3
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f000 fb4c 	bl	801191c <etharp_request>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d138      	bne.n	80112fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801128a:	79fa      	ldrb	r2, [r7, #7]
 801128c:	4928      	ldr	r1, [pc, #160]	; (8011330 <etharp_output_to_arp_index+0x124>)
 801128e:	4613      	mov	r3, r2
 8011290:	005b      	lsls	r3, r3, #1
 8011292:	4413      	add	r3, r2
 8011294:	00db      	lsls	r3, r3, #3
 8011296:	440b      	add	r3, r1
 8011298:	3314      	adds	r3, #20
 801129a:	2203      	movs	r2, #3
 801129c:	701a      	strb	r2, [r3, #0]
 801129e:	e02d      	b.n	80112fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80112a0:	79fa      	ldrb	r2, [r7, #7]
 80112a2:	4923      	ldr	r1, [pc, #140]	; (8011330 <etharp_output_to_arp_index+0x124>)
 80112a4:	4613      	mov	r3, r2
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	4413      	add	r3, r2
 80112aa:	00db      	lsls	r3, r3, #3
 80112ac:	440b      	add	r3, r1
 80112ae:	3312      	adds	r3, #18
 80112b0:	881b      	ldrh	r3, [r3, #0]
 80112b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80112b6:	d321      	bcc.n	80112fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80112b8:	79fa      	ldrb	r2, [r7, #7]
 80112ba:	4613      	mov	r3, r2
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	4413      	add	r3, r2
 80112c0:	00db      	lsls	r3, r3, #3
 80112c2:	4a1b      	ldr	r2, [pc, #108]	; (8011330 <etharp_output_to_arp_index+0x124>)
 80112c4:	4413      	add	r3, r2
 80112c6:	1d19      	adds	r1, r3, #4
 80112c8:	79fa      	ldrb	r2, [r7, #7]
 80112ca:	4613      	mov	r3, r2
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	4413      	add	r3, r2
 80112d0:	00db      	lsls	r3, r3, #3
 80112d2:	3308      	adds	r3, #8
 80112d4:	4a16      	ldr	r2, [pc, #88]	; (8011330 <etharp_output_to_arp_index+0x124>)
 80112d6:	4413      	add	r3, r2
 80112d8:	3304      	adds	r3, #4
 80112da:	461a      	mov	r2, r3
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f000 fafb 	bl	80118d8 <etharp_request_dst>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d109      	bne.n	80112fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80112e8:	79fa      	ldrb	r2, [r7, #7]
 80112ea:	4911      	ldr	r1, [pc, #68]	; (8011330 <etharp_output_to_arp_index+0x124>)
 80112ec:	4613      	mov	r3, r2
 80112ee:	005b      	lsls	r3, r3, #1
 80112f0:	4413      	add	r3, r2
 80112f2:	00db      	lsls	r3, r3, #3
 80112f4:	440b      	add	r3, r1
 80112f6:	3314      	adds	r3, #20
 80112f8:	2203      	movs	r2, #3
 80112fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011302:	79fa      	ldrb	r2, [r7, #7]
 8011304:	4613      	mov	r3, r2
 8011306:	005b      	lsls	r3, r3, #1
 8011308:	4413      	add	r3, r2
 801130a:	00db      	lsls	r3, r3, #3
 801130c:	3308      	adds	r3, #8
 801130e:	4a08      	ldr	r2, [pc, #32]	; (8011330 <etharp_output_to_arp_index+0x124>)
 8011310:	4413      	add	r3, r2
 8011312:	3304      	adds	r3, #4
 8011314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011318:	9200      	str	r2, [sp, #0]
 801131a:	460a      	mov	r2, r1
 801131c:	68b9      	ldr	r1, [r7, #8]
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f001 fe3a 	bl	8012f98 <ethernet_output>
 8011324:	4603      	mov	r3, r0
}
 8011326:	4618      	mov	r0, r3
 8011328:	3710      	adds	r7, #16
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	24005064 	.word	0x24005064
 8011334:	08016734 	.word	0x08016734
 8011338:	080168a4 	.word	0x080168a4
 801133c:	080167ac 	.word	0x080167ac

08011340 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b08a      	sub	sp, #40	; 0x28
 8011344:	af02      	add	r7, sp, #8
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d106      	bne.n	8011364 <etharp_output+0x24>
 8011356:	4b73      	ldr	r3, [pc, #460]	; (8011524 <etharp_output+0x1e4>)
 8011358:	f240 321e 	movw	r2, #798	; 0x31e
 801135c:	4972      	ldr	r1, [pc, #456]	; (8011528 <etharp_output+0x1e8>)
 801135e:	4873      	ldr	r0, [pc, #460]	; (801152c <etharp_output+0x1ec>)
 8011360:	f001 ff9c 	bl	801329c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d106      	bne.n	8011378 <etharp_output+0x38>
 801136a:	4b6e      	ldr	r3, [pc, #440]	; (8011524 <etharp_output+0x1e4>)
 801136c:	f240 321f 	movw	r2, #799	; 0x31f
 8011370:	496f      	ldr	r1, [pc, #444]	; (8011530 <etharp_output+0x1f0>)
 8011372:	486e      	ldr	r0, [pc, #440]	; (801152c <etharp_output+0x1ec>)
 8011374:	f001 ff92 	bl	801329c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d106      	bne.n	801138c <etharp_output+0x4c>
 801137e:	4b69      	ldr	r3, [pc, #420]	; (8011524 <etharp_output+0x1e4>)
 8011380:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011384:	496b      	ldr	r1, [pc, #428]	; (8011534 <etharp_output+0x1f4>)
 8011386:	4869      	ldr	r0, [pc, #420]	; (801152c <etharp_output+0x1ec>)
 8011388:	f001 ff88 	bl	801329c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	68f9      	ldr	r1, [r7, #12]
 8011392:	4618      	mov	r0, r3
 8011394:	f000 fef8 	bl	8012188 <ip4_addr_isbroadcast_u32>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d002      	beq.n	80113a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801139e:	4b66      	ldr	r3, [pc, #408]	; (8011538 <etharp_output+0x1f8>)
 80113a0:	61fb      	str	r3, [r7, #28]
 80113a2:	e0af      	b.n	8011504 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113ac:	2be0      	cmp	r3, #224	; 0xe0
 80113ae:	d118      	bne.n	80113e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80113b0:	2301      	movs	r3, #1
 80113b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80113b4:	2300      	movs	r3, #0
 80113b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80113b8:	235e      	movs	r3, #94	; 0x5e
 80113ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	3301      	adds	r3, #1
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	3302      	adds	r3, #2
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	3303      	adds	r3, #3
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80113da:	f107 0310 	add.w	r3, r7, #16
 80113de:	61fb      	str	r3, [r7, #28]
 80113e0:	e090      	b.n	8011504 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	3304      	adds	r3, #4
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	405a      	eors	r2, r3
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	3308      	adds	r3, #8
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	4013      	ands	r3, r2
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d012      	beq.n	8011420 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011400:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011404:	4293      	cmp	r3, r2
 8011406:	d00b      	beq.n	8011420 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	330c      	adds	r3, #12
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d003      	beq.n	801141a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	330c      	adds	r3, #12
 8011416:	61bb      	str	r3, [r7, #24]
 8011418:	e002      	b.n	8011420 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801141a:	f06f 0303 	mvn.w	r3, #3
 801141e:	e07d      	b.n	801151c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011420:	4b46      	ldr	r3, [pc, #280]	; (801153c <etharp_output+0x1fc>)
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	4619      	mov	r1, r3
 8011426:	4a46      	ldr	r2, [pc, #280]	; (8011540 <etharp_output+0x200>)
 8011428:	460b      	mov	r3, r1
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	440b      	add	r3, r1
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	4413      	add	r3, r2
 8011432:	3314      	adds	r3, #20
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	2b01      	cmp	r3, #1
 8011438:	d925      	bls.n	8011486 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801143a:	4b40      	ldr	r3, [pc, #256]	; (801153c <etharp_output+0x1fc>)
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	4619      	mov	r1, r3
 8011440:	4a3f      	ldr	r2, [pc, #252]	; (8011540 <etharp_output+0x200>)
 8011442:	460b      	mov	r3, r1
 8011444:	005b      	lsls	r3, r3, #1
 8011446:	440b      	add	r3, r1
 8011448:	00db      	lsls	r3, r3, #3
 801144a:	4413      	add	r3, r2
 801144c:	3308      	adds	r3, #8
 801144e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011450:	68fa      	ldr	r2, [r7, #12]
 8011452:	429a      	cmp	r2, r3
 8011454:	d117      	bne.n	8011486 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011456:	69bb      	ldr	r3, [r7, #24]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	4b38      	ldr	r3, [pc, #224]	; (801153c <etharp_output+0x1fc>)
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	4618      	mov	r0, r3
 8011460:	4937      	ldr	r1, [pc, #220]	; (8011540 <etharp_output+0x200>)
 8011462:	4603      	mov	r3, r0
 8011464:	005b      	lsls	r3, r3, #1
 8011466:	4403      	add	r3, r0
 8011468:	00db      	lsls	r3, r3, #3
 801146a:	440b      	add	r3, r1
 801146c:	3304      	adds	r3, #4
 801146e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011470:	429a      	cmp	r2, r3
 8011472:	d108      	bne.n	8011486 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011474:	4b31      	ldr	r3, [pc, #196]	; (801153c <etharp_output+0x1fc>)
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	461a      	mov	r2, r3
 801147a:	68b9      	ldr	r1, [r7, #8]
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f7ff fec5 	bl	801120c <etharp_output_to_arp_index>
 8011482:	4603      	mov	r3, r0
 8011484:	e04a      	b.n	801151c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011486:	2300      	movs	r3, #0
 8011488:	75fb      	strb	r3, [r7, #23]
 801148a:	e031      	b.n	80114f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801148c:	7dfa      	ldrb	r2, [r7, #23]
 801148e:	492c      	ldr	r1, [pc, #176]	; (8011540 <etharp_output+0x200>)
 8011490:	4613      	mov	r3, r2
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	4413      	add	r3, r2
 8011496:	00db      	lsls	r3, r3, #3
 8011498:	440b      	add	r3, r1
 801149a:	3314      	adds	r3, #20
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d923      	bls.n	80114ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80114a2:	7dfa      	ldrb	r2, [r7, #23]
 80114a4:	4926      	ldr	r1, [pc, #152]	; (8011540 <etharp_output+0x200>)
 80114a6:	4613      	mov	r3, r2
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	4413      	add	r3, r2
 80114ac:	00db      	lsls	r3, r3, #3
 80114ae:	440b      	add	r3, r1
 80114b0:	3308      	adds	r3, #8
 80114b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80114b4:	68fa      	ldr	r2, [r7, #12]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d117      	bne.n	80114ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	6819      	ldr	r1, [r3, #0]
 80114be:	7dfa      	ldrb	r2, [r7, #23]
 80114c0:	481f      	ldr	r0, [pc, #124]	; (8011540 <etharp_output+0x200>)
 80114c2:	4613      	mov	r3, r2
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	4413      	add	r3, r2
 80114c8:	00db      	lsls	r3, r3, #3
 80114ca:	4403      	add	r3, r0
 80114cc:	3304      	adds	r3, #4
 80114ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80114d0:	4299      	cmp	r1, r3
 80114d2:	d10a      	bne.n	80114ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80114d4:	4a19      	ldr	r2, [pc, #100]	; (801153c <etharp_output+0x1fc>)
 80114d6:	7dfb      	ldrb	r3, [r7, #23]
 80114d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80114da:	7dfb      	ldrb	r3, [r7, #23]
 80114dc:	461a      	mov	r2, r3
 80114de:	68b9      	ldr	r1, [r7, #8]
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f7ff fe93 	bl	801120c <etharp_output_to_arp_index>
 80114e6:	4603      	mov	r3, r0
 80114e8:	e018      	b.n	801151c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80114ea:	7dfb      	ldrb	r3, [r7, #23]
 80114ec:	3301      	adds	r3, #1
 80114ee:	75fb      	strb	r3, [r7, #23]
 80114f0:	7dfb      	ldrb	r3, [r7, #23]
 80114f2:	2b09      	cmp	r3, #9
 80114f4:	d9ca      	bls.n	801148c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80114f6:	68ba      	ldr	r2, [r7, #8]
 80114f8:	69b9      	ldr	r1, [r7, #24]
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f000 f822 	bl	8011544 <etharp_query>
 8011500:	4603      	mov	r3, r0
 8011502:	e00b      	b.n	801151c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801150a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	68b9      	ldr	r1, [r7, #8]
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f001 fd3f 	bl	8012f98 <ethernet_output>
 801151a:	4603      	mov	r3, r0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3720      	adds	r7, #32
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	08016734 	.word	0x08016734
 8011528:	08016884 	.word	0x08016884
 801152c:	080167ac 	.word	0x080167ac
 8011530:	080168d4 	.word	0x080168d4
 8011534:	08016874 	.word	0x08016874
 8011538:	08016f4c 	.word	0x08016f4c
 801153c:	24005154 	.word	0x24005154
 8011540:	24005064 	.word	0x24005064

08011544 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b08c      	sub	sp, #48	; 0x30
 8011548:	af02      	add	r7, sp, #8
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	3326      	adds	r3, #38	; 0x26
 8011554:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011556:	23ff      	movs	r3, #255	; 0xff
 8011558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801155c:	2300      	movs	r3, #0
 801155e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	68f9      	ldr	r1, [r7, #12]
 8011566:	4618      	mov	r0, r3
 8011568:	f000 fe0e 	bl	8012188 <ip4_addr_isbroadcast_u32>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d10c      	bne.n	801158c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801157a:	2be0      	cmp	r3, #224	; 0xe0
 801157c:	d006      	beq.n	801158c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d003      	beq.n	801158c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d102      	bne.n	8011592 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801158c:	f06f 030f 	mvn.w	r3, #15
 8011590:	e101      	b.n	8011796 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011592:	68fa      	ldr	r2, [r7, #12]
 8011594:	2101      	movs	r1, #1
 8011596:	68b8      	ldr	r0, [r7, #8]
 8011598:	f7ff fb60 	bl	8010c5c <etharp_find_entry>
 801159c:	4603      	mov	r3, r0
 801159e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80115a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	da02      	bge.n	80115ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80115a8:	8a7b      	ldrh	r3, [r7, #18]
 80115aa:	b25b      	sxtb	r3, r3
 80115ac:	e0f3      	b.n	8011796 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80115ae:	8a7b      	ldrh	r3, [r7, #18]
 80115b0:	2b7e      	cmp	r3, #126	; 0x7e
 80115b2:	d906      	bls.n	80115c2 <etharp_query+0x7e>
 80115b4:	4b7a      	ldr	r3, [pc, #488]	; (80117a0 <etharp_query+0x25c>)
 80115b6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80115ba:	497a      	ldr	r1, [pc, #488]	; (80117a4 <etharp_query+0x260>)
 80115bc:	487a      	ldr	r0, [pc, #488]	; (80117a8 <etharp_query+0x264>)
 80115be:	f001 fe6d 	bl	801329c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80115c2:	8a7b      	ldrh	r3, [r7, #18]
 80115c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80115c6:	7c7a      	ldrb	r2, [r7, #17]
 80115c8:	4978      	ldr	r1, [pc, #480]	; (80117ac <etharp_query+0x268>)
 80115ca:	4613      	mov	r3, r2
 80115cc:	005b      	lsls	r3, r3, #1
 80115ce:	4413      	add	r3, r2
 80115d0:	00db      	lsls	r3, r3, #3
 80115d2:	440b      	add	r3, r1
 80115d4:	3314      	adds	r3, #20
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d115      	bne.n	8011608 <etharp_query+0xc4>
    is_new_entry = 1;
 80115dc:	2301      	movs	r3, #1
 80115de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80115e0:	7c7a      	ldrb	r2, [r7, #17]
 80115e2:	4972      	ldr	r1, [pc, #456]	; (80117ac <etharp_query+0x268>)
 80115e4:	4613      	mov	r3, r2
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	4413      	add	r3, r2
 80115ea:	00db      	lsls	r3, r3, #3
 80115ec:	440b      	add	r3, r1
 80115ee:	3314      	adds	r3, #20
 80115f0:	2201      	movs	r2, #1
 80115f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80115f4:	7c7a      	ldrb	r2, [r7, #17]
 80115f6:	496d      	ldr	r1, [pc, #436]	; (80117ac <etharp_query+0x268>)
 80115f8:	4613      	mov	r3, r2
 80115fa:	005b      	lsls	r3, r3, #1
 80115fc:	4413      	add	r3, r2
 80115fe:	00db      	lsls	r3, r3, #3
 8011600:	440b      	add	r3, r1
 8011602:	3308      	adds	r3, #8
 8011604:	68fa      	ldr	r2, [r7, #12]
 8011606:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011608:	7c7a      	ldrb	r2, [r7, #17]
 801160a:	4968      	ldr	r1, [pc, #416]	; (80117ac <etharp_query+0x268>)
 801160c:	4613      	mov	r3, r2
 801160e:	005b      	lsls	r3, r3, #1
 8011610:	4413      	add	r3, r2
 8011612:	00db      	lsls	r3, r3, #3
 8011614:	440b      	add	r3, r1
 8011616:	3314      	adds	r3, #20
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d011      	beq.n	8011642 <etharp_query+0xfe>
 801161e:	7c7a      	ldrb	r2, [r7, #17]
 8011620:	4962      	ldr	r1, [pc, #392]	; (80117ac <etharp_query+0x268>)
 8011622:	4613      	mov	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	4413      	add	r3, r2
 8011628:	00db      	lsls	r3, r3, #3
 801162a:	440b      	add	r3, r1
 801162c:	3314      	adds	r3, #20
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d806      	bhi.n	8011642 <etharp_query+0xfe>
 8011634:	4b5a      	ldr	r3, [pc, #360]	; (80117a0 <etharp_query+0x25c>)
 8011636:	f240 32cd 	movw	r2, #973	; 0x3cd
 801163a:	495d      	ldr	r1, [pc, #372]	; (80117b0 <etharp_query+0x26c>)
 801163c:	485a      	ldr	r0, [pc, #360]	; (80117a8 <etharp_query+0x264>)
 801163e:	f001 fe2d 	bl	801329c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011642:	6a3b      	ldr	r3, [r7, #32]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d102      	bne.n	801164e <etharp_query+0x10a>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d10c      	bne.n	8011668 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801164e:	68b9      	ldr	r1, [r7, #8]
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f000 f963 	bl	801191c <etharp_request>
 8011656:	4603      	mov	r3, r0
 8011658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d102      	bne.n	8011668 <etharp_query+0x124>
      return result;
 8011662:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011666:	e096      	b.n	8011796 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <etharp_query+0x138>
 801166e:	4b4c      	ldr	r3, [pc, #304]	; (80117a0 <etharp_query+0x25c>)
 8011670:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011674:	494f      	ldr	r1, [pc, #316]	; (80117b4 <etharp_query+0x270>)
 8011676:	484c      	ldr	r0, [pc, #304]	; (80117a8 <etharp_query+0x264>)
 8011678:	f001 fe10 	bl	801329c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801167c:	7c7a      	ldrb	r2, [r7, #17]
 801167e:	494b      	ldr	r1, [pc, #300]	; (80117ac <etharp_query+0x268>)
 8011680:	4613      	mov	r3, r2
 8011682:	005b      	lsls	r3, r3, #1
 8011684:	4413      	add	r3, r2
 8011686:	00db      	lsls	r3, r3, #3
 8011688:	440b      	add	r3, r1
 801168a:	3314      	adds	r3, #20
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d917      	bls.n	80116c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011692:	4a49      	ldr	r2, [pc, #292]	; (80117b8 <etharp_query+0x274>)
 8011694:	7c7b      	ldrb	r3, [r7, #17]
 8011696:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011698:	7c7a      	ldrb	r2, [r7, #17]
 801169a:	4613      	mov	r3, r2
 801169c:	005b      	lsls	r3, r3, #1
 801169e:	4413      	add	r3, r2
 80116a0:	00db      	lsls	r3, r3, #3
 80116a2:	3308      	adds	r3, #8
 80116a4:	4a41      	ldr	r2, [pc, #260]	; (80117ac <etharp_query+0x268>)
 80116a6:	4413      	add	r3, r2
 80116a8:	3304      	adds	r3, #4
 80116aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116ae:	9200      	str	r2, [sp, #0]
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	6879      	ldr	r1, [r7, #4]
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f001 fc6f 	bl	8012f98 <ethernet_output>
 80116ba:	4603      	mov	r3, r0
 80116bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116c0:	e067      	b.n	8011792 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80116c2:	7c7a      	ldrb	r2, [r7, #17]
 80116c4:	4939      	ldr	r1, [pc, #228]	; (80117ac <etharp_query+0x268>)
 80116c6:	4613      	mov	r3, r2
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	4413      	add	r3, r2
 80116cc:	00db      	lsls	r3, r3, #3
 80116ce:	440b      	add	r3, r1
 80116d0:	3314      	adds	r3, #20
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d15c      	bne.n	8011792 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80116d8:	2300      	movs	r3, #0
 80116da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80116e0:	e01c      	b.n	801171c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	895a      	ldrh	r2, [r3, #10]
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	891b      	ldrh	r3, [r3, #8]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d10a      	bne.n	8011704 <etharp_query+0x1c0>
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d006      	beq.n	8011704 <etharp_query+0x1c0>
 80116f6:	4b2a      	ldr	r3, [pc, #168]	; (80117a0 <etharp_query+0x25c>)
 80116f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80116fc:	492f      	ldr	r1, [pc, #188]	; (80117bc <etharp_query+0x278>)
 80116fe:	482a      	ldr	r0, [pc, #168]	; (80117a8 <etharp_query+0x264>)
 8011700:	f001 fdcc 	bl	801329c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	7b1b      	ldrb	r3, [r3, #12]
 8011708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801170c:	2b00      	cmp	r3, #0
 801170e:	d002      	beq.n	8011716 <etharp_query+0x1d2>
        copy_needed = 1;
 8011710:	2301      	movs	r3, #1
 8011712:	61bb      	str	r3, [r7, #24]
        break;
 8011714:	e005      	b.n	8011722 <etharp_query+0x1de>
      }
      p = p->next;
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d1df      	bne.n	80116e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d007      	beq.n	8011738 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801172e:	200e      	movs	r0, #14
 8011730:	f7f9 fcfc 	bl	800b12c <pbuf_clone>
 8011734:	61f8      	str	r0, [r7, #28]
 8011736:	e004      	b.n	8011742 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801173c:	69f8      	ldr	r0, [r7, #28]
 801173e:	f7f9 fb33 	bl	800ada8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d021      	beq.n	801178c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011748:	7c7a      	ldrb	r2, [r7, #17]
 801174a:	4918      	ldr	r1, [pc, #96]	; (80117ac <etharp_query+0x268>)
 801174c:	4613      	mov	r3, r2
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	4413      	add	r3, r2
 8011752:	00db      	lsls	r3, r3, #3
 8011754:	440b      	add	r3, r1
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801175c:	7c7a      	ldrb	r2, [r7, #17]
 801175e:	4913      	ldr	r1, [pc, #76]	; (80117ac <etharp_query+0x268>)
 8011760:	4613      	mov	r3, r2
 8011762:	005b      	lsls	r3, r3, #1
 8011764:	4413      	add	r3, r2
 8011766:	00db      	lsls	r3, r3, #3
 8011768:	440b      	add	r3, r1
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	4618      	mov	r0, r3
 801176e:	f7f9 fa75 	bl	800ac5c <pbuf_free>
      }
      arp_table[i].q = p;
 8011772:	7c7a      	ldrb	r2, [r7, #17]
 8011774:	490d      	ldr	r1, [pc, #52]	; (80117ac <etharp_query+0x268>)
 8011776:	4613      	mov	r3, r2
 8011778:	005b      	lsls	r3, r3, #1
 801177a:	4413      	add	r3, r2
 801177c:	00db      	lsls	r3, r3, #3
 801177e:	440b      	add	r3, r1
 8011780:	69fa      	ldr	r2, [r7, #28]
 8011782:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801178a:	e002      	b.n	8011792 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801178c:	23ff      	movs	r3, #255	; 0xff
 801178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011796:	4618      	mov	r0, r3
 8011798:	3728      	adds	r7, #40	; 0x28
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	08016734 	.word	0x08016734
 80117a4:	080168e0 	.word	0x080168e0
 80117a8:	080167ac 	.word	0x080167ac
 80117ac:	24005064 	.word	0x24005064
 80117b0:	080168f0 	.word	0x080168f0
 80117b4:	080168d4 	.word	0x080168d4
 80117b8:	24005154 	.word	0x24005154
 80117bc:	08016918 	.word	0x08016918

080117c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b08a      	sub	sp, #40	; 0x28
 80117c4:	af02      	add	r7, sp, #8
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	607a      	str	r2, [r7, #4]
 80117cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80117ce:	2300      	movs	r3, #0
 80117d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d106      	bne.n	80117e6 <etharp_raw+0x26>
 80117d8:	4b3a      	ldr	r3, [pc, #232]	; (80118c4 <etharp_raw+0x104>)
 80117da:	f240 4257 	movw	r2, #1111	; 0x457
 80117de:	493a      	ldr	r1, [pc, #232]	; (80118c8 <etharp_raw+0x108>)
 80117e0:	483a      	ldr	r0, [pc, #232]	; (80118cc <etharp_raw+0x10c>)
 80117e2:	f001 fd5b 	bl	801329c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80117e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117ea:	211c      	movs	r1, #28
 80117ec:	200e      	movs	r0, #14
 80117ee:	f7f8 ff51 	bl	800a694 <pbuf_alloc>
 80117f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80117f4:	69bb      	ldr	r3, [r7, #24]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d102      	bne.n	8011800 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80117fa:	f04f 33ff 	mov.w	r3, #4294967295
 80117fe:	e05d      	b.n	80118bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011800:	69bb      	ldr	r3, [r7, #24]
 8011802:	895b      	ldrh	r3, [r3, #10]
 8011804:	2b1b      	cmp	r3, #27
 8011806:	d806      	bhi.n	8011816 <etharp_raw+0x56>
 8011808:	4b2e      	ldr	r3, [pc, #184]	; (80118c4 <etharp_raw+0x104>)
 801180a:	f240 4262 	movw	r2, #1122	; 0x462
 801180e:	4930      	ldr	r1, [pc, #192]	; (80118d0 <etharp_raw+0x110>)
 8011810:	482e      	ldr	r0, [pc, #184]	; (80118cc <etharp_raw+0x10c>)
 8011812:	f001 fd43 	bl	801329c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011816:	69bb      	ldr	r3, [r7, #24]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801181c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801181e:	4618      	mov	r0, r3
 8011820:	f7f7 fe2e 	bl	8009480 <lwip_htons>
 8011824:	4603      	mov	r3, r0
 8011826:	461a      	mov	r2, r3
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011832:	2b06      	cmp	r3, #6
 8011834:	d006      	beq.n	8011844 <etharp_raw+0x84>
 8011836:	4b23      	ldr	r3, [pc, #140]	; (80118c4 <etharp_raw+0x104>)
 8011838:	f240 4269 	movw	r2, #1129	; 0x469
 801183c:	4925      	ldr	r1, [pc, #148]	; (80118d4 <etharp_raw+0x114>)
 801183e:	4823      	ldr	r0, [pc, #140]	; (80118cc <etharp_raw+0x10c>)
 8011840:	f001 fd2c 	bl	801329c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	3308      	adds	r3, #8
 8011848:	2206      	movs	r2, #6
 801184a:	6839      	ldr	r1, [r7, #0]
 801184c:	4618      	mov	r0, r3
 801184e:	f001 fd0f 	bl	8013270 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	3312      	adds	r3, #18
 8011856:	2206      	movs	r2, #6
 8011858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801185a:	4618      	mov	r0, r3
 801185c:	f001 fd08 	bl	8013270 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	330e      	adds	r3, #14
 8011864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011866:	6812      	ldr	r2, [r2, #0]
 8011868:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	3318      	adds	r3, #24
 801186e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011870:	6812      	ldr	r2, [r2, #0]
 8011872:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	2200      	movs	r2, #0
 8011878:	701a      	strb	r2, [r3, #0]
 801187a:	2200      	movs	r2, #0
 801187c:	f042 0201 	orr.w	r2, r2, #1
 8011880:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	2200      	movs	r2, #0
 8011886:	f042 0208 	orr.w	r2, r2, #8
 801188a:	709a      	strb	r2, [r3, #2]
 801188c:	2200      	movs	r2, #0
 801188e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	2206      	movs	r2, #6
 8011894:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	2204      	movs	r2, #4
 801189a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801189c:	f640 0306 	movw	r3, #2054	; 0x806
 80118a0:	9300      	str	r3, [sp, #0]
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	69b9      	ldr	r1, [r7, #24]
 80118a8:	68f8      	ldr	r0, [r7, #12]
 80118aa:	f001 fb75 	bl	8012f98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80118ae:	69b8      	ldr	r0, [r7, #24]
 80118b0:	f7f9 f9d4 	bl	800ac5c <pbuf_free>
  p = NULL;
 80118b4:	2300      	movs	r3, #0
 80118b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80118b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80118bc:	4618      	mov	r0, r3
 80118be:	3720      	adds	r7, #32
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}
 80118c4:	08016734 	.word	0x08016734
 80118c8:	08016884 	.word	0x08016884
 80118cc:	080167ac 	.word	0x080167ac
 80118d0:	08016934 	.word	0x08016934
 80118d4:	08016968 	.word	0x08016968

080118d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b088      	sub	sp, #32
 80118dc:	af04      	add	r7, sp, #16
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118f4:	2201      	movs	r2, #1
 80118f6:	9203      	str	r2, [sp, #12]
 80118f8:	68ba      	ldr	r2, [r7, #8]
 80118fa:	9202      	str	r2, [sp, #8]
 80118fc:	4a06      	ldr	r2, [pc, #24]	; (8011918 <etharp_request_dst+0x40>)
 80118fe:	9201      	str	r2, [sp, #4]
 8011900:	9300      	str	r3, [sp, #0]
 8011902:	4603      	mov	r3, r0
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f7ff ff5a 	bl	80117c0 <etharp_raw>
 801190c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801190e:	4618      	mov	r0, r3
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop
 8011918:	08016f54 	.word	0x08016f54

0801191c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011926:	4a05      	ldr	r2, [pc, #20]	; (801193c <etharp_request+0x20>)
 8011928:	6839      	ldr	r1, [r7, #0]
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7ff ffd4 	bl	80118d8 <etharp_request_dst>
 8011930:	4603      	mov	r3, r0
}
 8011932:	4618      	mov	r0, r3
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	08016f4c 	.word	0x08016f4c

08011940 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b08e      	sub	sp, #56	; 0x38
 8011944:	af04      	add	r7, sp, #16
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801194a:	4b79      	ldr	r3, [pc, #484]	; (8011b30 <icmp_input+0x1f0>)
 801194c:	689b      	ldr	r3, [r3, #8]
 801194e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	f003 030f 	and.w	r3, r3, #15
 8011958:	b2db      	uxtb	r3, r3
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	b2db      	uxtb	r3, r3
 801195e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011962:	2b13      	cmp	r3, #19
 8011964:	f240 80cd 	bls.w	8011b02 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	895b      	ldrh	r3, [r3, #10]
 801196c:	2b03      	cmp	r3, #3
 801196e:	f240 80ca 	bls.w	8011b06 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801197c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011980:	2b00      	cmp	r3, #0
 8011982:	f000 80b7 	beq.w	8011af4 <icmp_input+0x1b4>
 8011986:	2b08      	cmp	r3, #8
 8011988:	f040 80b7 	bne.w	8011afa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801198c:	4b69      	ldr	r3, [pc, #420]	; (8011b34 <icmp_input+0x1f4>)
 801198e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011990:	4b67      	ldr	r3, [pc, #412]	; (8011b30 <icmp_input+0x1f0>)
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011998:	2be0      	cmp	r3, #224	; 0xe0
 801199a:	f000 80bb 	beq.w	8011b14 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801199e:	4b64      	ldr	r3, [pc, #400]	; (8011b30 <icmp_input+0x1f0>)
 80119a0:	695b      	ldr	r3, [r3, #20]
 80119a2:	4a63      	ldr	r2, [pc, #396]	; (8011b30 <icmp_input+0x1f0>)
 80119a4:	6812      	ldr	r2, [r2, #0]
 80119a6:	4611      	mov	r1, r2
 80119a8:	4618      	mov	r0, r3
 80119aa:	f000 fbed 	bl	8012188 <ip4_addr_isbroadcast_u32>
 80119ae:	4603      	mov	r3, r0
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f040 80b1 	bne.w	8011b18 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	891b      	ldrh	r3, [r3, #8]
 80119ba:	2b07      	cmp	r3, #7
 80119bc:	f240 80a5 	bls.w	8011b0a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80119c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119c2:	330e      	adds	r3, #14
 80119c4:	4619      	mov	r1, r3
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f7f9 f8b2 	bl	800ab30 <pbuf_add_header>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d04b      	beq.n	8011a6a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	891a      	ldrh	r2, [r3, #8]
 80119d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119d8:	4413      	add	r3, r2
 80119da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	891b      	ldrh	r3, [r3, #8]
 80119e0:	8b7a      	ldrh	r2, [r7, #26]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	f0c0 809a 	bcc.w	8011b1c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80119e8:	8b7b      	ldrh	r3, [r7, #26]
 80119ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119ee:	4619      	mov	r1, r3
 80119f0:	200e      	movs	r0, #14
 80119f2:	f7f8 fe4f 	bl	800a694 <pbuf_alloc>
 80119f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f000 8090 	beq.w	8011b20 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	895b      	ldrh	r3, [r3, #10]
 8011a04:	461a      	mov	r2, r3
 8011a06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a08:	3308      	adds	r3, #8
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d203      	bcs.n	8011a16 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011a0e:	6978      	ldr	r0, [r7, #20]
 8011a10:	f7f9 f924 	bl	800ac5c <pbuf_free>
          goto icmperr;
 8011a14:	e085      	b.n	8011b22 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f001 fc26 	bl	8013270 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011a24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a26:	4619      	mov	r1, r3
 8011a28:	6978      	ldr	r0, [r7, #20]
 8011a2a:	f7f9 f891 	bl	800ab50 <pbuf_remove_header>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d009      	beq.n	8011a48 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011a34:	4b40      	ldr	r3, [pc, #256]	; (8011b38 <icmp_input+0x1f8>)
 8011a36:	22b6      	movs	r2, #182	; 0xb6
 8011a38:	4940      	ldr	r1, [pc, #256]	; (8011b3c <icmp_input+0x1fc>)
 8011a3a:	4841      	ldr	r0, [pc, #260]	; (8011b40 <icmp_input+0x200>)
 8011a3c:	f001 fc2e 	bl	801329c <iprintf>
          pbuf_free(r);
 8011a40:	6978      	ldr	r0, [r7, #20]
 8011a42:	f7f9 f90b 	bl	800ac5c <pbuf_free>
          goto icmperr;
 8011a46:	e06c      	b.n	8011b22 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011a48:	6879      	ldr	r1, [r7, #4]
 8011a4a:	6978      	ldr	r0, [r7, #20]
 8011a4c:	f7f9 fa2a 	bl	800aea4 <pbuf_copy>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d003      	beq.n	8011a5e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011a56:	6978      	ldr	r0, [r7, #20]
 8011a58:	f7f9 f900 	bl	800ac5c <pbuf_free>
          goto icmperr;
 8011a5c:	e061      	b.n	8011b22 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f7f9 f8fc 	bl	800ac5c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	607b      	str	r3, [r7, #4]
 8011a68:	e00f      	b.n	8011a8a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011a6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a6c:	330e      	adds	r3, #14
 8011a6e:	4619      	mov	r1, r3
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7f9 f86d 	bl	800ab50 <pbuf_remove_header>
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d006      	beq.n	8011a8a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011a7c:	4b2e      	ldr	r3, [pc, #184]	; (8011b38 <icmp_input+0x1f8>)
 8011a7e:	22c7      	movs	r2, #199	; 0xc7
 8011a80:	4930      	ldr	r1, [pc, #192]	; (8011b44 <icmp_input+0x204>)
 8011a82:	482f      	ldr	r0, [pc, #188]	; (8011b40 <icmp_input+0x200>)
 8011a84:	f001 fc0a 	bl	801329c <iprintf>
          goto icmperr;
 8011a88:	e04b      	b.n	8011b22 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a92:	4619      	mov	r1, r3
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7f9 f84b 	bl	800ab30 <pbuf_add_header>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d12b      	bne.n	8011af8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	685b      	ldr	r3, [r3, #4]
 8011aa4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011aae:	4b20      	ldr	r3, [pc, #128]	; (8011b30 <icmp_input+0x1f0>)
 8011ab0:	691a      	ldr	r2, [r3, #16]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	709a      	strb	r2, [r3, #2]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	22ff      	movs	r2, #255	; 0xff
 8011aca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	729a      	strb	r2, [r3, #10]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	9302      	str	r3, [sp, #8]
 8011ada:	2301      	movs	r3, #1
 8011adc:	9301      	str	r3, [sp, #4]
 8011ade:	2300      	movs	r3, #0
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	23ff      	movs	r3, #255	; 0xff
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	69f9      	ldr	r1, [r7, #28]
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 fa75 	bl	8011fd8 <ip4_output_if>
 8011aee:	4603      	mov	r3, r0
 8011af0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011af2:	e001      	b.n	8011af8 <icmp_input+0x1b8>
      break;
 8011af4:	bf00      	nop
 8011af6:	e000      	b.n	8011afa <icmp_input+0x1ba>
      break;
 8011af8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f7f9 f8ae 	bl	800ac5c <pbuf_free>
  return;
 8011b00:	e013      	b.n	8011b2a <icmp_input+0x1ea>
    goto lenerr;
 8011b02:	bf00      	nop
 8011b04:	e002      	b.n	8011b0c <icmp_input+0x1cc>
    goto lenerr;
 8011b06:	bf00      	nop
 8011b08:	e000      	b.n	8011b0c <icmp_input+0x1cc>
        goto lenerr;
 8011b0a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7f9 f8a5 	bl	800ac5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011b12:	e00a      	b.n	8011b2a <icmp_input+0x1ea>
        goto icmperr;
 8011b14:	bf00      	nop
 8011b16:	e004      	b.n	8011b22 <icmp_input+0x1e2>
        goto icmperr;
 8011b18:	bf00      	nop
 8011b1a:	e002      	b.n	8011b22 <icmp_input+0x1e2>
          goto icmperr;
 8011b1c:	bf00      	nop
 8011b1e:	e000      	b.n	8011b22 <icmp_input+0x1e2>
          goto icmperr;
 8011b20:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7f9 f89a 	bl	800ac5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011b28:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011b2a:	3728      	adds	r7, #40	; 0x28
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	24005418 	.word	0x24005418
 8011b34:	2400542c 	.word	0x2400542c
 8011b38:	080169ac 	.word	0x080169ac
 8011b3c:	080169e4 	.word	0x080169e4
 8011b40:	08016a1c 	.word	0x08016a1c
 8011b44:	08016a44 	.word	0x08016a44

08011b48 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	460b      	mov	r3, r1
 8011b52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011b54:	78fb      	ldrb	r3, [r7, #3]
 8011b56:	461a      	mov	r2, r3
 8011b58:	2103      	movs	r1, #3
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 f814 	bl	8011b88 <icmp_send_response>
}
 8011b60:	bf00      	nop
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011b74:	78fb      	ldrb	r3, [r7, #3]
 8011b76:	461a      	mov	r2, r3
 8011b78:	210b      	movs	r1, #11
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 f804 	bl	8011b88 <icmp_send_response>
}
 8011b80:	bf00      	nop
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b08c      	sub	sp, #48	; 0x30
 8011b8c:	af04      	add	r7, sp, #16
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	460b      	mov	r3, r1
 8011b92:	70fb      	strb	r3, [r7, #3]
 8011b94:	4613      	mov	r3, r2
 8011b96:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011b98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b9c:	2124      	movs	r1, #36	; 0x24
 8011b9e:	2022      	movs	r0, #34	; 0x22
 8011ba0:	f7f8 fd78 	bl	800a694 <pbuf_alloc>
 8011ba4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d04c      	beq.n	8011c46 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	895b      	ldrh	r3, [r3, #10]
 8011bb0:	2b23      	cmp	r3, #35	; 0x23
 8011bb2:	d806      	bhi.n	8011bc2 <icmp_send_response+0x3a>
 8011bb4:	4b26      	ldr	r3, [pc, #152]	; (8011c50 <icmp_send_response+0xc8>)
 8011bb6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011bba:	4926      	ldr	r1, [pc, #152]	; (8011c54 <icmp_send_response+0xcc>)
 8011bbc:	4826      	ldr	r0, [pc, #152]	; (8011c58 <icmp_send_response+0xd0>)
 8011bbe:	f001 fb6d 	bl	801329c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	78fa      	ldrb	r2, [r7, #3]
 8011bd2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	78ba      	ldrb	r2, [r7, #2]
 8011bd8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	711a      	strb	r2, [r3, #4]
 8011be0:	2200      	movs	r2, #0
 8011be2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	2200      	movs	r2, #0
 8011be8:	719a      	strb	r2, [r3, #6]
 8011bea:	2200      	movs	r2, #0
 8011bec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011bee:	69fb      	ldr	r3, [r7, #28]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	f103 0008 	add.w	r0, r3, #8
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	221c      	movs	r2, #28
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	f001 fb37 	bl	8013270 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011c08:	f107 030c 	add.w	r3, r7, #12
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 f825 	bl	8011c5c <ip4_route>
 8011c12:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d011      	beq.n	8011c3e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	709a      	strb	r2, [r3, #2]
 8011c20:	2200      	movs	r2, #0
 8011c22:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011c24:	f107 020c 	add.w	r2, r7, #12
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	9302      	str	r3, [sp, #8]
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	9301      	str	r3, [sp, #4]
 8011c30:	2300      	movs	r3, #0
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	23ff      	movs	r3, #255	; 0xff
 8011c36:	2100      	movs	r1, #0
 8011c38:	69f8      	ldr	r0, [r7, #28]
 8011c3a:	f000 f9cd 	bl	8011fd8 <ip4_output_if>
  }
  pbuf_free(q);
 8011c3e:	69f8      	ldr	r0, [r7, #28]
 8011c40:	f7f9 f80c 	bl	800ac5c <pbuf_free>
 8011c44:	e000      	b.n	8011c48 <icmp_send_response+0xc0>
    return;
 8011c46:	bf00      	nop
}
 8011c48:	3720      	adds	r7, #32
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	080169ac 	.word	0x080169ac
 8011c54:	08016a78 	.word	0x08016a78
 8011c58:	08016a1c 	.word	0x08016a1c

08011c5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b085      	sub	sp, #20
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011c64:	4b33      	ldr	r3, [pc, #204]	; (8011d34 <ip4_route+0xd8>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	60fb      	str	r3, [r7, #12]
 8011c6a:	e036      	b.n	8011cda <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d02b      	beq.n	8011cd4 <ip4_route+0x78>
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c82:	089b      	lsrs	r3, r3, #2
 8011c84:	f003 0301 	and.w	r3, r3, #1
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d022      	beq.n	8011cd4 <ip4_route+0x78>
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	3304      	adds	r3, #4
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d01d      	beq.n	8011cd4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	3304      	adds	r3, #4
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	405a      	eors	r2, r3
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	3308      	adds	r3, #8
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4013      	ands	r3, r2
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	e038      	b.n	8011d26 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cba:	f003 0302 	and.w	r3, r3, #2
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d108      	bne.n	8011cd4 <ip4_route+0x78>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	330c      	adds	r3, #12
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d101      	bne.n	8011cd4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	e028      	b.n	8011d26 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d1c5      	bne.n	8011c6c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ce0:	4b15      	ldr	r3, [pc, #84]	; (8011d38 <ip4_route+0xdc>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d01a      	beq.n	8011d1e <ip4_route+0xc2>
 8011ce8:	4b13      	ldr	r3, [pc, #76]	; (8011d38 <ip4_route+0xdc>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cf0:	f003 0301 	and.w	r3, r3, #1
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d012      	beq.n	8011d1e <ip4_route+0xc2>
 8011cf8:	4b0f      	ldr	r3, [pc, #60]	; (8011d38 <ip4_route+0xdc>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d00:	f003 0304 	and.w	r3, r3, #4
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d00a      	beq.n	8011d1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d08:	4b0b      	ldr	r3, [pc, #44]	; (8011d38 <ip4_route+0xdc>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d004      	beq.n	8011d1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8011d1c:	d101      	bne.n	8011d22 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	e001      	b.n	8011d26 <ip4_route+0xca>
  }

  return netif_default;
 8011d22:	4b05      	ldr	r3, [pc, #20]	; (8011d38 <ip4_route+0xdc>)
 8011d24:	681b      	ldr	r3, [r3, #0]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3714      	adds	r7, #20
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop
 8011d34:	240084c8 	.word	0x240084c8
 8011d38:	240084cc 	.word	0x240084cc

08011d3c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d4a:	f003 0301 	and.w	r3, r3, #1
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d016      	beq.n	8011d82 <ip4_input_accept+0x46>
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3304      	adds	r3, #4
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d011      	beq.n	8011d82 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011d5e:	4b0b      	ldr	r3, [pc, #44]	; (8011d8c <ip4_input_accept+0x50>)
 8011d60:	695a      	ldr	r2, [r3, #20]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	3304      	adds	r3, #4
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d008      	beq.n	8011d7e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011d6c:	4b07      	ldr	r3, [pc, #28]	; (8011d8c <ip4_input_accept+0x50>)
 8011d6e:	695b      	ldr	r3, [r3, #20]
 8011d70:	6879      	ldr	r1, [r7, #4]
 8011d72:	4618      	mov	r0, r3
 8011d74:	f000 fa08 	bl	8012188 <ip4_addr_isbroadcast_u32>
 8011d78:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d001      	beq.n	8011d82 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e000      	b.n	8011d84 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	24005418 	.word	0x24005418

08011d90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b086      	sub	sp, #24
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	091b      	lsrs	r3, r3, #4
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b04      	cmp	r3, #4
 8011daa:	d004      	beq.n	8011db6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7f8 ff55 	bl	800ac5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011db2:	2300      	movs	r3, #0
 8011db4:	e107      	b.n	8011fc6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	f003 030f 	and.w	r3, r3, #15
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	009b      	lsls	r3, r3, #2
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	885b      	ldrh	r3, [r3, #2]
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7f7 fb57 	bl	8009480 <lwip_htons>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	891b      	ldrh	r3, [r3, #8]
 8011dda:	89ba      	ldrh	r2, [r7, #12]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d204      	bcs.n	8011dea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011de0:	89bb      	ldrh	r3, [r7, #12]
 8011de2:	4619      	mov	r1, r3
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7f8 fdb3 	bl	800a950 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	895b      	ldrh	r3, [r3, #10]
 8011dee:	89fa      	ldrh	r2, [r7, #14]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d807      	bhi.n	8011e04 <ip4_input+0x74>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	891b      	ldrh	r3, [r3, #8]
 8011df8:	89ba      	ldrh	r2, [r7, #12]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d802      	bhi.n	8011e04 <ip4_input+0x74>
 8011dfe:	89fb      	ldrh	r3, [r7, #14]
 8011e00:	2b13      	cmp	r3, #19
 8011e02:	d804      	bhi.n	8011e0e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7f8 ff29 	bl	800ac5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	e0db      	b.n	8011fc6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	691b      	ldr	r3, [r3, #16]
 8011e12:	4a6f      	ldr	r2, [pc, #444]	; (8011fd0 <ip4_input+0x240>)
 8011e14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	4a6d      	ldr	r2, [pc, #436]	; (8011fd0 <ip4_input+0x240>)
 8011e1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011e1e:	4b6c      	ldr	r3, [pc, #432]	; (8011fd0 <ip4_input+0x240>)
 8011e20:	695b      	ldr	r3, [r3, #20]
 8011e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e26:	2be0      	cmp	r3, #224	; 0xe0
 8011e28:	d112      	bne.n	8011e50 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e30:	f003 0301 	and.w	r3, r3, #1
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d007      	beq.n	8011e4a <ip4_input+0xba>
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d002      	beq.n	8011e4a <ip4_input+0xba>
      netif = inp;
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	613b      	str	r3, [r7, #16]
 8011e48:	e02a      	b.n	8011ea0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	613b      	str	r3, [r7, #16]
 8011e4e:	e027      	b.n	8011ea0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011e50:	6838      	ldr	r0, [r7, #0]
 8011e52:	f7ff ff73 	bl	8011d3c <ip4_input_accept>
 8011e56:	4603      	mov	r3, r0
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d002      	beq.n	8011e62 <ip4_input+0xd2>
      netif = inp;
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	613b      	str	r3, [r7, #16]
 8011e60:	e01e      	b.n	8011ea0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011e62:	2300      	movs	r3, #0
 8011e64:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011e66:	4b5a      	ldr	r3, [pc, #360]	; (8011fd0 <ip4_input+0x240>)
 8011e68:	695b      	ldr	r3, [r3, #20]
 8011e6a:	b2db      	uxtb	r3, r3
 8011e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8011e6e:	d017      	beq.n	8011ea0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011e70:	4b58      	ldr	r3, [pc, #352]	; (8011fd4 <ip4_input+0x244>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	613b      	str	r3, [r7, #16]
 8011e76:	e00e      	b.n	8011e96 <ip4_input+0x106>
          if (netif == inp) {
 8011e78:	693a      	ldr	r2, [r7, #16]
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d006      	beq.n	8011e8e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011e80:	6938      	ldr	r0, [r7, #16]
 8011e82:	f7ff ff5b 	bl	8011d3c <ip4_input_accept>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d108      	bne.n	8011e9e <ip4_input+0x10e>
 8011e8c:	e000      	b.n	8011e90 <ip4_input+0x100>
            continue;
 8011e8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	613b      	str	r3, [r7, #16]
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1ed      	bne.n	8011e78 <ip4_input+0xe8>
 8011e9c:	e000      	b.n	8011ea0 <ip4_input+0x110>
            break;
 8011e9e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011ea0:	4b4b      	ldr	r3, [pc, #300]	; (8011fd0 <ip4_input+0x240>)
 8011ea2:	691b      	ldr	r3, [r3, #16]
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f000 f96e 	bl	8012188 <ip4_addr_isbroadcast_u32>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d105      	bne.n	8011ebe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011eb2:	4b47      	ldr	r3, [pc, #284]	; (8011fd0 <ip4_input+0x240>)
 8011eb4:	691b      	ldr	r3, [r3, #16]
 8011eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011eba:	2be0      	cmp	r3, #224	; 0xe0
 8011ebc:	d104      	bne.n	8011ec8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f7f8 fecc 	bl	800ac5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	e07e      	b.n	8011fc6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d104      	bne.n	8011ed8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7f8 fec4 	bl	800ac5c <pbuf_free>
    return ERR_OK;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	e076      	b.n	8011fc6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	88db      	ldrh	r3, [r3, #6]
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	461a      	mov	r2, r3
 8011ee0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011ee4:	4013      	ands	r3, r2
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00b      	beq.n	8011f02 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fc92 	bl	8012814 <ip4_reass>
 8011ef0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d101      	bne.n	8011efc <ip4_input+0x16c>
      return ERR_OK;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	e064      	b.n	8011fc6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011f02:	4a33      	ldr	r2, [pc, #204]	; (8011fd0 <ip4_input+0x240>)
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011f08:	4a31      	ldr	r2, [pc, #196]	; (8011fd0 <ip4_input+0x240>)
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011f0e:	4a30      	ldr	r2, [pc, #192]	; (8011fd0 <ip4_input+0x240>)
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	f003 030f 	and.w	r3, r3, #15
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	009b      	lsls	r3, r3, #2
 8011f20:	b2db      	uxtb	r3, r3
 8011f22:	b29a      	uxth	r2, r3
 8011f24:	4b2a      	ldr	r3, [pc, #168]	; (8011fd0 <ip4_input+0x240>)
 8011f26:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011f28:	89fb      	ldrh	r3, [r7, #14]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7f8 fe0f 	bl	800ab50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	7a5b      	ldrb	r3, [r3, #9]
 8011f36:	2b11      	cmp	r3, #17
 8011f38:	d006      	beq.n	8011f48 <ip4_input+0x1b8>
 8011f3a:	2b11      	cmp	r3, #17
 8011f3c:	dc13      	bgt.n	8011f66 <ip4_input+0x1d6>
 8011f3e:	2b01      	cmp	r3, #1
 8011f40:	d00c      	beq.n	8011f5c <ip4_input+0x1cc>
 8011f42:	2b06      	cmp	r3, #6
 8011f44:	d005      	beq.n	8011f52 <ip4_input+0x1c2>
 8011f46:	e00e      	b.n	8011f66 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011f48:	6839      	ldr	r1, [r7, #0]
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7fe fc68 	bl	8010820 <udp_input>
        break;
 8011f50:	e026      	b.n	8011fa0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011f52:	6839      	ldr	r1, [r7, #0]
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7fa fcb5 	bl	800c8c4 <tcp_input>
        break;
 8011f5a:	e021      	b.n	8011fa0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011f5c:	6839      	ldr	r1, [r7, #0]
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f7ff fcee 	bl	8011940 <icmp_input>
        break;
 8011f64:	e01c      	b.n	8011fa0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011f66:	4b1a      	ldr	r3, [pc, #104]	; (8011fd0 <ip4_input+0x240>)
 8011f68:	695b      	ldr	r3, [r3, #20]
 8011f6a:	6939      	ldr	r1, [r7, #16]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f000 f90b 	bl	8012188 <ip4_addr_isbroadcast_u32>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d10f      	bne.n	8011f98 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011f78:	4b15      	ldr	r3, [pc, #84]	; (8011fd0 <ip4_input+0x240>)
 8011f7a:	695b      	ldr	r3, [r3, #20]
 8011f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011f80:	2be0      	cmp	r3, #224	; 0xe0
 8011f82:	d009      	beq.n	8011f98 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011f88:	4619      	mov	r1, r3
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7f8 fe53 	bl	800ac36 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011f90:	2102      	movs	r1, #2
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff fdd8 	bl	8011b48 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7f8 fe5f 	bl	800ac5c <pbuf_free>
        break;
 8011f9e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011fa0:	4b0b      	ldr	r3, [pc, #44]	; (8011fd0 <ip4_input+0x240>)
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011fa6:	4b0a      	ldr	r3, [pc, #40]	; (8011fd0 <ip4_input+0x240>)
 8011fa8:	2200      	movs	r2, #0
 8011faa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011fac:	4b08      	ldr	r3, [pc, #32]	; (8011fd0 <ip4_input+0x240>)
 8011fae:	2200      	movs	r2, #0
 8011fb0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011fb2:	4b07      	ldr	r3, [pc, #28]	; (8011fd0 <ip4_input+0x240>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011fb8:	4b05      	ldr	r3, [pc, #20]	; (8011fd0 <ip4_input+0x240>)
 8011fba:	2200      	movs	r2, #0
 8011fbc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011fbe:	4b04      	ldr	r3, [pc, #16]	; (8011fd0 <ip4_input+0x240>)
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011fc4:	2300      	movs	r3, #0
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3718      	adds	r7, #24
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	24005418 	.word	0x24005418
 8011fd4:	240084c8 	.word	0x240084c8

08011fd8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b08a      	sub	sp, #40	; 0x28
 8011fdc:	af04      	add	r7, sp, #16
 8011fde:	60f8      	str	r0, [r7, #12]
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
 8011fe4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d009      	beq.n	8012004 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d003      	beq.n	8011ffe <ip4_output_if+0x26>
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d102      	bne.n	8012004 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012000:	3304      	adds	r3, #4
 8012002:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012004:	78fa      	ldrb	r2, [r7, #3]
 8012006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012008:	9302      	str	r3, [sp, #8]
 801200a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	4613      	mov	r3, r2
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	6979      	ldr	r1, [r7, #20]
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f000 f805 	bl	801202c <ip4_output_if_src>
 8012022:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b088      	sub	sp, #32
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	7b9b      	ldrb	r3, [r3, #14]
 801203e:	2b01      	cmp	r3, #1
 8012040:	d006      	beq.n	8012050 <ip4_output_if_src+0x24>
 8012042:	4b4b      	ldr	r3, [pc, #300]	; (8012170 <ip4_output_if_src+0x144>)
 8012044:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012048:	494a      	ldr	r1, [pc, #296]	; (8012174 <ip4_output_if_src+0x148>)
 801204a:	484b      	ldr	r0, [pc, #300]	; (8012178 <ip4_output_if_src+0x14c>)
 801204c:	f001 f926 	bl	801329c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d060      	beq.n	8012118 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012056:	2314      	movs	r3, #20
 8012058:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801205a:	2114      	movs	r1, #20
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f7f8 fd67 	bl	800ab30 <pbuf_add_header>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012068:	f06f 0301 	mvn.w	r3, #1
 801206c:	e07c      	b.n	8012168 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	895b      	ldrh	r3, [r3, #10]
 8012078:	2b13      	cmp	r3, #19
 801207a:	d806      	bhi.n	801208a <ip4_output_if_src+0x5e>
 801207c:	4b3c      	ldr	r3, [pc, #240]	; (8012170 <ip4_output_if_src+0x144>)
 801207e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012082:	493e      	ldr	r1, [pc, #248]	; (801217c <ip4_output_if_src+0x150>)
 8012084:	483c      	ldr	r0, [pc, #240]	; (8012178 <ip4_output_if_src+0x14c>)
 8012086:	f001 f909 	bl	801329c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	78fa      	ldrb	r2, [r7, #3]
 801208e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012096:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80120a0:	8b7b      	ldrh	r3, [r7, #26]
 80120a2:	089b      	lsrs	r3, r3, #2
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120ac:	b2da      	uxtb	r2, r3
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80120b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	891b      	ldrh	r3, [r3, #8]
 80120be:	4618      	mov	r0, r3
 80120c0:	f7f7 f9de 	bl	8009480 <lwip_htons>
 80120c4:	4603      	mov	r3, r0
 80120c6:	461a      	mov	r2, r3
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	2200      	movs	r2, #0
 80120d0:	719a      	strb	r2, [r3, #6]
 80120d2:	2200      	movs	r2, #0
 80120d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80120d6:	4b2a      	ldr	r3, [pc, #168]	; (8012180 <ip4_output_if_src+0x154>)
 80120d8:	881b      	ldrh	r3, [r3, #0]
 80120da:	4618      	mov	r0, r3
 80120dc:	f7f7 f9d0 	bl	8009480 <lwip_htons>
 80120e0:	4603      	mov	r3, r0
 80120e2:	461a      	mov	r2, r3
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80120e8:	4b25      	ldr	r3, [pc, #148]	; (8012180 <ip4_output_if_src+0x154>)
 80120ea:	881b      	ldrh	r3, [r3, #0]
 80120ec:	3301      	adds	r3, #1
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	4b23      	ldr	r3, [pc, #140]	; (8012180 <ip4_output_if_src+0x154>)
 80120f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d104      	bne.n	8012104 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80120fa:	4b22      	ldr	r3, [pc, #136]	; (8012184 <ip4_output_if_src+0x158>)
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	60da      	str	r2, [r3, #12]
 8012102:	e003      	b.n	801210c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	69fb      	ldr	r3, [r7, #28]
 801210a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	2200      	movs	r2, #0
 8012110:	729a      	strb	r2, [r3, #10]
 8012112:	2200      	movs	r2, #0
 8012114:	72da      	strb	r2, [r3, #11]
 8012116:	e00f      	b.n	8012138 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	895b      	ldrh	r3, [r3, #10]
 801211c:	2b13      	cmp	r3, #19
 801211e:	d802      	bhi.n	8012126 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012120:	f06f 0301 	mvn.w	r3, #1
 8012124:	e020      	b.n	8012168 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	691b      	ldr	r3, [r3, #16]
 8012130:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012132:	f107 0314 	add.w	r3, r7, #20
 8012136:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801213c:	2b00      	cmp	r3, #0
 801213e:	d00c      	beq.n	801215a <ip4_output_if_src+0x12e>
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	891a      	ldrh	r2, [r3, #8]
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012148:	429a      	cmp	r2, r3
 801214a:	d906      	bls.n	801215a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f000 fd4d 	bl	8012bf0 <ip4_frag>
 8012156:	4603      	mov	r3, r0
 8012158:	e006      	b.n	8012168 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215c:	695b      	ldr	r3, [r3, #20]
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	68f9      	ldr	r1, [r7, #12]
 8012162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012164:	4798      	blx	r3
 8012166:	4603      	mov	r3, r0
}
 8012168:	4618      	mov	r0, r3
 801216a:	3720      	adds	r7, #32
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}
 8012170:	08016aa4 	.word	0x08016aa4
 8012174:	08016ad8 	.word	0x08016ad8
 8012178:	08016ae4 	.word	0x08016ae4
 801217c:	08016b0c 	.word	0x08016b0c
 8012180:	24005156 	.word	0x24005156
 8012184:	08016f48 	.word	0x08016f48

08012188 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801219c:	d002      	beq.n	80121a4 <ip4_addr_isbroadcast_u32+0x1c>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d101      	bne.n	80121a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80121a4:	2301      	movs	r3, #1
 80121a6:	e02a      	b.n	80121fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121ae:	f003 0302 	and.w	r3, r3, #2
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80121b6:	2300      	movs	r3, #0
 80121b8:	e021      	b.n	80121fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	3304      	adds	r3, #4
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d101      	bne.n	80121ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80121c6:	2300      	movs	r3, #0
 80121c8:	e019      	b.n	80121fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80121ca:	68fa      	ldr	r2, [r7, #12]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	3304      	adds	r3, #4
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	405a      	eors	r2, r3
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	3308      	adds	r3, #8
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4013      	ands	r3, r2
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d10d      	bne.n	80121fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	3308      	adds	r3, #8
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	43da      	mvns	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	3308      	adds	r3, #8
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d101      	bne.n	80121fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80121f8:	2301      	movs	r3, #1
 80121fa:	e000      	b.n	80121fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80121fc:	2300      	movs	r3, #0
  }
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3714      	adds	r7, #20
 8012202:	46bd      	mov	sp, r7
 8012204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012208:	4770      	bx	lr
	...

0801220c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012212:	2300      	movs	r3, #0
 8012214:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012216:	4b12      	ldr	r3, [pc, #72]	; (8012260 <ip_reass_tmr+0x54>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801221c:	e018      	b.n	8012250 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	7fdb      	ldrb	r3, [r3, #31]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d00b      	beq.n	801223e <ip_reass_tmr+0x32>
      r->timer--;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	7fdb      	ldrb	r3, [r3, #31]
 801222a:	3b01      	subs	r3, #1
 801222c:	b2da      	uxtb	r2, r3
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	60fb      	str	r3, [r7, #12]
 801223c:	e008      	b.n	8012250 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012248:	68b9      	ldr	r1, [r7, #8]
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f000 f80a 	bl	8012264 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d1e3      	bne.n	801221e <ip_reass_tmr+0x12>
    }
  }
}
 8012256:	bf00      	nop
 8012258:	bf00      	nop
 801225a:	3710      	adds	r7, #16
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	24005158 	.word	0x24005158

08012264 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b088      	sub	sp, #32
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801226e:	2300      	movs	r3, #0
 8012270:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012272:	683a      	ldr	r2, [r7, #0]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	429a      	cmp	r2, r3
 8012278:	d105      	bne.n	8012286 <ip_reass_free_complete_datagram+0x22>
 801227a:	4b45      	ldr	r3, [pc, #276]	; (8012390 <ip_reass_free_complete_datagram+0x12c>)
 801227c:	22ab      	movs	r2, #171	; 0xab
 801227e:	4945      	ldr	r1, [pc, #276]	; (8012394 <ip_reass_free_complete_datagram+0x130>)
 8012280:	4845      	ldr	r0, [pc, #276]	; (8012398 <ip_reass_free_complete_datagram+0x134>)
 8012282:	f001 f80b 	bl	801329c <iprintf>
  if (prev != NULL) {
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d00a      	beq.n	80122a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	429a      	cmp	r2, r3
 8012294:	d005      	beq.n	80122a2 <ip_reass_free_complete_datagram+0x3e>
 8012296:	4b3e      	ldr	r3, [pc, #248]	; (8012390 <ip_reass_free_complete_datagram+0x12c>)
 8012298:	22ad      	movs	r2, #173	; 0xad
 801229a:	4940      	ldr	r1, [pc, #256]	; (801239c <ip_reass_free_complete_datagram+0x138>)
 801229c:	483e      	ldr	r0, [pc, #248]	; (8012398 <ip_reass_free_complete_datagram+0x134>)
 801229e:	f000 fffd 	bl	801329c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	685b      	ldr	r3, [r3, #4]
 80122a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	889b      	ldrh	r3, [r3, #4]
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d12a      	bne.n	801230a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	681a      	ldr	r2, [r3, #0]
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	6858      	ldr	r0, [r3, #4]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	3308      	adds	r3, #8
 80122ca:	2214      	movs	r2, #20
 80122cc:	4619      	mov	r1, r3
 80122ce:	f000 ffcf 	bl	8013270 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80122d2:	2101      	movs	r1, #1
 80122d4:	69b8      	ldr	r0, [r7, #24]
 80122d6:	f7ff fc47 	bl	8011b68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80122da:	69b8      	ldr	r0, [r7, #24]
 80122dc:	f7f8 fd4c 	bl	800ad78 <pbuf_clen>
 80122e0:	4603      	mov	r3, r0
 80122e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80122e4:	8bfa      	ldrh	r2, [r7, #30]
 80122e6:	8a7b      	ldrh	r3, [r7, #18]
 80122e8:	4413      	add	r3, r2
 80122ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122ee:	db05      	blt.n	80122fc <ip_reass_free_complete_datagram+0x98>
 80122f0:	4b27      	ldr	r3, [pc, #156]	; (8012390 <ip_reass_free_complete_datagram+0x12c>)
 80122f2:	22bc      	movs	r2, #188	; 0xbc
 80122f4:	492a      	ldr	r1, [pc, #168]	; (80123a0 <ip_reass_free_complete_datagram+0x13c>)
 80122f6:	4828      	ldr	r0, [pc, #160]	; (8012398 <ip_reass_free_complete_datagram+0x134>)
 80122f8:	f000 ffd0 	bl	801329c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80122fc:	8bfa      	ldrh	r2, [r7, #30]
 80122fe:	8a7b      	ldrh	r3, [r7, #18]
 8012300:	4413      	add	r3, r2
 8012302:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012304:	69b8      	ldr	r0, [r7, #24]
 8012306:	f7f8 fca9 	bl	800ac5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012310:	e01f      	b.n	8012352 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012312:	69bb      	ldr	r3, [r7, #24]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012322:	68f8      	ldr	r0, [r7, #12]
 8012324:	f7f8 fd28 	bl	800ad78 <pbuf_clen>
 8012328:	4603      	mov	r3, r0
 801232a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801232c:	8bfa      	ldrh	r2, [r7, #30]
 801232e:	8a7b      	ldrh	r3, [r7, #18]
 8012330:	4413      	add	r3, r2
 8012332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012336:	db05      	blt.n	8012344 <ip_reass_free_complete_datagram+0xe0>
 8012338:	4b15      	ldr	r3, [pc, #84]	; (8012390 <ip_reass_free_complete_datagram+0x12c>)
 801233a:	22cc      	movs	r2, #204	; 0xcc
 801233c:	4918      	ldr	r1, [pc, #96]	; (80123a0 <ip_reass_free_complete_datagram+0x13c>)
 801233e:	4816      	ldr	r0, [pc, #88]	; (8012398 <ip_reass_free_complete_datagram+0x134>)
 8012340:	f000 ffac 	bl	801329c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012344:	8bfa      	ldrh	r2, [r7, #30]
 8012346:	8a7b      	ldrh	r3, [r7, #18]
 8012348:	4413      	add	r3, r2
 801234a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f7f8 fc85 	bl	800ac5c <pbuf_free>
  while (p != NULL) {
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d1dc      	bne.n	8012312 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012358:	6839      	ldr	r1, [r7, #0]
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 f8c2 	bl	80124e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012360:	4b10      	ldr	r3, [pc, #64]	; (80123a4 <ip_reass_free_complete_datagram+0x140>)
 8012362:	881b      	ldrh	r3, [r3, #0]
 8012364:	8bfa      	ldrh	r2, [r7, #30]
 8012366:	429a      	cmp	r2, r3
 8012368:	d905      	bls.n	8012376 <ip_reass_free_complete_datagram+0x112>
 801236a:	4b09      	ldr	r3, [pc, #36]	; (8012390 <ip_reass_free_complete_datagram+0x12c>)
 801236c:	22d2      	movs	r2, #210	; 0xd2
 801236e:	490e      	ldr	r1, [pc, #56]	; (80123a8 <ip_reass_free_complete_datagram+0x144>)
 8012370:	4809      	ldr	r0, [pc, #36]	; (8012398 <ip_reass_free_complete_datagram+0x134>)
 8012372:	f000 ff93 	bl	801329c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012376:	4b0b      	ldr	r3, [pc, #44]	; (80123a4 <ip_reass_free_complete_datagram+0x140>)
 8012378:	881a      	ldrh	r2, [r3, #0]
 801237a:	8bfb      	ldrh	r3, [r7, #30]
 801237c:	1ad3      	subs	r3, r2, r3
 801237e:	b29a      	uxth	r2, r3
 8012380:	4b08      	ldr	r3, [pc, #32]	; (80123a4 <ip_reass_free_complete_datagram+0x140>)
 8012382:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012384:	8bfb      	ldrh	r3, [r7, #30]
}
 8012386:	4618      	mov	r0, r3
 8012388:	3720      	adds	r7, #32
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	08016b3c 	.word	0x08016b3c
 8012394:	08016b78 	.word	0x08016b78
 8012398:	08016b84 	.word	0x08016b84
 801239c:	08016bac 	.word	0x08016bac
 80123a0:	08016bc0 	.word	0x08016bc0
 80123a4:	2400515c 	.word	0x2400515c
 80123a8:	08016be0 	.word	0x08016be0

080123ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b08a      	sub	sp, #40	; 0x28
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80123b6:	2300      	movs	r3, #0
 80123b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80123ba:	2300      	movs	r3, #0
 80123bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80123be:	2300      	movs	r3, #0
 80123c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80123c2:	2300      	movs	r3, #0
 80123c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80123c6:	2300      	movs	r3, #0
 80123c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80123ca:	4b28      	ldr	r3, [pc, #160]	; (801246c <ip_reass_remove_oldest_datagram+0xc0>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80123d0:	e030      	b.n	8012434 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80123d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d4:	695a      	ldr	r2, [r3, #20]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d10c      	bne.n	80123f8 <ip_reass_remove_oldest_datagram+0x4c>
 80123de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e0:	699a      	ldr	r2, [r3, #24]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	691b      	ldr	r3, [r3, #16]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d106      	bne.n	80123f8 <ip_reass_remove_oldest_datagram+0x4c>
 80123ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ec:	899a      	ldrh	r2, [r3, #12]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	889b      	ldrh	r3, [r3, #4]
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d014      	beq.n	8012422 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	3301      	adds	r3, #1
 80123fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80123fe:	6a3b      	ldr	r3, [r7, #32]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d104      	bne.n	801240e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	61bb      	str	r3, [r7, #24]
 801240c:	e009      	b.n	8012422 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	7fda      	ldrb	r2, [r3, #31]
 8012412:	6a3b      	ldr	r3, [r7, #32]
 8012414:	7fdb      	ldrb	r3, [r3, #31]
 8012416:	429a      	cmp	r2, r3
 8012418:	d803      	bhi.n	8012422 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d001      	beq.n	801242e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1cb      	bne.n	80123d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801243a:	6a3b      	ldr	r3, [r7, #32]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d008      	beq.n	8012452 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012440:	69b9      	ldr	r1, [r7, #24]
 8012442:	6a38      	ldr	r0, [r7, #32]
 8012444:	f7ff ff0e 	bl	8012264 <ip_reass_free_complete_datagram>
 8012448:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801244a:	697a      	ldr	r2, [r7, #20]
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	4413      	add	r3, r2
 8012450:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012452:	697a      	ldr	r2, [r7, #20]
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	429a      	cmp	r2, r3
 8012458:	da02      	bge.n	8012460 <ip_reass_remove_oldest_datagram+0xb4>
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	2b01      	cmp	r3, #1
 801245e:	dcac      	bgt.n	80123ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012460:	697b      	ldr	r3, [r7, #20]
}
 8012462:	4618      	mov	r0, r3
 8012464:	3728      	adds	r7, #40	; 0x28
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	24005158 	.word	0x24005158

08012470 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801247a:	2004      	movs	r0, #4
 801247c:	f7f7 fcd4 	bl	8009e28 <memp_malloc>
 8012480:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d110      	bne.n	80124aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7ff ff8e 	bl	80123ac <ip_reass_remove_oldest_datagram>
 8012490:	4602      	mov	r2, r0
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	4293      	cmp	r3, r2
 8012496:	dc03      	bgt.n	80124a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012498:	2004      	movs	r0, #4
 801249a:	f7f7 fcc5 	bl	8009e28 <memp_malloc>
 801249e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d101      	bne.n	80124aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80124a6:	2300      	movs	r3, #0
 80124a8:	e016      	b.n	80124d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80124aa:	2220      	movs	r2, #32
 80124ac:	2100      	movs	r1, #0
 80124ae:	68f8      	ldr	r0, [r7, #12]
 80124b0:	f000 feec 	bl	801328c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	220f      	movs	r2, #15
 80124b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80124ba:	4b09      	ldr	r3, [pc, #36]	; (80124e0 <ip_reass_enqueue_new_datagram+0x70>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80124c2:	4a07      	ldr	r2, [pc, #28]	; (80124e0 <ip_reass_enqueue_new_datagram+0x70>)
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	3308      	adds	r3, #8
 80124cc:	2214      	movs	r2, #20
 80124ce:	6879      	ldr	r1, [r7, #4]
 80124d0:	4618      	mov	r0, r3
 80124d2:	f000 fecd 	bl	8013270 <memcpy>
  return ipr;
 80124d6:	68fb      	ldr	r3, [r7, #12]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	24005158 	.word	0x24005158

080124e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80124ee:	4b10      	ldr	r3, [pc, #64]	; (8012530 <ip_reass_dequeue_datagram+0x4c>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d104      	bne.n	8012502 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	4a0c      	ldr	r2, [pc, #48]	; (8012530 <ip_reass_dequeue_datagram+0x4c>)
 80124fe:	6013      	str	r3, [r2, #0]
 8012500:	e00d      	b.n	801251e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d106      	bne.n	8012516 <ip_reass_dequeue_datagram+0x32>
 8012508:	4b0a      	ldr	r3, [pc, #40]	; (8012534 <ip_reass_dequeue_datagram+0x50>)
 801250a:	f240 1245 	movw	r2, #325	; 0x145
 801250e:	490a      	ldr	r1, [pc, #40]	; (8012538 <ip_reass_dequeue_datagram+0x54>)
 8012510:	480a      	ldr	r0, [pc, #40]	; (801253c <ip_reass_dequeue_datagram+0x58>)
 8012512:	f000 fec3 	bl	801329c <iprintf>
    prev->next = ipr->next;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681a      	ldr	r2, [r3, #0]
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801251e:	6879      	ldr	r1, [r7, #4]
 8012520:	2004      	movs	r0, #4
 8012522:	f7f7 fcf7 	bl	8009f14 <memp_free>
}
 8012526:	bf00      	nop
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	24005158 	.word	0x24005158
 8012534:	08016b3c 	.word	0x08016b3c
 8012538:	08016c04 	.word	0x08016c04
 801253c:	08016b84 	.word	0x08016b84

08012540 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08c      	sub	sp, #48	; 0x30
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801254c:	2300      	movs	r3, #0
 801254e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012550:	2301      	movs	r3, #1
 8012552:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	885b      	ldrh	r3, [r3, #2]
 801255e:	b29b      	uxth	r3, r3
 8012560:	4618      	mov	r0, r3
 8012562:	f7f6 ff8d 	bl	8009480 <lwip_htons>
 8012566:	4603      	mov	r3, r0
 8012568:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	f003 030f 	and.w	r3, r3, #15
 8012572:	b2db      	uxtb	r3, r3
 8012574:	009b      	lsls	r3, r3, #2
 8012576:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012578:	7e7b      	ldrb	r3, [r7, #25]
 801257a:	b29b      	uxth	r3, r3
 801257c:	8b7a      	ldrh	r2, [r7, #26]
 801257e:	429a      	cmp	r2, r3
 8012580:	d202      	bcs.n	8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012582:	f04f 33ff 	mov.w	r3, #4294967295
 8012586:	e135      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012588:	7e7b      	ldrb	r3, [r7, #25]
 801258a:	b29b      	uxth	r3, r3
 801258c:	8b7a      	ldrh	r2, [r7, #26]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	88db      	ldrh	r3, [r3, #6]
 8012596:	b29b      	uxth	r3, r3
 8012598:	4618      	mov	r0, r3
 801259a:	f7f6 ff71 	bl	8009480 <lwip_htons>
 801259e:	4603      	mov	r3, r0
 80125a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	00db      	lsls	r3, r3, #3
 80125a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80125b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b2:	2200      	movs	r2, #0
 80125b4:	701a      	strb	r2, [r3, #0]
 80125b6:	2200      	movs	r2, #0
 80125b8:	705a      	strb	r2, [r3, #1]
 80125ba:	2200      	movs	r2, #0
 80125bc:	709a      	strb	r2, [r3, #2]
 80125be:	2200      	movs	r2, #0
 80125c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80125c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c4:	8afa      	ldrh	r2, [r7, #22]
 80125c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80125c8:	8afa      	ldrh	r2, [r7, #22]
 80125ca:	8b7b      	ldrh	r3, [r7, #26]
 80125cc:	4413      	add	r3, r2
 80125ce:	b29a      	uxth	r2, r3
 80125d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80125d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d6:	88db      	ldrh	r3, [r3, #6]
 80125d8:	b29b      	uxth	r3, r3
 80125da:	8afa      	ldrh	r2, [r7, #22]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d902      	bls.n	80125e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125e0:	f04f 33ff 	mov.w	r3, #4294967295
 80125e4:	e106      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	627b      	str	r3, [r7, #36]	; 0x24
 80125ec:	e068      	b.n	80126c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80125ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80125f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f6:	889b      	ldrh	r3, [r3, #4]
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	693b      	ldr	r3, [r7, #16]
 80125fc:	889b      	ldrh	r3, [r3, #4]
 80125fe:	b29b      	uxth	r3, r3
 8012600:	429a      	cmp	r2, r3
 8012602:	d235      	bcs.n	8012670 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012608:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260c:	2b00      	cmp	r3, #0
 801260e:	d020      	beq.n	8012652 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	889b      	ldrh	r3, [r3, #4]
 8012614:	b29a      	uxth	r2, r3
 8012616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012618:	88db      	ldrh	r3, [r3, #6]
 801261a:	b29b      	uxth	r3, r3
 801261c:	429a      	cmp	r2, r3
 801261e:	d307      	bcc.n	8012630 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	88db      	ldrh	r3, [r3, #6]
 8012624:	b29a      	uxth	r2, r3
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	889b      	ldrh	r3, [r3, #4]
 801262a:	b29b      	uxth	r3, r3
 801262c:	429a      	cmp	r2, r3
 801262e:	d902      	bls.n	8012636 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012630:	f04f 33ff 	mov.w	r3, #4294967295
 8012634:	e0de      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012638:	68ba      	ldr	r2, [r7, #8]
 801263a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801263e:	88db      	ldrh	r3, [r3, #6]
 8012640:	b29a      	uxth	r2, r3
 8012642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012644:	889b      	ldrh	r3, [r3, #4]
 8012646:	b29b      	uxth	r3, r3
 8012648:	429a      	cmp	r2, r3
 801264a:	d03d      	beq.n	80126c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801264c:	2300      	movs	r3, #0
 801264e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012650:	e03a      	b.n	80126c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	88db      	ldrh	r3, [r3, #6]
 8012656:	b29a      	uxth	r2, r3
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	889b      	ldrh	r3, [r3, #4]
 801265c:	b29b      	uxth	r3, r3
 801265e:	429a      	cmp	r2, r3
 8012660:	d902      	bls.n	8012668 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012662:	f04f 33ff 	mov.w	r3, #4294967295
 8012666:	e0c5      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	605a      	str	r2, [r3, #4]
      break;
 801266e:	e02b      	b.n	80126c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	889b      	ldrh	r3, [r3, #4]
 8012674:	b29a      	uxth	r2, r3
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	889b      	ldrh	r3, [r3, #4]
 801267a:	b29b      	uxth	r3, r3
 801267c:	429a      	cmp	r2, r3
 801267e:	d102      	bne.n	8012686 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012680:	f04f 33ff 	mov.w	r3, #4294967295
 8012684:	e0b6      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012688:	889b      	ldrh	r3, [r3, #4]
 801268a:	b29a      	uxth	r2, r3
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	88db      	ldrh	r3, [r3, #6]
 8012690:	b29b      	uxth	r3, r3
 8012692:	429a      	cmp	r2, r3
 8012694:	d202      	bcs.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012696:	f04f 33ff 	mov.w	r3, #4294967295
 801269a:	e0ab      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d009      	beq.n	80126b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80126a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a4:	88db      	ldrh	r3, [r3, #6]
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	889b      	ldrh	r3, [r3, #4]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d001      	beq.n	80126b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80126b2:	2300      	movs	r3, #0
 80126b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80126c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d193      	bne.n	80125ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80126c6:	e000      	b.n	80126ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80126c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d12d      	bne.n	801272c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80126d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d01c      	beq.n	8012710 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80126d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d8:	88db      	ldrh	r3, [r3, #6]
 80126da:	b29a      	uxth	r2, r3
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	889b      	ldrh	r3, [r3, #4]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d906      	bls.n	80126f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80126e6:	4b45      	ldr	r3, [pc, #276]	; (80127fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80126e8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80126ec:	4944      	ldr	r1, [pc, #272]	; (8012800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80126ee:	4845      	ldr	r0, [pc, #276]	; (8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80126f0:	f000 fdd4 	bl	801329c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80126f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f6:	68ba      	ldr	r2, [r7, #8]
 80126f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80126fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fc:	88db      	ldrh	r3, [r3, #6]
 80126fe:	b29a      	uxth	r2, r3
 8012700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012702:	889b      	ldrh	r3, [r3, #4]
 8012704:	b29b      	uxth	r3, r3
 8012706:	429a      	cmp	r2, r3
 8012708:	d010      	beq.n	801272c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801270a:	2300      	movs	r3, #0
 801270c:	623b      	str	r3, [r7, #32]
 801270e:	e00d      	b.n	801272c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d006      	beq.n	8012726 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012718:	4b38      	ldr	r3, [pc, #224]	; (80127fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801271a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801271e:	493a      	ldr	r1, [pc, #232]	; (8012808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012720:	4838      	ldr	r0, [pc, #224]	; (8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012722:	f000 fdbb 	bl	801329c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	68ba      	ldr	r2, [r7, #8]
 801272a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d105      	bne.n	801273e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	7f9b      	ldrb	r3, [r3, #30]
 8012736:	f003 0301 	and.w	r3, r3, #1
 801273a:	2b00      	cmp	r3, #0
 801273c:	d059      	beq.n	80127f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801273e:	6a3b      	ldr	r3, [r7, #32]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d04f      	beq.n	80127e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	889b      	ldrh	r3, [r3, #4]
 8012754:	b29b      	uxth	r3, r3
 8012756:	2b00      	cmp	r3, #0
 8012758:	d002      	beq.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801275a:	2300      	movs	r3, #0
 801275c:	623b      	str	r3, [r7, #32]
 801275e:	e041      	b.n	80127e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801276a:	e012      	b.n	8012792 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012774:	88db      	ldrh	r3, [r3, #6]
 8012776:	b29a      	uxth	r2, r3
 8012778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277a:	889b      	ldrh	r3, [r3, #4]
 801277c:	b29b      	uxth	r3, r3
 801277e:	429a      	cmp	r2, r3
 8012780:	d002      	beq.n	8012788 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012782:	2300      	movs	r3, #0
 8012784:	623b      	str	r3, [r7, #32]
            break;
 8012786:	e007      	b.n	8012798 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012794:	2b00      	cmp	r3, #0
 8012796:	d1e9      	bne.n	801276c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012798:	6a3b      	ldr	r3, [r7, #32]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d022      	beq.n	80127e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d106      	bne.n	80127b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80127a6:	4b15      	ldr	r3, [pc, #84]	; (80127fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127a8:	f240 12df 	movw	r2, #479	; 0x1df
 80127ac:	4917      	ldr	r1, [pc, #92]	; (801280c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80127ae:	4815      	ldr	r0, [pc, #84]	; (8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127b0:	f000 fd74 	bl	801329c <iprintf>
          LWIP_ASSERT("sanity check",
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127bc:	429a      	cmp	r2, r3
 80127be:	d106      	bne.n	80127ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80127c0:	4b0e      	ldr	r3, [pc, #56]	; (80127fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80127c6:	4911      	ldr	r1, [pc, #68]	; (801280c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80127c8:	480e      	ldr	r0, [pc, #56]	; (8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127ca:	f000 fd67 	bl	801329c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80127ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d006      	beq.n	80127e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80127d6:	4b09      	ldr	r3, [pc, #36]	; (80127fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127d8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80127dc:	490c      	ldr	r1, [pc, #48]	; (8012810 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80127de:	4809      	ldr	r0, [pc, #36]	; (8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127e0:	f000 fd5c 	bl	801329c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80127e4:	6a3b      	ldr	r3, [r7, #32]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	bf14      	ite	ne
 80127ea:	2301      	movne	r3, #1
 80127ec:	2300      	moveq	r3, #0
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	e000      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80127f2:	2300      	movs	r3, #0
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3730      	adds	r7, #48	; 0x30
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	08016b3c 	.word	0x08016b3c
 8012800:	08016c20 	.word	0x08016c20
 8012804:	08016b84 	.word	0x08016b84
 8012808:	08016c40 	.word	0x08016c40
 801280c:	08016c78 	.word	0x08016c78
 8012810:	08016c88 	.word	0x08016c88

08012814 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b08e      	sub	sp, #56	; 0x38
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	f003 030f 	and.w	r3, r3, #15
 801282a:	b2db      	uxtb	r3, r3
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	b2db      	uxtb	r3, r3
 8012830:	2b14      	cmp	r3, #20
 8012832:	f040 8167 	bne.w	8012b04 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012838:	88db      	ldrh	r3, [r3, #6]
 801283a:	b29b      	uxth	r3, r3
 801283c:	4618      	mov	r0, r3
 801283e:	f7f6 fe1f 	bl	8009480 <lwip_htons>
 8012842:	4603      	mov	r3, r0
 8012844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012848:	b29b      	uxth	r3, r3
 801284a:	00db      	lsls	r3, r3, #3
 801284c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012850:	885b      	ldrh	r3, [r3, #2]
 8012852:	b29b      	uxth	r3, r3
 8012854:	4618      	mov	r0, r3
 8012856:	f7f6 fe13 	bl	8009480 <lwip_htons>
 801285a:	4603      	mov	r3, r0
 801285c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	f003 030f 	and.w	r3, r3, #15
 8012866:	b2db      	uxtb	r3, r3
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801286e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012872:	b29b      	uxth	r3, r3
 8012874:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012876:	429a      	cmp	r2, r3
 8012878:	f0c0 8146 	bcc.w	8012b08 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801287c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012880:	b29b      	uxth	r3, r3
 8012882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f7f8 fa75 	bl	800ad78 <pbuf_clen>
 801288e:	4603      	mov	r3, r0
 8012890:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012892:	4b9f      	ldr	r3, [pc, #636]	; (8012b10 <ip4_reass+0x2fc>)
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	461a      	mov	r2, r3
 8012898:	8c3b      	ldrh	r3, [r7, #32]
 801289a:	4413      	add	r3, r2
 801289c:	2b0a      	cmp	r3, #10
 801289e:	dd10      	ble.n	80128c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80128a0:	8c3b      	ldrh	r3, [r7, #32]
 80128a2:	4619      	mov	r1, r3
 80128a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128a6:	f7ff fd81 	bl	80123ac <ip_reass_remove_oldest_datagram>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	f000 812d 	beq.w	8012b0c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80128b2:	4b97      	ldr	r3, [pc, #604]	; (8012b10 <ip4_reass+0x2fc>)
 80128b4:	881b      	ldrh	r3, [r3, #0]
 80128b6:	461a      	mov	r2, r3
 80128b8:	8c3b      	ldrh	r3, [r7, #32]
 80128ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80128bc:	2b0a      	cmp	r3, #10
 80128be:	f300 8125 	bgt.w	8012b0c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80128c2:	4b94      	ldr	r3, [pc, #592]	; (8012b14 <ip4_reass+0x300>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	633b      	str	r3, [r7, #48]	; 0x30
 80128c8:	e015      	b.n	80128f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80128ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128cc:	695a      	ldr	r2, [r3, #20]
 80128ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d10c      	bne.n	80128f0 <ip4_reass+0xdc>
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	699a      	ldr	r2, [r3, #24]
 80128da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128dc:	691b      	ldr	r3, [r3, #16]
 80128de:	429a      	cmp	r2, r3
 80128e0:	d106      	bne.n	80128f0 <ip4_reass+0xdc>
 80128e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e4:	899a      	ldrh	r2, [r3, #12]
 80128e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e8:	889b      	ldrh	r3, [r3, #4]
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d006      	beq.n	80128fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80128f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	633b      	str	r3, [r7, #48]	; 0x30
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d1e6      	bne.n	80128ca <ip4_reass+0xb6>
 80128fc:	e000      	b.n	8012900 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80128fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012902:	2b00      	cmp	r3, #0
 8012904:	d109      	bne.n	801291a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012906:	8c3b      	ldrh	r3, [r7, #32]
 8012908:	4619      	mov	r1, r3
 801290a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801290c:	f7ff fdb0 	bl	8012470 <ip_reass_enqueue_new_datagram>
 8012910:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012914:	2b00      	cmp	r3, #0
 8012916:	d11c      	bne.n	8012952 <ip4_reass+0x13e>
      goto nullreturn;
 8012918:	e109      	b.n	8012b2e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801291c:	88db      	ldrh	r3, [r3, #6]
 801291e:	b29b      	uxth	r3, r3
 8012920:	4618      	mov	r0, r3
 8012922:	f7f6 fdad 	bl	8009480 <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801292c:	2b00      	cmp	r3, #0
 801292e:	d110      	bne.n	8012952 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012932:	89db      	ldrh	r3, [r3, #14]
 8012934:	4618      	mov	r0, r3
 8012936:	f7f6 fda3 	bl	8009480 <lwip_htons>
 801293a:	4603      	mov	r3, r0
 801293c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012940:	2b00      	cmp	r3, #0
 8012942:	d006      	beq.n	8012952 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012946:	3308      	adds	r3, #8
 8012948:	2214      	movs	r2, #20
 801294a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801294c:	4618      	mov	r0, r3
 801294e:	f000 fc8f 	bl	8013270 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012954:	88db      	ldrh	r3, [r3, #6]
 8012956:	b29b      	uxth	r3, r3
 8012958:	f003 0320 	and.w	r3, r3, #32
 801295c:	2b00      	cmp	r3, #0
 801295e:	bf0c      	ite	eq
 8012960:	2301      	moveq	r3, #1
 8012962:	2300      	movne	r3, #0
 8012964:	b2db      	uxtb	r3, r3
 8012966:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012968:	69fb      	ldr	r3, [r7, #28]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d00e      	beq.n	801298c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801296e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012972:	4413      	add	r3, r2
 8012974:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012976:	8b7a      	ldrh	r2, [r7, #26]
 8012978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801297a:	429a      	cmp	r2, r3
 801297c:	f0c0 80a0 	bcc.w	8012ac0 <ip4_reass+0x2ac>
 8012980:	8b7b      	ldrh	r3, [r7, #26]
 8012982:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012986:	4293      	cmp	r3, r2
 8012988:	f200 809a 	bhi.w	8012ac0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801298c:	69fa      	ldr	r2, [r7, #28]
 801298e:	6879      	ldr	r1, [r7, #4]
 8012990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012992:	f7ff fdd5 	bl	8012540 <ip_reass_chain_frag_into_datagram_and_validate>
 8012996:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801299e:	f000 8091 	beq.w	8012ac4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80129a2:	4b5b      	ldr	r3, [pc, #364]	; (8012b10 <ip4_reass+0x2fc>)
 80129a4:	881a      	ldrh	r2, [r3, #0]
 80129a6:	8c3b      	ldrh	r3, [r7, #32]
 80129a8:	4413      	add	r3, r2
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	4b58      	ldr	r3, [pc, #352]	; (8012b10 <ip4_reass+0x2fc>)
 80129ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d00d      	beq.n	80129d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80129b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80129b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129ba:	4413      	add	r3, r2
 80129bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80129be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c0:	8a7a      	ldrh	r2, [r7, #18]
 80129c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80129c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c6:	7f9b      	ldrb	r3, [r3, #30]
 80129c8:	f043 0301 	orr.w	r3, r3, #1
 80129cc:	b2da      	uxtb	r2, r3
 80129ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d171      	bne.n	8012abc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80129d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129da:	8b9b      	ldrh	r3, [r3, #28]
 80129dc:	3314      	adds	r3, #20
 80129de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80129e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80129ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80129f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f4:	3308      	adds	r3, #8
 80129f6:	2214      	movs	r2, #20
 80129f8:	4619      	mov	r1, r3
 80129fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129fc:	f000 fc38 	bl	8013270 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012a00:	8a3b      	ldrh	r3, [r7, #16]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7f6 fd3c 	bl	8009480 <lwip_htons>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a12:	2200      	movs	r2, #0
 8012a14:	719a      	strb	r2, [r3, #6]
 8012a16:	2200      	movs	r2, #0
 8012a18:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	729a      	strb	r2, [r3, #10]
 8012a20:	2200      	movs	r2, #0
 8012a22:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012a2a:	e00d      	b.n	8012a48 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012a32:	2114      	movs	r1, #20
 8012a34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012a36:	f7f8 f88b 	bl	800ab50 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012a3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f7f8 f9db 	bl	800adf8 <pbuf_cat>
      r = iprh->next_pbuf;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d1ee      	bne.n	8012a2c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012a4e:	4b31      	ldr	r3, [pc, #196]	; (8012b14 <ip4_reass+0x300>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d102      	bne.n	8012a5e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a5c:	e010      	b.n	8012a80 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012a5e:	4b2d      	ldr	r3, [pc, #180]	; (8012b14 <ip4_reass+0x300>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a64:	e007      	b.n	8012a76 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d006      	beq.n	8012a7e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1f4      	bne.n	8012a66 <ip4_reass+0x252>
 8012a7c:	e000      	b.n	8012a80 <ip4_reass+0x26c>
          break;
 8012a7e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a84:	f7ff fd2e 	bl	80124e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7f8 f975 	bl	800ad78 <pbuf_clen>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012a92:	4b1f      	ldr	r3, [pc, #124]	; (8012b10 <ip4_reass+0x2fc>)
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	8c3a      	ldrh	r2, [r7, #32]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d906      	bls.n	8012aaa <ip4_reass+0x296>
 8012a9c:	4b1e      	ldr	r3, [pc, #120]	; (8012b18 <ip4_reass+0x304>)
 8012a9e:	f240 229b 	movw	r2, #667	; 0x29b
 8012aa2:	491e      	ldr	r1, [pc, #120]	; (8012b1c <ip4_reass+0x308>)
 8012aa4:	481e      	ldr	r0, [pc, #120]	; (8012b20 <ip4_reass+0x30c>)
 8012aa6:	f000 fbf9 	bl	801329c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012aaa:	4b19      	ldr	r3, [pc, #100]	; (8012b10 <ip4_reass+0x2fc>)
 8012aac:	881a      	ldrh	r2, [r3, #0]
 8012aae:	8c3b      	ldrh	r3, [r7, #32]
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	4b16      	ldr	r3, [pc, #88]	; (8012b10 <ip4_reass+0x2fc>)
 8012ab6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	e03c      	b.n	8012b36 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012abc:	2300      	movs	r3, #0
 8012abe:	e03a      	b.n	8012b36 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012ac0:	bf00      	nop
 8012ac2:	e000      	b.n	8012ac6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012ac4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d106      	bne.n	8012ada <ip4_reass+0x2c6>
 8012acc:	4b12      	ldr	r3, [pc, #72]	; (8012b18 <ip4_reass+0x304>)
 8012ace:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012ad2:	4914      	ldr	r1, [pc, #80]	; (8012b24 <ip4_reass+0x310>)
 8012ad4:	4812      	ldr	r0, [pc, #72]	; (8012b20 <ip4_reass+0x30c>)
 8012ad6:	f000 fbe1 	bl	801329c <iprintf>
  if (ipr->p == NULL) {
 8012ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d124      	bne.n	8012b2c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012ae2:	4b0c      	ldr	r3, [pc, #48]	; (8012b14 <ip4_reass+0x300>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d006      	beq.n	8012afa <ip4_reass+0x2e6>
 8012aec:	4b0a      	ldr	r3, [pc, #40]	; (8012b18 <ip4_reass+0x304>)
 8012aee:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012af2:	490d      	ldr	r1, [pc, #52]	; (8012b28 <ip4_reass+0x314>)
 8012af4:	480a      	ldr	r0, [pc, #40]	; (8012b20 <ip4_reass+0x30c>)
 8012af6:	f000 fbd1 	bl	801329c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012afa:	2100      	movs	r1, #0
 8012afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012afe:	f7ff fcf1 	bl	80124e4 <ip_reass_dequeue_datagram>
 8012b02:	e014      	b.n	8012b2e <ip4_reass+0x31a>
    goto nullreturn;
 8012b04:	bf00      	nop
 8012b06:	e012      	b.n	8012b2e <ip4_reass+0x31a>
    goto nullreturn;
 8012b08:	bf00      	nop
 8012b0a:	e010      	b.n	8012b2e <ip4_reass+0x31a>
      goto nullreturn;
 8012b0c:	bf00      	nop
 8012b0e:	e00e      	b.n	8012b2e <ip4_reass+0x31a>
 8012b10:	2400515c 	.word	0x2400515c
 8012b14:	24005158 	.word	0x24005158
 8012b18:	08016b3c 	.word	0x08016b3c
 8012b1c:	08016cac 	.word	0x08016cac
 8012b20:	08016b84 	.word	0x08016b84
 8012b24:	08016cc8 	.word	0x08016cc8
 8012b28:	08016cd4 	.word	0x08016cd4
  }

nullreturn:
 8012b2c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7f8 f894 	bl	800ac5c <pbuf_free>
  return NULL;
 8012b34:	2300      	movs	r3, #0
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3738      	adds	r7, #56	; 0x38
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop

08012b40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012b44:	2005      	movs	r0, #5
 8012b46:	f7f7 f96f 	bl	8009e28 <memp_malloc>
 8012b4a:	4603      	mov	r3, r0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d106      	bne.n	8012b6c <ip_frag_free_pbuf_custom_ref+0x1c>
 8012b5e:	4b07      	ldr	r3, [pc, #28]	; (8012b7c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012b60:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012b64:	4906      	ldr	r1, [pc, #24]	; (8012b80 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012b66:	4807      	ldr	r0, [pc, #28]	; (8012b84 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012b68:	f000 fb98 	bl	801329c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012b6c:	6879      	ldr	r1, [r7, #4]
 8012b6e:	2005      	movs	r0, #5
 8012b70:	f7f7 f9d0 	bl	8009f14 <memp_free>
}
 8012b74:	bf00      	nop
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	08016b3c 	.word	0x08016b3c
 8012b80:	08016cf4 	.word	0x08016cf4
 8012b84:	08016b84 	.word	0x08016b84

08012b88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d106      	bne.n	8012ba8 <ipfrag_free_pbuf_custom+0x20>
 8012b9a:	4b11      	ldr	r3, [pc, #68]	; (8012be0 <ipfrag_free_pbuf_custom+0x58>)
 8012b9c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012ba0:	4910      	ldr	r1, [pc, #64]	; (8012be4 <ipfrag_free_pbuf_custom+0x5c>)
 8012ba2:	4811      	ldr	r0, [pc, #68]	; (8012be8 <ipfrag_free_pbuf_custom+0x60>)
 8012ba4:	f000 fb7a 	bl	801329c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d006      	beq.n	8012bbe <ipfrag_free_pbuf_custom+0x36>
 8012bb0:	4b0b      	ldr	r3, [pc, #44]	; (8012be0 <ipfrag_free_pbuf_custom+0x58>)
 8012bb2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012bb6:	490d      	ldr	r1, [pc, #52]	; (8012bec <ipfrag_free_pbuf_custom+0x64>)
 8012bb8:	480b      	ldr	r0, [pc, #44]	; (8012be8 <ipfrag_free_pbuf_custom+0x60>)
 8012bba:	f000 fb6f 	bl	801329c <iprintf>
  if (pcr->original != NULL) {
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	695b      	ldr	r3, [r3, #20]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d004      	beq.n	8012bd0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	695b      	ldr	r3, [r3, #20]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7f8 f846 	bl	800ac5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012bd0:	68f8      	ldr	r0, [r7, #12]
 8012bd2:	f7ff ffbd 	bl	8012b50 <ip_frag_free_pbuf_custom_ref>
}
 8012bd6:	bf00      	nop
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	08016b3c 	.word	0x08016b3c
 8012be4:	08016d00 	.word	0x08016d00
 8012be8:	08016b84 	.word	0x08016b84
 8012bec:	08016d0c 	.word	0x08016d0c

08012bf0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b094      	sub	sp, #80	; 0x50
 8012bf4:	af02      	add	r7, sp, #8
 8012bf6:	60f8      	str	r0, [r7, #12]
 8012bf8:	60b9      	str	r1, [r7, #8]
 8012bfa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012c06:	3b14      	subs	r3, #20
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	da00      	bge.n	8012c0e <ip4_frag+0x1e>
 8012c0c:	3307      	adds	r3, #7
 8012c0e:	10db      	asrs	r3, r3, #3
 8012c10:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012c12:	2314      	movs	r3, #20
 8012c14:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	f003 030f 	and.w	r3, r3, #15
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	b2db      	uxtb	r3, r3
 8012c2e:	2b14      	cmp	r3, #20
 8012c30:	d002      	beq.n	8012c38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012c32:	f06f 0305 	mvn.w	r3, #5
 8012c36:	e110      	b.n	8012e5a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	895b      	ldrh	r3, [r3, #10]
 8012c3c:	2b13      	cmp	r3, #19
 8012c3e:	d809      	bhi.n	8012c54 <ip4_frag+0x64>
 8012c40:	4b88      	ldr	r3, [pc, #544]	; (8012e64 <ip4_frag+0x274>)
 8012c42:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012c46:	4988      	ldr	r1, [pc, #544]	; (8012e68 <ip4_frag+0x278>)
 8012c48:	4888      	ldr	r0, [pc, #544]	; (8012e6c <ip4_frag+0x27c>)
 8012c4a:	f000 fb27 	bl	801329c <iprintf>
 8012c4e:	f06f 0305 	mvn.w	r3, #5
 8012c52:	e102      	b.n	8012e5a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c56:	88db      	ldrh	r3, [r3, #6]
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7f6 fc10 	bl	8009480 <lwip_htons>
 8012c60:	4603      	mov	r3, r0
 8012c62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012c64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012c6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012c74:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	891b      	ldrh	r3, [r3, #8]
 8012c7a:	3b14      	subs	r3, #20
 8012c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012c80:	e0e1      	b.n	8012e46 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012c82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c84:	00db      	lsls	r3, r3, #3
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	bf28      	it	cs
 8012c90:	4613      	movcs	r3, r2
 8012c92:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012c94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c98:	2114      	movs	r1, #20
 8012c9a:	200e      	movs	r0, #14
 8012c9c:	f7f7 fcfa 	bl	800a694 <pbuf_alloc>
 8012ca0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f000 80d5 	beq.w	8012e54 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	895b      	ldrh	r3, [r3, #10]
 8012cae:	2b13      	cmp	r3, #19
 8012cb0:	d806      	bhi.n	8012cc0 <ip4_frag+0xd0>
 8012cb2:	4b6c      	ldr	r3, [pc, #432]	; (8012e64 <ip4_frag+0x274>)
 8012cb4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012cb8:	496d      	ldr	r1, [pc, #436]	; (8012e70 <ip4_frag+0x280>)
 8012cba:	486c      	ldr	r0, [pc, #432]	; (8012e6c <ip4_frag+0x27c>)
 8012cbc:	f000 faee 	bl	801329c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	2214      	movs	r2, #20
 8012cc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f000 fad1 	bl	8013270 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012cd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012cd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012cda:	e064      	b.n	8012da6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	895a      	ldrh	r2, [r3, #10]
 8012ce0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	895b      	ldrh	r3, [r3, #10]
 8012cea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d906      	bls.n	8012cfe <ip4_frag+0x10e>
 8012cf0:	4b5c      	ldr	r3, [pc, #368]	; (8012e64 <ip4_frag+0x274>)
 8012cf2:	f240 322d 	movw	r2, #813	; 0x32d
 8012cf6:	495f      	ldr	r1, [pc, #380]	; (8012e74 <ip4_frag+0x284>)
 8012cf8:	485c      	ldr	r0, [pc, #368]	; (8012e6c <ip4_frag+0x27c>)
 8012cfa:	f000 facf 	bl	801329c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012cfe:	8bfa      	ldrh	r2, [r7, #30]
 8012d00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d04:	4293      	cmp	r3, r2
 8012d06:	bf28      	it	cs
 8012d08:	4613      	movcs	r3, r2
 8012d0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012d0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d105      	bne.n	8012d22 <ip4_frag+0x132>
        poff = 0;
 8012d16:	2300      	movs	r3, #0
 8012d18:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	60fb      	str	r3, [r7, #12]
        continue;
 8012d20:	e041      	b.n	8012da6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012d22:	f7ff ff0d 	bl	8012b40 <ip_frag_alloc_pbuf_custom_ref>
 8012d26:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d103      	bne.n	8012d36 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d30:	f7f7 ff94 	bl	800ac5c <pbuf_free>
        goto memerr;
 8012d34:	e08f      	b.n	8012e56 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012d36:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012d3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d3e:	4413      	add	r3, r2
 8012d40:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012d44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012d48:	9201      	str	r2, [sp, #4]
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2241      	movs	r2, #65	; 0x41
 8012d50:	2000      	movs	r0, #0
 8012d52:	f7f7 fdc9 	bl	800a8e8 <pbuf_alloced_custom>
 8012d56:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d106      	bne.n	8012d6c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012d5e:	69b8      	ldr	r0, [r7, #24]
 8012d60:	f7ff fef6 	bl	8012b50 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d66:	f7f7 ff79 	bl	800ac5c <pbuf_free>
        goto memerr;
 8012d6a:	e074      	b.n	8012e56 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f7f8 f81b 	bl	800ada8 <pbuf_ref>
      pcr->original = p;
 8012d72:	69bb      	ldr	r3, [r7, #24]
 8012d74:	68fa      	ldr	r2, [r7, #12]
 8012d76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	4a3f      	ldr	r2, [pc, #252]	; (8012e78 <ip4_frag+0x288>)
 8012d7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012d7e:	6979      	ldr	r1, [r7, #20]
 8012d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d82:	f7f8 f839 	bl	800adf8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012d86:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012d8e:	1ad3      	subs	r3, r2, r3
 8012d90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012d94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d004      	beq.n	8012da6 <ip4_frag+0x1b6>
        poff = 0;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012da6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d196      	bne.n	8012cdc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012dae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012db0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012db4:	4413      	add	r3, r2
 8012db6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012dbc:	f1a3 0213 	sub.w	r2, r3, #19
 8012dc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	bfcc      	ite	gt
 8012dc8:	2301      	movgt	r3, #1
 8012dca:	2300      	movle	r3, #0
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012dd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012dd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012dda:	6a3b      	ldr	r3, [r7, #32]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <ip4_frag+0x1f6>
 8012de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d003      	beq.n	8012dee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012de6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012dec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012dee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7f6 fb45 	bl	8009480 <lwip_htons>
 8012df6:	4603      	mov	r3, r0
 8012df8:	461a      	mov	r2, r3
 8012dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012dfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e00:	3314      	adds	r3, #20
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f6 fb3b 	bl	8009480 <lwip_htons>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e10:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e14:	2200      	movs	r2, #0
 8012e16:	729a      	strb	r2, [r3, #10]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	695b      	ldr	r3, [r3, #20]
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e24:	68b8      	ldr	r0, [r7, #8]
 8012e26:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e2a:	f7f7 ff17 	bl	800ac5c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012e2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e34:	1ad3      	subs	r3, r2, r3
 8012e36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012e3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012e3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e40:	4413      	add	r3, r2
 8012e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f47f af19 	bne.w	8012c82 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012e50:	2300      	movs	r3, #0
 8012e52:	e002      	b.n	8012e5a <ip4_frag+0x26a>
      goto memerr;
 8012e54:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3748      	adds	r7, #72	; 0x48
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	08016b3c 	.word	0x08016b3c
 8012e68:	08016d18 	.word	0x08016d18
 8012e6c:	08016b84 	.word	0x08016b84
 8012e70:	08016d34 	.word	0x08016d34
 8012e74:	08016d54 	.word	0x08016d54
 8012e78:	08012b89 	.word	0x08012b89

08012e7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012e86:	230e      	movs	r3, #14
 8012e88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	895b      	ldrh	r3, [r3, #10]
 8012e8e:	2b0e      	cmp	r3, #14
 8012e90:	d96e      	bls.n	8012f70 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	7bdb      	ldrb	r3, [r3, #15]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d106      	bne.n	8012ea8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	b2da      	uxtb	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	7b1a      	ldrb	r2, [r3, #12]
 8012eb2:	7b5b      	ldrb	r3, [r3, #13]
 8012eb4:	021b      	lsls	r3, r3, #8
 8012eb6:	4313      	orrs	r3, r2
 8012eb8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	f003 0301 	and.w	r3, r3, #1
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d023      	beq.n	8012f0e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	d10f      	bne.n	8012eee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	785b      	ldrb	r3, [r3, #1]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d11b      	bne.n	8012f0e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012eda:	2b5e      	cmp	r3, #94	; 0x5e
 8012edc:	d117      	bne.n	8012f0e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	7b5b      	ldrb	r3, [r3, #13]
 8012ee2:	f043 0310 	orr.w	r3, r3, #16
 8012ee6:	b2da      	uxtb	r2, r3
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	735a      	strb	r2, [r3, #13]
 8012eec:	e00f      	b.n	8012f0e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	2206      	movs	r2, #6
 8012ef2:	4928      	ldr	r1, [pc, #160]	; (8012f94 <ethernet_input+0x118>)
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 f9ad 	bl	8013254 <memcmp>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d106      	bne.n	8012f0e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	7b5b      	ldrb	r3, [r3, #13]
 8012f04:	f043 0308 	orr.w	r3, r3, #8
 8012f08:	b2da      	uxtb	r2, r3
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012f0e:	89fb      	ldrh	r3, [r7, #14]
 8012f10:	2b08      	cmp	r3, #8
 8012f12:	d003      	beq.n	8012f1c <ethernet_input+0xa0>
 8012f14:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012f18:	d014      	beq.n	8012f44 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012f1a:	e032      	b.n	8012f82 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f22:	f003 0308 	and.w	r3, r3, #8
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d024      	beq.n	8012f74 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012f2a:	8afb      	ldrh	r3, [r7, #22]
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7f7 fe0e 	bl	800ab50 <pbuf_remove_header>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d11e      	bne.n	8012f78 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012f3a:	6839      	ldr	r1, [r7, #0]
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f7fe ff27 	bl	8011d90 <ip4_input>
      break;
 8012f42:	e013      	b.n	8012f6c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f4a:	f003 0308 	and.w	r3, r3, #8
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d014      	beq.n	8012f7c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012f52:	8afb      	ldrh	r3, [r7, #22]
 8012f54:	4619      	mov	r1, r3
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f7f7 fdfa 	bl	800ab50 <pbuf_remove_header>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d10e      	bne.n	8012f80 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012f62:	6839      	ldr	r1, [r7, #0]
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7fe f8c7 	bl	80110f8 <etharp_input>
      break;
 8012f6a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	e00c      	b.n	8012f8a <ethernet_input+0x10e>
    goto free_and_return;
 8012f70:	bf00      	nop
 8012f72:	e006      	b.n	8012f82 <ethernet_input+0x106>
        goto free_and_return;
 8012f74:	bf00      	nop
 8012f76:	e004      	b.n	8012f82 <ethernet_input+0x106>
        goto free_and_return;
 8012f78:	bf00      	nop
 8012f7a:	e002      	b.n	8012f82 <ethernet_input+0x106>
        goto free_and_return;
 8012f7c:	bf00      	nop
 8012f7e:	e000      	b.n	8012f82 <ethernet_input+0x106>
        goto free_and_return;
 8012f80:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7f7 fe6a 	bl	800ac5c <pbuf_free>
  return ERR_OK;
 8012f88:	2300      	movs	r3, #0
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3718      	adds	r7, #24
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	08016f4c 	.word	0x08016f4c

08012f98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b086      	sub	sp, #24
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
 8012fa4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012fa6:	8c3b      	ldrh	r3, [r7, #32]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7f6 fa69 	bl	8009480 <lwip_htons>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012fb2:	210e      	movs	r1, #14
 8012fb4:	68b8      	ldr	r0, [r7, #8]
 8012fb6:	f7f7 fdbb 	bl	800ab30 <pbuf_add_header>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d125      	bne.n	801300c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	8afa      	ldrh	r2, [r7, #22]
 8012fca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	2206      	movs	r2, #6
 8012fd0:	6839      	ldr	r1, [r7, #0]
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f000 f94c 	bl	8013270 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	3306      	adds	r3, #6
 8012fdc:	2206      	movs	r2, #6
 8012fde:	6879      	ldr	r1, [r7, #4]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f000 f945 	bl	8013270 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012fec:	2b06      	cmp	r3, #6
 8012fee:	d006      	beq.n	8012ffe <ethernet_output+0x66>
 8012ff0:	4b0a      	ldr	r3, [pc, #40]	; (801301c <ethernet_output+0x84>)
 8012ff2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012ff6:	490a      	ldr	r1, [pc, #40]	; (8013020 <ethernet_output+0x88>)
 8012ff8:	480a      	ldr	r0, [pc, #40]	; (8013024 <ethernet_output+0x8c>)
 8012ffa:	f000 f94f 	bl	801329c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	699b      	ldr	r3, [r3, #24]
 8013002:	68b9      	ldr	r1, [r7, #8]
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	4798      	blx	r3
 8013008:	4603      	mov	r3, r0
 801300a:	e002      	b.n	8013012 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801300c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801300e:	f06f 0301 	mvn.w	r3, #1
}
 8013012:	4618      	mov	r0, r3
 8013014:	3718      	adds	r7, #24
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	08016d64 	.word	0x08016d64
 8013020:	08016d9c 	.word	0x08016d9c
 8013024:	08016dd0 	.word	0x08016dd0

08013028 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	2200      	movs	r2, #0
 8013036:	2104      	movs	r1, #4
 8013038:	4618      	mov	r0, r3
 801303a:	f7f2 fdfd 	bl	8005c38 <osMessageQueueNew>
 801303e:	4602      	mov	r2, r0
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d102      	bne.n	8013052 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801304c:	f04f 33ff 	mov.w	r3, #4294967295
 8013050:	e000      	b.n	8013054 <sys_mbox_new+0x2c>

  return ERR_OK;
 8013052:	2300      	movs	r3, #0
}
 8013054:	4618      	mov	r0, r3
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6818      	ldr	r0, [r3, #0]
 801306a:	4639      	mov	r1, r7
 801306c:	2300      	movs	r3, #0
 801306e:	2200      	movs	r2, #0
 8013070:	f7f2 fe56 	bl	8005d20 <osMessageQueuePut>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d102      	bne.n	8013080 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801307a:	2300      	movs	r3, #0
 801307c:	73fb      	strb	r3, [r7, #15]
 801307e:	e001      	b.n	8013084 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013080:	23ff      	movs	r3, #255	; 0xff
 8013082:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013088:	4618      	mov	r0, r3
 801308a:	3710      	adds	r7, #16
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801309c:	f7f2 fadc 	bl	8005658 <osKernelGetTickCount>
 80130a0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d013      	beq.n	80130d0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	6818      	ldr	r0, [r3, #0]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2200      	movs	r2, #0
 80130b0:	68b9      	ldr	r1, [r7, #8]
 80130b2:	f7f2 fe95 	bl	8005de0 <osMessageQueueGet>
 80130b6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d105      	bne.n	80130ca <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80130be:	f7f2 facb 	bl	8005658 <osKernelGetTickCount>
 80130c2:	4602      	mov	r2, r0
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	1ad3      	subs	r3, r2, r3
 80130c8:	e00f      	b.n	80130ea <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80130ca:	f04f 33ff 	mov.w	r3, #4294967295
 80130ce:	e00c      	b.n	80130ea <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	6818      	ldr	r0, [r3, #0]
 80130d4:	f04f 33ff 	mov.w	r3, #4294967295
 80130d8:	2200      	movs	r2, #0
 80130da:	68b9      	ldr	r1, [r7, #8]
 80130dc:	f7f2 fe80 	bl	8005de0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80130e0:	f7f2 faba 	bl	8005658 <osKernelGetTickCount>
 80130e4:	4602      	mov	r2, r0
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80130f2:	b480      	push	{r7}
 80130f4:	b083      	sub	sp, #12
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d101      	bne.n	8013106 <sys_mbox_valid+0x14>
    return 0;
 8013102:	2300      	movs	r3, #0
 8013104:	e000      	b.n	8013108 <sys_mbox_valid+0x16>
  else
    return 1;
 8013106:	2301      	movs	r3, #1
}
 8013108:	4618      	mov	r0, r3
 801310a:	370c      	adds	r7, #12
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr

08013114 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013118:	2000      	movs	r0, #0
 801311a:	f7f2 fb60 	bl	80057de <osMutexNew>
 801311e:	4603      	mov	r3, r0
 8013120:	4a01      	ldr	r2, [pc, #4]	; (8013128 <sys_init+0x14>)
 8013122:	6013      	str	r3, [r2, #0]
#endif
}
 8013124:	bf00      	nop
 8013126:	bd80      	pop	{r7, pc}
 8013128:	240084f8 	.word	0x240084f8

0801312c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8013134:	2000      	movs	r0, #0
 8013136:	f7f2 fb52 	bl	80057de <osMutexNew>
 801313a:	4602      	mov	r2, r0
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d102      	bne.n	801314e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013148:	f04f 33ff 	mov.w	r3, #4294967295
 801314c:	e000      	b.n	8013150 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801314e:	2300      	movs	r3, #0
}
 8013150:	4618      	mov	r0, r3
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f04f 31ff 	mov.w	r1, #4294967295
 8013168:	4618      	mov	r0, r3
 801316a:	f7f2 fbbe 	bl	80058ea <osMutexAcquire>
#endif
}
 801316e:	bf00      	nop
 8013170:	3708      	adds	r7, #8
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}

08013176 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b082      	sub	sp, #8
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	4618      	mov	r0, r3
 8013184:	f7f2 fbfc 	bl	8005980 <osMutexRelease>
}
 8013188:	bf00      	nop
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b08e      	sub	sp, #56	; 0x38
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	607a      	str	r2, [r7, #4]
 801319c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801319e:	f107 0314 	add.w	r3, r7, #20
 80131a2:	2224      	movs	r2, #36	; 0x24
 80131a4:	2100      	movs	r1, #0
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 f870 	bl	801328c <memset>
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	617b      	str	r3, [r7, #20]
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80131b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80131b8:	f107 0314 	add.w	r3, r7, #20
 80131bc:	461a      	mov	r2, r3
 80131be:	6879      	ldr	r1, [r7, #4]
 80131c0:	68b8      	ldr	r0, [r7, #8]
 80131c2:	f7f2 fa5e 	bl	8005682 <osThreadNew>
 80131c6:	4603      	mov	r3, r0
#endif
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3738      	adds	r7, #56	; 0x38
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80131d4:	4b04      	ldr	r3, [pc, #16]	; (80131e8 <sys_arch_protect+0x18>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f04f 31ff 	mov.w	r1, #4294967295
 80131dc:	4618      	mov	r0, r3
 80131de:	f7f2 fb84 	bl	80058ea <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80131e2:	2301      	movs	r3, #1
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	240084f8 	.word	0x240084f8

080131ec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80131f4:	4b04      	ldr	r3, [pc, #16]	; (8013208 <sys_arch_unprotect+0x1c>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f2 fbc1 	bl	8005980 <osMutexRelease>
}
 80131fe:	bf00      	nop
 8013200:	3708      	adds	r7, #8
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	240084f8 	.word	0x240084f8

0801320c <__libc_init_array>:
 801320c:	b570      	push	{r4, r5, r6, lr}
 801320e:	4d0d      	ldr	r5, [pc, #52]	; (8013244 <__libc_init_array+0x38>)
 8013210:	4c0d      	ldr	r4, [pc, #52]	; (8013248 <__libc_init_array+0x3c>)
 8013212:	1b64      	subs	r4, r4, r5
 8013214:	10a4      	asrs	r4, r4, #2
 8013216:	2600      	movs	r6, #0
 8013218:	42a6      	cmp	r6, r4
 801321a:	d109      	bne.n	8013230 <__libc_init_array+0x24>
 801321c:	4d0b      	ldr	r5, [pc, #44]	; (801324c <__libc_init_array+0x40>)
 801321e:	4c0c      	ldr	r4, [pc, #48]	; (8013250 <__libc_init_array+0x44>)
 8013220:	f001 f856 	bl	80142d0 <_init>
 8013224:	1b64      	subs	r4, r4, r5
 8013226:	10a4      	asrs	r4, r4, #2
 8013228:	2600      	movs	r6, #0
 801322a:	42a6      	cmp	r6, r4
 801322c:	d105      	bne.n	801323a <__libc_init_array+0x2e>
 801322e:	bd70      	pop	{r4, r5, r6, pc}
 8013230:	f855 3b04 	ldr.w	r3, [r5], #4
 8013234:	4798      	blx	r3
 8013236:	3601      	adds	r6, #1
 8013238:	e7ee      	b.n	8013218 <__libc_init_array+0xc>
 801323a:	f855 3b04 	ldr.w	r3, [r5], #4
 801323e:	4798      	blx	r3
 8013240:	3601      	adds	r6, #1
 8013242:	e7f2      	b.n	801322a <__libc_init_array+0x1e>
 8013244:	080170a8 	.word	0x080170a8
 8013248:	080170a8 	.word	0x080170a8
 801324c:	080170a8 	.word	0x080170a8
 8013250:	080170ac 	.word	0x080170ac

08013254 <memcmp>:
 8013254:	b530      	push	{r4, r5, lr}
 8013256:	3901      	subs	r1, #1
 8013258:	2400      	movs	r4, #0
 801325a:	42a2      	cmp	r2, r4
 801325c:	d101      	bne.n	8013262 <memcmp+0xe>
 801325e:	2000      	movs	r0, #0
 8013260:	e005      	b.n	801326e <memcmp+0x1a>
 8013262:	5d03      	ldrb	r3, [r0, r4]
 8013264:	3401      	adds	r4, #1
 8013266:	5d0d      	ldrb	r5, [r1, r4]
 8013268:	42ab      	cmp	r3, r5
 801326a:	d0f6      	beq.n	801325a <memcmp+0x6>
 801326c:	1b58      	subs	r0, r3, r5
 801326e:	bd30      	pop	{r4, r5, pc}

08013270 <memcpy>:
 8013270:	440a      	add	r2, r1
 8013272:	4291      	cmp	r1, r2
 8013274:	f100 33ff 	add.w	r3, r0, #4294967295
 8013278:	d100      	bne.n	801327c <memcpy+0xc>
 801327a:	4770      	bx	lr
 801327c:	b510      	push	{r4, lr}
 801327e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013286:	4291      	cmp	r1, r2
 8013288:	d1f9      	bne.n	801327e <memcpy+0xe>
 801328a:	bd10      	pop	{r4, pc}

0801328c <memset>:
 801328c:	4402      	add	r2, r0
 801328e:	4603      	mov	r3, r0
 8013290:	4293      	cmp	r3, r2
 8013292:	d100      	bne.n	8013296 <memset+0xa>
 8013294:	4770      	bx	lr
 8013296:	f803 1b01 	strb.w	r1, [r3], #1
 801329a:	e7f9      	b.n	8013290 <memset+0x4>

0801329c <iprintf>:
 801329c:	b40f      	push	{r0, r1, r2, r3}
 801329e:	4b0a      	ldr	r3, [pc, #40]	; (80132c8 <iprintf+0x2c>)
 80132a0:	b513      	push	{r0, r1, r4, lr}
 80132a2:	681c      	ldr	r4, [r3, #0]
 80132a4:	b124      	cbz	r4, 80132b0 <iprintf+0x14>
 80132a6:	69a3      	ldr	r3, [r4, #24]
 80132a8:	b913      	cbnz	r3, 80132b0 <iprintf+0x14>
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 f8c4 	bl	8013438 <__sinit>
 80132b0:	ab05      	add	r3, sp, #20
 80132b2:	9a04      	ldr	r2, [sp, #16]
 80132b4:	68a1      	ldr	r1, [r4, #8]
 80132b6:	9301      	str	r3, [sp, #4]
 80132b8:	4620      	mov	r0, r4
 80132ba:	f000 fa4b 	bl	8013754 <_vfiprintf_r>
 80132be:	b002      	add	sp, #8
 80132c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132c4:	b004      	add	sp, #16
 80132c6:	4770      	bx	lr
 80132c8:	24000034 	.word	0x24000034

080132cc <rand>:
 80132cc:	4b17      	ldr	r3, [pc, #92]	; (801332c <rand+0x60>)
 80132ce:	b510      	push	{r4, lr}
 80132d0:	681c      	ldr	r4, [r3, #0]
 80132d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80132d4:	b9b3      	cbnz	r3, 8013304 <rand+0x38>
 80132d6:	2018      	movs	r0, #24
 80132d8:	f000 f960 	bl	801359c <malloc>
 80132dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80132de:	b928      	cbnz	r0, 80132ec <rand+0x20>
 80132e0:	4602      	mov	r2, r0
 80132e2:	4b13      	ldr	r3, [pc, #76]	; (8013330 <rand+0x64>)
 80132e4:	4813      	ldr	r0, [pc, #76]	; (8013334 <rand+0x68>)
 80132e6:	214e      	movs	r1, #78	; 0x4e
 80132e8:	f000 f830 	bl	801334c <__assert_func>
 80132ec:	4a12      	ldr	r2, [pc, #72]	; (8013338 <rand+0x6c>)
 80132ee:	4b13      	ldr	r3, [pc, #76]	; (801333c <rand+0x70>)
 80132f0:	e9c0 2300 	strd	r2, r3, [r0]
 80132f4:	4b12      	ldr	r3, [pc, #72]	; (8013340 <rand+0x74>)
 80132f6:	6083      	str	r3, [r0, #8]
 80132f8:	230b      	movs	r3, #11
 80132fa:	8183      	strh	r3, [r0, #12]
 80132fc:	2201      	movs	r2, #1
 80132fe:	2300      	movs	r3, #0
 8013300:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013304:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013306:	480f      	ldr	r0, [pc, #60]	; (8013344 <rand+0x78>)
 8013308:	690a      	ldr	r2, [r1, #16]
 801330a:	694b      	ldr	r3, [r1, #20]
 801330c:	4c0e      	ldr	r4, [pc, #56]	; (8013348 <rand+0x7c>)
 801330e:	4350      	muls	r0, r2
 8013310:	fb04 0003 	mla	r0, r4, r3, r0
 8013314:	fba2 3404 	umull	r3, r4, r2, r4
 8013318:	1c5a      	adds	r2, r3, #1
 801331a:	4404      	add	r4, r0
 801331c:	f144 0000 	adc.w	r0, r4, #0
 8013320:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013324:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013328:	bd10      	pop	{r4, pc}
 801332a:	bf00      	nop
 801332c:	24000034 	.word	0x24000034
 8013330:	08016f60 	.word	0x08016f60
 8013334:	08016f77 	.word	0x08016f77
 8013338:	abcd330e 	.word	0xabcd330e
 801333c:	e66d1234 	.word	0xe66d1234
 8013340:	0005deec 	.word	0x0005deec
 8013344:	5851f42d 	.word	0x5851f42d
 8013348:	4c957f2d 	.word	0x4c957f2d

0801334c <__assert_func>:
 801334c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801334e:	4614      	mov	r4, r2
 8013350:	461a      	mov	r2, r3
 8013352:	4b09      	ldr	r3, [pc, #36]	; (8013378 <__assert_func+0x2c>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	4605      	mov	r5, r0
 8013358:	68d8      	ldr	r0, [r3, #12]
 801335a:	b14c      	cbz	r4, 8013370 <__assert_func+0x24>
 801335c:	4b07      	ldr	r3, [pc, #28]	; (801337c <__assert_func+0x30>)
 801335e:	9100      	str	r1, [sp, #0]
 8013360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013364:	4906      	ldr	r1, [pc, #24]	; (8013380 <__assert_func+0x34>)
 8013366:	462b      	mov	r3, r5
 8013368:	f000 f8e4 	bl	8013534 <fiprintf>
 801336c:	f000 fddc 	bl	8013f28 <abort>
 8013370:	4b04      	ldr	r3, [pc, #16]	; (8013384 <__assert_func+0x38>)
 8013372:	461c      	mov	r4, r3
 8013374:	e7f3      	b.n	801335e <__assert_func+0x12>
 8013376:	bf00      	nop
 8013378:	24000034 	.word	0x24000034
 801337c:	08016fd6 	.word	0x08016fd6
 8013380:	08016fe3 	.word	0x08016fe3
 8013384:	08017011 	.word	0x08017011

08013388 <std>:
 8013388:	2300      	movs	r3, #0
 801338a:	b510      	push	{r4, lr}
 801338c:	4604      	mov	r4, r0
 801338e:	e9c0 3300 	strd	r3, r3, [r0]
 8013392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013396:	6083      	str	r3, [r0, #8]
 8013398:	8181      	strh	r1, [r0, #12]
 801339a:	6643      	str	r3, [r0, #100]	; 0x64
 801339c:	81c2      	strh	r2, [r0, #14]
 801339e:	6183      	str	r3, [r0, #24]
 80133a0:	4619      	mov	r1, r3
 80133a2:	2208      	movs	r2, #8
 80133a4:	305c      	adds	r0, #92	; 0x5c
 80133a6:	f7ff ff71 	bl	801328c <memset>
 80133aa:	4b05      	ldr	r3, [pc, #20]	; (80133c0 <std+0x38>)
 80133ac:	6263      	str	r3, [r4, #36]	; 0x24
 80133ae:	4b05      	ldr	r3, [pc, #20]	; (80133c4 <std+0x3c>)
 80133b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80133b2:	4b05      	ldr	r3, [pc, #20]	; (80133c8 <std+0x40>)
 80133b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80133b6:	4b05      	ldr	r3, [pc, #20]	; (80133cc <std+0x44>)
 80133b8:	6224      	str	r4, [r4, #32]
 80133ba:	6323      	str	r3, [r4, #48]	; 0x30
 80133bc:	bd10      	pop	{r4, pc}
 80133be:	bf00      	nop
 80133c0:	08013cfd 	.word	0x08013cfd
 80133c4:	08013d1f 	.word	0x08013d1f
 80133c8:	08013d57 	.word	0x08013d57
 80133cc:	08013d7b 	.word	0x08013d7b

080133d0 <_cleanup_r>:
 80133d0:	4901      	ldr	r1, [pc, #4]	; (80133d8 <_cleanup_r+0x8>)
 80133d2:	f000 b8c1 	b.w	8013558 <_fwalk_reent>
 80133d6:	bf00      	nop
 80133d8:	08014065 	.word	0x08014065

080133dc <__sfmoreglue>:
 80133dc:	b570      	push	{r4, r5, r6, lr}
 80133de:	1e4a      	subs	r2, r1, #1
 80133e0:	2568      	movs	r5, #104	; 0x68
 80133e2:	4355      	muls	r5, r2
 80133e4:	460e      	mov	r6, r1
 80133e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80133ea:	f000 f92f 	bl	801364c <_malloc_r>
 80133ee:	4604      	mov	r4, r0
 80133f0:	b140      	cbz	r0, 8013404 <__sfmoreglue+0x28>
 80133f2:	2100      	movs	r1, #0
 80133f4:	e9c0 1600 	strd	r1, r6, [r0]
 80133f8:	300c      	adds	r0, #12
 80133fa:	60a0      	str	r0, [r4, #8]
 80133fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013400:	f7ff ff44 	bl	801328c <memset>
 8013404:	4620      	mov	r0, r4
 8013406:	bd70      	pop	{r4, r5, r6, pc}

08013408 <__sfp_lock_acquire>:
 8013408:	4801      	ldr	r0, [pc, #4]	; (8013410 <__sfp_lock_acquire+0x8>)
 801340a:	f000 b8c5 	b.w	8013598 <__retarget_lock_acquire_recursive>
 801340e:	bf00      	nop
 8013410:	24008504 	.word	0x24008504

08013414 <__sfp_lock_release>:
 8013414:	4801      	ldr	r0, [pc, #4]	; (801341c <__sfp_lock_release+0x8>)
 8013416:	f000 b8c0 	b.w	801359a <__retarget_lock_release_recursive>
 801341a:	bf00      	nop
 801341c:	24008504 	.word	0x24008504

08013420 <__sinit_lock_acquire>:
 8013420:	4801      	ldr	r0, [pc, #4]	; (8013428 <__sinit_lock_acquire+0x8>)
 8013422:	f000 b8b9 	b.w	8013598 <__retarget_lock_acquire_recursive>
 8013426:	bf00      	nop
 8013428:	240084ff 	.word	0x240084ff

0801342c <__sinit_lock_release>:
 801342c:	4801      	ldr	r0, [pc, #4]	; (8013434 <__sinit_lock_release+0x8>)
 801342e:	f000 b8b4 	b.w	801359a <__retarget_lock_release_recursive>
 8013432:	bf00      	nop
 8013434:	240084ff 	.word	0x240084ff

08013438 <__sinit>:
 8013438:	b510      	push	{r4, lr}
 801343a:	4604      	mov	r4, r0
 801343c:	f7ff fff0 	bl	8013420 <__sinit_lock_acquire>
 8013440:	69a3      	ldr	r3, [r4, #24]
 8013442:	b11b      	cbz	r3, 801344c <__sinit+0x14>
 8013444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013448:	f7ff bff0 	b.w	801342c <__sinit_lock_release>
 801344c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013450:	6523      	str	r3, [r4, #80]	; 0x50
 8013452:	4b13      	ldr	r3, [pc, #76]	; (80134a0 <__sinit+0x68>)
 8013454:	4a13      	ldr	r2, [pc, #76]	; (80134a4 <__sinit+0x6c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	62a2      	str	r2, [r4, #40]	; 0x28
 801345a:	42a3      	cmp	r3, r4
 801345c:	bf04      	itt	eq
 801345e:	2301      	moveq	r3, #1
 8013460:	61a3      	streq	r3, [r4, #24]
 8013462:	4620      	mov	r0, r4
 8013464:	f000 f820 	bl	80134a8 <__sfp>
 8013468:	6060      	str	r0, [r4, #4]
 801346a:	4620      	mov	r0, r4
 801346c:	f000 f81c 	bl	80134a8 <__sfp>
 8013470:	60a0      	str	r0, [r4, #8]
 8013472:	4620      	mov	r0, r4
 8013474:	f000 f818 	bl	80134a8 <__sfp>
 8013478:	2200      	movs	r2, #0
 801347a:	60e0      	str	r0, [r4, #12]
 801347c:	2104      	movs	r1, #4
 801347e:	6860      	ldr	r0, [r4, #4]
 8013480:	f7ff ff82 	bl	8013388 <std>
 8013484:	68a0      	ldr	r0, [r4, #8]
 8013486:	2201      	movs	r2, #1
 8013488:	2109      	movs	r1, #9
 801348a:	f7ff ff7d 	bl	8013388 <std>
 801348e:	68e0      	ldr	r0, [r4, #12]
 8013490:	2202      	movs	r2, #2
 8013492:	2112      	movs	r1, #18
 8013494:	f7ff ff78 	bl	8013388 <std>
 8013498:	2301      	movs	r3, #1
 801349a:	61a3      	str	r3, [r4, #24]
 801349c:	e7d2      	b.n	8013444 <__sinit+0xc>
 801349e:	bf00      	nop
 80134a0:	08016f5c 	.word	0x08016f5c
 80134a4:	080133d1 	.word	0x080133d1

080134a8 <__sfp>:
 80134a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134aa:	4607      	mov	r7, r0
 80134ac:	f7ff ffac 	bl	8013408 <__sfp_lock_acquire>
 80134b0:	4b1e      	ldr	r3, [pc, #120]	; (801352c <__sfp+0x84>)
 80134b2:	681e      	ldr	r6, [r3, #0]
 80134b4:	69b3      	ldr	r3, [r6, #24]
 80134b6:	b913      	cbnz	r3, 80134be <__sfp+0x16>
 80134b8:	4630      	mov	r0, r6
 80134ba:	f7ff ffbd 	bl	8013438 <__sinit>
 80134be:	3648      	adds	r6, #72	; 0x48
 80134c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	d503      	bpl.n	80134d0 <__sfp+0x28>
 80134c8:	6833      	ldr	r3, [r6, #0]
 80134ca:	b30b      	cbz	r3, 8013510 <__sfp+0x68>
 80134cc:	6836      	ldr	r6, [r6, #0]
 80134ce:	e7f7      	b.n	80134c0 <__sfp+0x18>
 80134d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80134d4:	b9d5      	cbnz	r5, 801350c <__sfp+0x64>
 80134d6:	4b16      	ldr	r3, [pc, #88]	; (8013530 <__sfp+0x88>)
 80134d8:	60e3      	str	r3, [r4, #12]
 80134da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80134de:	6665      	str	r5, [r4, #100]	; 0x64
 80134e0:	f000 f859 	bl	8013596 <__retarget_lock_init_recursive>
 80134e4:	f7ff ff96 	bl	8013414 <__sfp_lock_release>
 80134e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80134ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80134f0:	6025      	str	r5, [r4, #0]
 80134f2:	61a5      	str	r5, [r4, #24]
 80134f4:	2208      	movs	r2, #8
 80134f6:	4629      	mov	r1, r5
 80134f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80134fc:	f7ff fec6 	bl	801328c <memset>
 8013500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013508:	4620      	mov	r0, r4
 801350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801350c:	3468      	adds	r4, #104	; 0x68
 801350e:	e7d9      	b.n	80134c4 <__sfp+0x1c>
 8013510:	2104      	movs	r1, #4
 8013512:	4638      	mov	r0, r7
 8013514:	f7ff ff62 	bl	80133dc <__sfmoreglue>
 8013518:	4604      	mov	r4, r0
 801351a:	6030      	str	r0, [r6, #0]
 801351c:	2800      	cmp	r0, #0
 801351e:	d1d5      	bne.n	80134cc <__sfp+0x24>
 8013520:	f7ff ff78 	bl	8013414 <__sfp_lock_release>
 8013524:	230c      	movs	r3, #12
 8013526:	603b      	str	r3, [r7, #0]
 8013528:	e7ee      	b.n	8013508 <__sfp+0x60>
 801352a:	bf00      	nop
 801352c:	08016f5c 	.word	0x08016f5c
 8013530:	ffff0001 	.word	0xffff0001

08013534 <fiprintf>:
 8013534:	b40e      	push	{r1, r2, r3}
 8013536:	b503      	push	{r0, r1, lr}
 8013538:	4601      	mov	r1, r0
 801353a:	ab03      	add	r3, sp, #12
 801353c:	4805      	ldr	r0, [pc, #20]	; (8013554 <fiprintf+0x20>)
 801353e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013542:	6800      	ldr	r0, [r0, #0]
 8013544:	9301      	str	r3, [sp, #4]
 8013546:	f000 f905 	bl	8013754 <_vfiprintf_r>
 801354a:	b002      	add	sp, #8
 801354c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013550:	b003      	add	sp, #12
 8013552:	4770      	bx	lr
 8013554:	24000034 	.word	0x24000034

08013558 <_fwalk_reent>:
 8013558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801355c:	4606      	mov	r6, r0
 801355e:	4688      	mov	r8, r1
 8013560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013564:	2700      	movs	r7, #0
 8013566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801356a:	f1b9 0901 	subs.w	r9, r9, #1
 801356e:	d505      	bpl.n	801357c <_fwalk_reent+0x24>
 8013570:	6824      	ldr	r4, [r4, #0]
 8013572:	2c00      	cmp	r4, #0
 8013574:	d1f7      	bne.n	8013566 <_fwalk_reent+0xe>
 8013576:	4638      	mov	r0, r7
 8013578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801357c:	89ab      	ldrh	r3, [r5, #12]
 801357e:	2b01      	cmp	r3, #1
 8013580:	d907      	bls.n	8013592 <_fwalk_reent+0x3a>
 8013582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013586:	3301      	adds	r3, #1
 8013588:	d003      	beq.n	8013592 <_fwalk_reent+0x3a>
 801358a:	4629      	mov	r1, r5
 801358c:	4630      	mov	r0, r6
 801358e:	47c0      	blx	r8
 8013590:	4307      	orrs	r7, r0
 8013592:	3568      	adds	r5, #104	; 0x68
 8013594:	e7e9      	b.n	801356a <_fwalk_reent+0x12>

08013596 <__retarget_lock_init_recursive>:
 8013596:	4770      	bx	lr

08013598 <__retarget_lock_acquire_recursive>:
 8013598:	4770      	bx	lr

0801359a <__retarget_lock_release_recursive>:
 801359a:	4770      	bx	lr

0801359c <malloc>:
 801359c:	4b02      	ldr	r3, [pc, #8]	; (80135a8 <malloc+0xc>)
 801359e:	4601      	mov	r1, r0
 80135a0:	6818      	ldr	r0, [r3, #0]
 80135a2:	f000 b853 	b.w	801364c <_malloc_r>
 80135a6:	bf00      	nop
 80135a8:	24000034 	.word	0x24000034

080135ac <_free_r>:
 80135ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135ae:	2900      	cmp	r1, #0
 80135b0:	d048      	beq.n	8013644 <_free_r+0x98>
 80135b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135b6:	9001      	str	r0, [sp, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	f1a1 0404 	sub.w	r4, r1, #4
 80135be:	bfb8      	it	lt
 80135c0:	18e4      	addlt	r4, r4, r3
 80135c2:	f000 fe01 	bl	80141c8 <__malloc_lock>
 80135c6:	4a20      	ldr	r2, [pc, #128]	; (8013648 <_free_r+0x9c>)
 80135c8:	9801      	ldr	r0, [sp, #4]
 80135ca:	6813      	ldr	r3, [r2, #0]
 80135cc:	4615      	mov	r5, r2
 80135ce:	b933      	cbnz	r3, 80135de <_free_r+0x32>
 80135d0:	6063      	str	r3, [r4, #4]
 80135d2:	6014      	str	r4, [r2, #0]
 80135d4:	b003      	add	sp, #12
 80135d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135da:	f000 bdfb 	b.w	80141d4 <__malloc_unlock>
 80135de:	42a3      	cmp	r3, r4
 80135e0:	d90b      	bls.n	80135fa <_free_r+0x4e>
 80135e2:	6821      	ldr	r1, [r4, #0]
 80135e4:	1862      	adds	r2, r4, r1
 80135e6:	4293      	cmp	r3, r2
 80135e8:	bf04      	itt	eq
 80135ea:	681a      	ldreq	r2, [r3, #0]
 80135ec:	685b      	ldreq	r3, [r3, #4]
 80135ee:	6063      	str	r3, [r4, #4]
 80135f0:	bf04      	itt	eq
 80135f2:	1852      	addeq	r2, r2, r1
 80135f4:	6022      	streq	r2, [r4, #0]
 80135f6:	602c      	str	r4, [r5, #0]
 80135f8:	e7ec      	b.n	80135d4 <_free_r+0x28>
 80135fa:	461a      	mov	r2, r3
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	b10b      	cbz	r3, 8013604 <_free_r+0x58>
 8013600:	42a3      	cmp	r3, r4
 8013602:	d9fa      	bls.n	80135fa <_free_r+0x4e>
 8013604:	6811      	ldr	r1, [r2, #0]
 8013606:	1855      	adds	r5, r2, r1
 8013608:	42a5      	cmp	r5, r4
 801360a:	d10b      	bne.n	8013624 <_free_r+0x78>
 801360c:	6824      	ldr	r4, [r4, #0]
 801360e:	4421      	add	r1, r4
 8013610:	1854      	adds	r4, r2, r1
 8013612:	42a3      	cmp	r3, r4
 8013614:	6011      	str	r1, [r2, #0]
 8013616:	d1dd      	bne.n	80135d4 <_free_r+0x28>
 8013618:	681c      	ldr	r4, [r3, #0]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	6053      	str	r3, [r2, #4]
 801361e:	4421      	add	r1, r4
 8013620:	6011      	str	r1, [r2, #0]
 8013622:	e7d7      	b.n	80135d4 <_free_r+0x28>
 8013624:	d902      	bls.n	801362c <_free_r+0x80>
 8013626:	230c      	movs	r3, #12
 8013628:	6003      	str	r3, [r0, #0]
 801362a:	e7d3      	b.n	80135d4 <_free_r+0x28>
 801362c:	6825      	ldr	r5, [r4, #0]
 801362e:	1961      	adds	r1, r4, r5
 8013630:	428b      	cmp	r3, r1
 8013632:	bf04      	itt	eq
 8013634:	6819      	ldreq	r1, [r3, #0]
 8013636:	685b      	ldreq	r3, [r3, #4]
 8013638:	6063      	str	r3, [r4, #4]
 801363a:	bf04      	itt	eq
 801363c:	1949      	addeq	r1, r1, r5
 801363e:	6021      	streq	r1, [r4, #0]
 8013640:	6054      	str	r4, [r2, #4]
 8013642:	e7c7      	b.n	80135d4 <_free_r+0x28>
 8013644:	b003      	add	sp, #12
 8013646:	bd30      	pop	{r4, r5, pc}
 8013648:	24005160 	.word	0x24005160

0801364c <_malloc_r>:
 801364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801364e:	1ccd      	adds	r5, r1, #3
 8013650:	f025 0503 	bic.w	r5, r5, #3
 8013654:	3508      	adds	r5, #8
 8013656:	2d0c      	cmp	r5, #12
 8013658:	bf38      	it	cc
 801365a:	250c      	movcc	r5, #12
 801365c:	2d00      	cmp	r5, #0
 801365e:	4606      	mov	r6, r0
 8013660:	db01      	blt.n	8013666 <_malloc_r+0x1a>
 8013662:	42a9      	cmp	r1, r5
 8013664:	d903      	bls.n	801366e <_malloc_r+0x22>
 8013666:	230c      	movs	r3, #12
 8013668:	6033      	str	r3, [r6, #0]
 801366a:	2000      	movs	r0, #0
 801366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801366e:	f000 fdab 	bl	80141c8 <__malloc_lock>
 8013672:	4921      	ldr	r1, [pc, #132]	; (80136f8 <_malloc_r+0xac>)
 8013674:	680a      	ldr	r2, [r1, #0]
 8013676:	4614      	mov	r4, r2
 8013678:	b99c      	cbnz	r4, 80136a2 <_malloc_r+0x56>
 801367a:	4f20      	ldr	r7, [pc, #128]	; (80136fc <_malloc_r+0xb0>)
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	b923      	cbnz	r3, 801368a <_malloc_r+0x3e>
 8013680:	4621      	mov	r1, r4
 8013682:	4630      	mov	r0, r6
 8013684:	f000 fb2a 	bl	8013cdc <_sbrk_r>
 8013688:	6038      	str	r0, [r7, #0]
 801368a:	4629      	mov	r1, r5
 801368c:	4630      	mov	r0, r6
 801368e:	f000 fb25 	bl	8013cdc <_sbrk_r>
 8013692:	1c43      	adds	r3, r0, #1
 8013694:	d123      	bne.n	80136de <_malloc_r+0x92>
 8013696:	230c      	movs	r3, #12
 8013698:	6033      	str	r3, [r6, #0]
 801369a:	4630      	mov	r0, r6
 801369c:	f000 fd9a 	bl	80141d4 <__malloc_unlock>
 80136a0:	e7e3      	b.n	801366a <_malloc_r+0x1e>
 80136a2:	6823      	ldr	r3, [r4, #0]
 80136a4:	1b5b      	subs	r3, r3, r5
 80136a6:	d417      	bmi.n	80136d8 <_malloc_r+0x8c>
 80136a8:	2b0b      	cmp	r3, #11
 80136aa:	d903      	bls.n	80136b4 <_malloc_r+0x68>
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	441c      	add	r4, r3
 80136b0:	6025      	str	r5, [r4, #0]
 80136b2:	e004      	b.n	80136be <_malloc_r+0x72>
 80136b4:	6863      	ldr	r3, [r4, #4]
 80136b6:	42a2      	cmp	r2, r4
 80136b8:	bf0c      	ite	eq
 80136ba:	600b      	streq	r3, [r1, #0]
 80136bc:	6053      	strne	r3, [r2, #4]
 80136be:	4630      	mov	r0, r6
 80136c0:	f000 fd88 	bl	80141d4 <__malloc_unlock>
 80136c4:	f104 000b 	add.w	r0, r4, #11
 80136c8:	1d23      	adds	r3, r4, #4
 80136ca:	f020 0007 	bic.w	r0, r0, #7
 80136ce:	1ac2      	subs	r2, r0, r3
 80136d0:	d0cc      	beq.n	801366c <_malloc_r+0x20>
 80136d2:	1a1b      	subs	r3, r3, r0
 80136d4:	50a3      	str	r3, [r4, r2]
 80136d6:	e7c9      	b.n	801366c <_malloc_r+0x20>
 80136d8:	4622      	mov	r2, r4
 80136da:	6864      	ldr	r4, [r4, #4]
 80136dc:	e7cc      	b.n	8013678 <_malloc_r+0x2c>
 80136de:	1cc4      	adds	r4, r0, #3
 80136e0:	f024 0403 	bic.w	r4, r4, #3
 80136e4:	42a0      	cmp	r0, r4
 80136e6:	d0e3      	beq.n	80136b0 <_malloc_r+0x64>
 80136e8:	1a21      	subs	r1, r4, r0
 80136ea:	4630      	mov	r0, r6
 80136ec:	f000 faf6 	bl	8013cdc <_sbrk_r>
 80136f0:	3001      	adds	r0, #1
 80136f2:	d1dd      	bne.n	80136b0 <_malloc_r+0x64>
 80136f4:	e7cf      	b.n	8013696 <_malloc_r+0x4a>
 80136f6:	bf00      	nop
 80136f8:	24005160 	.word	0x24005160
 80136fc:	24005164 	.word	0x24005164

08013700 <__sfputc_r>:
 8013700:	6893      	ldr	r3, [r2, #8]
 8013702:	3b01      	subs	r3, #1
 8013704:	2b00      	cmp	r3, #0
 8013706:	b410      	push	{r4}
 8013708:	6093      	str	r3, [r2, #8]
 801370a:	da08      	bge.n	801371e <__sfputc_r+0x1e>
 801370c:	6994      	ldr	r4, [r2, #24]
 801370e:	42a3      	cmp	r3, r4
 8013710:	db01      	blt.n	8013716 <__sfputc_r+0x16>
 8013712:	290a      	cmp	r1, #10
 8013714:	d103      	bne.n	801371e <__sfputc_r+0x1e>
 8013716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801371a:	f000 bb33 	b.w	8013d84 <__swbuf_r>
 801371e:	6813      	ldr	r3, [r2, #0]
 8013720:	1c58      	adds	r0, r3, #1
 8013722:	6010      	str	r0, [r2, #0]
 8013724:	7019      	strb	r1, [r3, #0]
 8013726:	4608      	mov	r0, r1
 8013728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801372c:	4770      	bx	lr

0801372e <__sfputs_r>:
 801372e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013730:	4606      	mov	r6, r0
 8013732:	460f      	mov	r7, r1
 8013734:	4614      	mov	r4, r2
 8013736:	18d5      	adds	r5, r2, r3
 8013738:	42ac      	cmp	r4, r5
 801373a:	d101      	bne.n	8013740 <__sfputs_r+0x12>
 801373c:	2000      	movs	r0, #0
 801373e:	e007      	b.n	8013750 <__sfputs_r+0x22>
 8013740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013744:	463a      	mov	r2, r7
 8013746:	4630      	mov	r0, r6
 8013748:	f7ff ffda 	bl	8013700 <__sfputc_r>
 801374c:	1c43      	adds	r3, r0, #1
 801374e:	d1f3      	bne.n	8013738 <__sfputs_r+0xa>
 8013750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013754 <_vfiprintf_r>:
 8013754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013758:	460d      	mov	r5, r1
 801375a:	b09d      	sub	sp, #116	; 0x74
 801375c:	4614      	mov	r4, r2
 801375e:	4698      	mov	r8, r3
 8013760:	4606      	mov	r6, r0
 8013762:	b118      	cbz	r0, 801376c <_vfiprintf_r+0x18>
 8013764:	6983      	ldr	r3, [r0, #24]
 8013766:	b90b      	cbnz	r3, 801376c <_vfiprintf_r+0x18>
 8013768:	f7ff fe66 	bl	8013438 <__sinit>
 801376c:	4b89      	ldr	r3, [pc, #548]	; (8013994 <_vfiprintf_r+0x240>)
 801376e:	429d      	cmp	r5, r3
 8013770:	d11b      	bne.n	80137aa <_vfiprintf_r+0x56>
 8013772:	6875      	ldr	r5, [r6, #4]
 8013774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013776:	07d9      	lsls	r1, r3, #31
 8013778:	d405      	bmi.n	8013786 <_vfiprintf_r+0x32>
 801377a:	89ab      	ldrh	r3, [r5, #12]
 801377c:	059a      	lsls	r2, r3, #22
 801377e:	d402      	bmi.n	8013786 <_vfiprintf_r+0x32>
 8013780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013782:	f7ff ff09 	bl	8013598 <__retarget_lock_acquire_recursive>
 8013786:	89ab      	ldrh	r3, [r5, #12]
 8013788:	071b      	lsls	r3, r3, #28
 801378a:	d501      	bpl.n	8013790 <_vfiprintf_r+0x3c>
 801378c:	692b      	ldr	r3, [r5, #16]
 801378e:	b9eb      	cbnz	r3, 80137cc <_vfiprintf_r+0x78>
 8013790:	4629      	mov	r1, r5
 8013792:	4630      	mov	r0, r6
 8013794:	f000 fb5a 	bl	8013e4c <__swsetup_r>
 8013798:	b1c0      	cbz	r0, 80137cc <_vfiprintf_r+0x78>
 801379a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801379c:	07dc      	lsls	r4, r3, #31
 801379e:	d50e      	bpl.n	80137be <_vfiprintf_r+0x6a>
 80137a0:	f04f 30ff 	mov.w	r0, #4294967295
 80137a4:	b01d      	add	sp, #116	; 0x74
 80137a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137aa:	4b7b      	ldr	r3, [pc, #492]	; (8013998 <_vfiprintf_r+0x244>)
 80137ac:	429d      	cmp	r5, r3
 80137ae:	d101      	bne.n	80137b4 <_vfiprintf_r+0x60>
 80137b0:	68b5      	ldr	r5, [r6, #8]
 80137b2:	e7df      	b.n	8013774 <_vfiprintf_r+0x20>
 80137b4:	4b79      	ldr	r3, [pc, #484]	; (801399c <_vfiprintf_r+0x248>)
 80137b6:	429d      	cmp	r5, r3
 80137b8:	bf08      	it	eq
 80137ba:	68f5      	ldreq	r5, [r6, #12]
 80137bc:	e7da      	b.n	8013774 <_vfiprintf_r+0x20>
 80137be:	89ab      	ldrh	r3, [r5, #12]
 80137c0:	0598      	lsls	r0, r3, #22
 80137c2:	d4ed      	bmi.n	80137a0 <_vfiprintf_r+0x4c>
 80137c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137c6:	f7ff fee8 	bl	801359a <__retarget_lock_release_recursive>
 80137ca:	e7e9      	b.n	80137a0 <_vfiprintf_r+0x4c>
 80137cc:	2300      	movs	r3, #0
 80137ce:	9309      	str	r3, [sp, #36]	; 0x24
 80137d0:	2320      	movs	r3, #32
 80137d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80137da:	2330      	movs	r3, #48	; 0x30
 80137dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80139a0 <_vfiprintf_r+0x24c>
 80137e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137e4:	f04f 0901 	mov.w	r9, #1
 80137e8:	4623      	mov	r3, r4
 80137ea:	469a      	mov	sl, r3
 80137ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137f0:	b10a      	cbz	r2, 80137f6 <_vfiprintf_r+0xa2>
 80137f2:	2a25      	cmp	r2, #37	; 0x25
 80137f4:	d1f9      	bne.n	80137ea <_vfiprintf_r+0x96>
 80137f6:	ebba 0b04 	subs.w	fp, sl, r4
 80137fa:	d00b      	beq.n	8013814 <_vfiprintf_r+0xc0>
 80137fc:	465b      	mov	r3, fp
 80137fe:	4622      	mov	r2, r4
 8013800:	4629      	mov	r1, r5
 8013802:	4630      	mov	r0, r6
 8013804:	f7ff ff93 	bl	801372e <__sfputs_r>
 8013808:	3001      	adds	r0, #1
 801380a:	f000 80aa 	beq.w	8013962 <_vfiprintf_r+0x20e>
 801380e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013810:	445a      	add	r2, fp
 8013812:	9209      	str	r2, [sp, #36]	; 0x24
 8013814:	f89a 3000 	ldrb.w	r3, [sl]
 8013818:	2b00      	cmp	r3, #0
 801381a:	f000 80a2 	beq.w	8013962 <_vfiprintf_r+0x20e>
 801381e:	2300      	movs	r3, #0
 8013820:	f04f 32ff 	mov.w	r2, #4294967295
 8013824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013828:	f10a 0a01 	add.w	sl, sl, #1
 801382c:	9304      	str	r3, [sp, #16]
 801382e:	9307      	str	r3, [sp, #28]
 8013830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013834:	931a      	str	r3, [sp, #104]	; 0x68
 8013836:	4654      	mov	r4, sl
 8013838:	2205      	movs	r2, #5
 801383a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801383e:	4858      	ldr	r0, [pc, #352]	; (80139a0 <_vfiprintf_r+0x24c>)
 8013840:	f7ec fd4e 	bl	80002e0 <memchr>
 8013844:	9a04      	ldr	r2, [sp, #16]
 8013846:	b9d8      	cbnz	r0, 8013880 <_vfiprintf_r+0x12c>
 8013848:	06d1      	lsls	r1, r2, #27
 801384a:	bf44      	itt	mi
 801384c:	2320      	movmi	r3, #32
 801384e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013852:	0713      	lsls	r3, r2, #28
 8013854:	bf44      	itt	mi
 8013856:	232b      	movmi	r3, #43	; 0x2b
 8013858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801385c:	f89a 3000 	ldrb.w	r3, [sl]
 8013860:	2b2a      	cmp	r3, #42	; 0x2a
 8013862:	d015      	beq.n	8013890 <_vfiprintf_r+0x13c>
 8013864:	9a07      	ldr	r2, [sp, #28]
 8013866:	4654      	mov	r4, sl
 8013868:	2000      	movs	r0, #0
 801386a:	f04f 0c0a 	mov.w	ip, #10
 801386e:	4621      	mov	r1, r4
 8013870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013874:	3b30      	subs	r3, #48	; 0x30
 8013876:	2b09      	cmp	r3, #9
 8013878:	d94e      	bls.n	8013918 <_vfiprintf_r+0x1c4>
 801387a:	b1b0      	cbz	r0, 80138aa <_vfiprintf_r+0x156>
 801387c:	9207      	str	r2, [sp, #28]
 801387e:	e014      	b.n	80138aa <_vfiprintf_r+0x156>
 8013880:	eba0 0308 	sub.w	r3, r0, r8
 8013884:	fa09 f303 	lsl.w	r3, r9, r3
 8013888:	4313      	orrs	r3, r2
 801388a:	9304      	str	r3, [sp, #16]
 801388c:	46a2      	mov	sl, r4
 801388e:	e7d2      	b.n	8013836 <_vfiprintf_r+0xe2>
 8013890:	9b03      	ldr	r3, [sp, #12]
 8013892:	1d19      	adds	r1, r3, #4
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	9103      	str	r1, [sp, #12]
 8013898:	2b00      	cmp	r3, #0
 801389a:	bfbb      	ittet	lt
 801389c:	425b      	neglt	r3, r3
 801389e:	f042 0202 	orrlt.w	r2, r2, #2
 80138a2:	9307      	strge	r3, [sp, #28]
 80138a4:	9307      	strlt	r3, [sp, #28]
 80138a6:	bfb8      	it	lt
 80138a8:	9204      	strlt	r2, [sp, #16]
 80138aa:	7823      	ldrb	r3, [r4, #0]
 80138ac:	2b2e      	cmp	r3, #46	; 0x2e
 80138ae:	d10c      	bne.n	80138ca <_vfiprintf_r+0x176>
 80138b0:	7863      	ldrb	r3, [r4, #1]
 80138b2:	2b2a      	cmp	r3, #42	; 0x2a
 80138b4:	d135      	bne.n	8013922 <_vfiprintf_r+0x1ce>
 80138b6:	9b03      	ldr	r3, [sp, #12]
 80138b8:	1d1a      	adds	r2, r3, #4
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	9203      	str	r2, [sp, #12]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	bfb8      	it	lt
 80138c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80138c6:	3402      	adds	r4, #2
 80138c8:	9305      	str	r3, [sp, #20]
 80138ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80139b0 <_vfiprintf_r+0x25c>
 80138ce:	7821      	ldrb	r1, [r4, #0]
 80138d0:	2203      	movs	r2, #3
 80138d2:	4650      	mov	r0, sl
 80138d4:	f7ec fd04 	bl	80002e0 <memchr>
 80138d8:	b140      	cbz	r0, 80138ec <_vfiprintf_r+0x198>
 80138da:	2340      	movs	r3, #64	; 0x40
 80138dc:	eba0 000a 	sub.w	r0, r0, sl
 80138e0:	fa03 f000 	lsl.w	r0, r3, r0
 80138e4:	9b04      	ldr	r3, [sp, #16]
 80138e6:	4303      	orrs	r3, r0
 80138e8:	3401      	adds	r4, #1
 80138ea:	9304      	str	r3, [sp, #16]
 80138ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138f0:	482c      	ldr	r0, [pc, #176]	; (80139a4 <_vfiprintf_r+0x250>)
 80138f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138f6:	2206      	movs	r2, #6
 80138f8:	f7ec fcf2 	bl	80002e0 <memchr>
 80138fc:	2800      	cmp	r0, #0
 80138fe:	d03f      	beq.n	8013980 <_vfiprintf_r+0x22c>
 8013900:	4b29      	ldr	r3, [pc, #164]	; (80139a8 <_vfiprintf_r+0x254>)
 8013902:	bb1b      	cbnz	r3, 801394c <_vfiprintf_r+0x1f8>
 8013904:	9b03      	ldr	r3, [sp, #12]
 8013906:	3307      	adds	r3, #7
 8013908:	f023 0307 	bic.w	r3, r3, #7
 801390c:	3308      	adds	r3, #8
 801390e:	9303      	str	r3, [sp, #12]
 8013910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013912:	443b      	add	r3, r7
 8013914:	9309      	str	r3, [sp, #36]	; 0x24
 8013916:	e767      	b.n	80137e8 <_vfiprintf_r+0x94>
 8013918:	fb0c 3202 	mla	r2, ip, r2, r3
 801391c:	460c      	mov	r4, r1
 801391e:	2001      	movs	r0, #1
 8013920:	e7a5      	b.n	801386e <_vfiprintf_r+0x11a>
 8013922:	2300      	movs	r3, #0
 8013924:	3401      	adds	r4, #1
 8013926:	9305      	str	r3, [sp, #20]
 8013928:	4619      	mov	r1, r3
 801392a:	f04f 0c0a 	mov.w	ip, #10
 801392e:	4620      	mov	r0, r4
 8013930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013934:	3a30      	subs	r2, #48	; 0x30
 8013936:	2a09      	cmp	r2, #9
 8013938:	d903      	bls.n	8013942 <_vfiprintf_r+0x1ee>
 801393a:	2b00      	cmp	r3, #0
 801393c:	d0c5      	beq.n	80138ca <_vfiprintf_r+0x176>
 801393e:	9105      	str	r1, [sp, #20]
 8013940:	e7c3      	b.n	80138ca <_vfiprintf_r+0x176>
 8013942:	fb0c 2101 	mla	r1, ip, r1, r2
 8013946:	4604      	mov	r4, r0
 8013948:	2301      	movs	r3, #1
 801394a:	e7f0      	b.n	801392e <_vfiprintf_r+0x1da>
 801394c:	ab03      	add	r3, sp, #12
 801394e:	9300      	str	r3, [sp, #0]
 8013950:	462a      	mov	r2, r5
 8013952:	4b16      	ldr	r3, [pc, #88]	; (80139ac <_vfiprintf_r+0x258>)
 8013954:	a904      	add	r1, sp, #16
 8013956:	4630      	mov	r0, r6
 8013958:	f3af 8000 	nop.w
 801395c:	4607      	mov	r7, r0
 801395e:	1c78      	adds	r0, r7, #1
 8013960:	d1d6      	bne.n	8013910 <_vfiprintf_r+0x1bc>
 8013962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013964:	07d9      	lsls	r1, r3, #31
 8013966:	d405      	bmi.n	8013974 <_vfiprintf_r+0x220>
 8013968:	89ab      	ldrh	r3, [r5, #12]
 801396a:	059a      	lsls	r2, r3, #22
 801396c:	d402      	bmi.n	8013974 <_vfiprintf_r+0x220>
 801396e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013970:	f7ff fe13 	bl	801359a <__retarget_lock_release_recursive>
 8013974:	89ab      	ldrh	r3, [r5, #12]
 8013976:	065b      	lsls	r3, r3, #25
 8013978:	f53f af12 	bmi.w	80137a0 <_vfiprintf_r+0x4c>
 801397c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801397e:	e711      	b.n	80137a4 <_vfiprintf_r+0x50>
 8013980:	ab03      	add	r3, sp, #12
 8013982:	9300      	str	r3, [sp, #0]
 8013984:	462a      	mov	r2, r5
 8013986:	4b09      	ldr	r3, [pc, #36]	; (80139ac <_vfiprintf_r+0x258>)
 8013988:	a904      	add	r1, sp, #16
 801398a:	4630      	mov	r0, r6
 801398c:	f000 f880 	bl	8013a90 <_printf_i>
 8013990:	e7e4      	b.n	801395c <_vfiprintf_r+0x208>
 8013992:	bf00      	nop
 8013994:	08017034 	.word	0x08017034
 8013998:	08017054 	.word	0x08017054
 801399c:	08017014 	.word	0x08017014
 80139a0:	08017074 	.word	0x08017074
 80139a4:	0801707e 	.word	0x0801707e
 80139a8:	00000000 	.word	0x00000000
 80139ac:	0801372f 	.word	0x0801372f
 80139b0:	0801707a 	.word	0x0801707a

080139b4 <_printf_common>:
 80139b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b8:	4616      	mov	r6, r2
 80139ba:	4699      	mov	r9, r3
 80139bc:	688a      	ldr	r2, [r1, #8]
 80139be:	690b      	ldr	r3, [r1, #16]
 80139c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80139c4:	4293      	cmp	r3, r2
 80139c6:	bfb8      	it	lt
 80139c8:	4613      	movlt	r3, r2
 80139ca:	6033      	str	r3, [r6, #0]
 80139cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80139d0:	4607      	mov	r7, r0
 80139d2:	460c      	mov	r4, r1
 80139d4:	b10a      	cbz	r2, 80139da <_printf_common+0x26>
 80139d6:	3301      	adds	r3, #1
 80139d8:	6033      	str	r3, [r6, #0]
 80139da:	6823      	ldr	r3, [r4, #0]
 80139dc:	0699      	lsls	r1, r3, #26
 80139de:	bf42      	ittt	mi
 80139e0:	6833      	ldrmi	r3, [r6, #0]
 80139e2:	3302      	addmi	r3, #2
 80139e4:	6033      	strmi	r3, [r6, #0]
 80139e6:	6825      	ldr	r5, [r4, #0]
 80139e8:	f015 0506 	ands.w	r5, r5, #6
 80139ec:	d106      	bne.n	80139fc <_printf_common+0x48>
 80139ee:	f104 0a19 	add.w	sl, r4, #25
 80139f2:	68e3      	ldr	r3, [r4, #12]
 80139f4:	6832      	ldr	r2, [r6, #0]
 80139f6:	1a9b      	subs	r3, r3, r2
 80139f8:	42ab      	cmp	r3, r5
 80139fa:	dc26      	bgt.n	8013a4a <_printf_common+0x96>
 80139fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013a00:	1e13      	subs	r3, r2, #0
 8013a02:	6822      	ldr	r2, [r4, #0]
 8013a04:	bf18      	it	ne
 8013a06:	2301      	movne	r3, #1
 8013a08:	0692      	lsls	r2, r2, #26
 8013a0a:	d42b      	bmi.n	8013a64 <_printf_common+0xb0>
 8013a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a10:	4649      	mov	r1, r9
 8013a12:	4638      	mov	r0, r7
 8013a14:	47c0      	blx	r8
 8013a16:	3001      	adds	r0, #1
 8013a18:	d01e      	beq.n	8013a58 <_printf_common+0xa4>
 8013a1a:	6823      	ldr	r3, [r4, #0]
 8013a1c:	68e5      	ldr	r5, [r4, #12]
 8013a1e:	6832      	ldr	r2, [r6, #0]
 8013a20:	f003 0306 	and.w	r3, r3, #6
 8013a24:	2b04      	cmp	r3, #4
 8013a26:	bf08      	it	eq
 8013a28:	1aad      	subeq	r5, r5, r2
 8013a2a:	68a3      	ldr	r3, [r4, #8]
 8013a2c:	6922      	ldr	r2, [r4, #16]
 8013a2e:	bf0c      	ite	eq
 8013a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a34:	2500      	movne	r5, #0
 8013a36:	4293      	cmp	r3, r2
 8013a38:	bfc4      	itt	gt
 8013a3a:	1a9b      	subgt	r3, r3, r2
 8013a3c:	18ed      	addgt	r5, r5, r3
 8013a3e:	2600      	movs	r6, #0
 8013a40:	341a      	adds	r4, #26
 8013a42:	42b5      	cmp	r5, r6
 8013a44:	d11a      	bne.n	8013a7c <_printf_common+0xc8>
 8013a46:	2000      	movs	r0, #0
 8013a48:	e008      	b.n	8013a5c <_printf_common+0xa8>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	4652      	mov	r2, sl
 8013a4e:	4649      	mov	r1, r9
 8013a50:	4638      	mov	r0, r7
 8013a52:	47c0      	blx	r8
 8013a54:	3001      	adds	r0, #1
 8013a56:	d103      	bne.n	8013a60 <_printf_common+0xac>
 8013a58:	f04f 30ff 	mov.w	r0, #4294967295
 8013a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a60:	3501      	adds	r5, #1
 8013a62:	e7c6      	b.n	80139f2 <_printf_common+0x3e>
 8013a64:	18e1      	adds	r1, r4, r3
 8013a66:	1c5a      	adds	r2, r3, #1
 8013a68:	2030      	movs	r0, #48	; 0x30
 8013a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a6e:	4422      	add	r2, r4
 8013a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013a78:	3302      	adds	r3, #2
 8013a7a:	e7c7      	b.n	8013a0c <_printf_common+0x58>
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	4622      	mov	r2, r4
 8013a80:	4649      	mov	r1, r9
 8013a82:	4638      	mov	r0, r7
 8013a84:	47c0      	blx	r8
 8013a86:	3001      	adds	r0, #1
 8013a88:	d0e6      	beq.n	8013a58 <_printf_common+0xa4>
 8013a8a:	3601      	adds	r6, #1
 8013a8c:	e7d9      	b.n	8013a42 <_printf_common+0x8e>
	...

08013a90 <_printf_i>:
 8013a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a94:	460c      	mov	r4, r1
 8013a96:	4691      	mov	r9, r2
 8013a98:	7e27      	ldrb	r7, [r4, #24]
 8013a9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a9c:	2f78      	cmp	r7, #120	; 0x78
 8013a9e:	4680      	mov	r8, r0
 8013aa0:	469a      	mov	sl, r3
 8013aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013aa6:	d807      	bhi.n	8013ab8 <_printf_i+0x28>
 8013aa8:	2f62      	cmp	r7, #98	; 0x62
 8013aaa:	d80a      	bhi.n	8013ac2 <_printf_i+0x32>
 8013aac:	2f00      	cmp	r7, #0
 8013aae:	f000 80d8 	beq.w	8013c62 <_printf_i+0x1d2>
 8013ab2:	2f58      	cmp	r7, #88	; 0x58
 8013ab4:	f000 80a3 	beq.w	8013bfe <_printf_i+0x16e>
 8013ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ac0:	e03a      	b.n	8013b38 <_printf_i+0xa8>
 8013ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ac6:	2b15      	cmp	r3, #21
 8013ac8:	d8f6      	bhi.n	8013ab8 <_printf_i+0x28>
 8013aca:	a001      	add	r0, pc, #4	; (adr r0, 8013ad0 <_printf_i+0x40>)
 8013acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013ad0:	08013b29 	.word	0x08013b29
 8013ad4:	08013b3d 	.word	0x08013b3d
 8013ad8:	08013ab9 	.word	0x08013ab9
 8013adc:	08013ab9 	.word	0x08013ab9
 8013ae0:	08013ab9 	.word	0x08013ab9
 8013ae4:	08013ab9 	.word	0x08013ab9
 8013ae8:	08013b3d 	.word	0x08013b3d
 8013aec:	08013ab9 	.word	0x08013ab9
 8013af0:	08013ab9 	.word	0x08013ab9
 8013af4:	08013ab9 	.word	0x08013ab9
 8013af8:	08013ab9 	.word	0x08013ab9
 8013afc:	08013c49 	.word	0x08013c49
 8013b00:	08013b6d 	.word	0x08013b6d
 8013b04:	08013c2b 	.word	0x08013c2b
 8013b08:	08013ab9 	.word	0x08013ab9
 8013b0c:	08013ab9 	.word	0x08013ab9
 8013b10:	08013c6b 	.word	0x08013c6b
 8013b14:	08013ab9 	.word	0x08013ab9
 8013b18:	08013b6d 	.word	0x08013b6d
 8013b1c:	08013ab9 	.word	0x08013ab9
 8013b20:	08013ab9 	.word	0x08013ab9
 8013b24:	08013c33 	.word	0x08013c33
 8013b28:	680b      	ldr	r3, [r1, #0]
 8013b2a:	1d1a      	adds	r2, r3, #4
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	600a      	str	r2, [r1, #0]
 8013b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e0a3      	b.n	8013c84 <_printf_i+0x1f4>
 8013b3c:	6825      	ldr	r5, [r4, #0]
 8013b3e:	6808      	ldr	r0, [r1, #0]
 8013b40:	062e      	lsls	r6, r5, #24
 8013b42:	f100 0304 	add.w	r3, r0, #4
 8013b46:	d50a      	bpl.n	8013b5e <_printf_i+0xce>
 8013b48:	6805      	ldr	r5, [r0, #0]
 8013b4a:	600b      	str	r3, [r1, #0]
 8013b4c:	2d00      	cmp	r5, #0
 8013b4e:	da03      	bge.n	8013b58 <_printf_i+0xc8>
 8013b50:	232d      	movs	r3, #45	; 0x2d
 8013b52:	426d      	negs	r5, r5
 8013b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b58:	485e      	ldr	r0, [pc, #376]	; (8013cd4 <_printf_i+0x244>)
 8013b5a:	230a      	movs	r3, #10
 8013b5c:	e019      	b.n	8013b92 <_printf_i+0x102>
 8013b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013b62:	6805      	ldr	r5, [r0, #0]
 8013b64:	600b      	str	r3, [r1, #0]
 8013b66:	bf18      	it	ne
 8013b68:	b22d      	sxthne	r5, r5
 8013b6a:	e7ef      	b.n	8013b4c <_printf_i+0xbc>
 8013b6c:	680b      	ldr	r3, [r1, #0]
 8013b6e:	6825      	ldr	r5, [r4, #0]
 8013b70:	1d18      	adds	r0, r3, #4
 8013b72:	6008      	str	r0, [r1, #0]
 8013b74:	0628      	lsls	r0, r5, #24
 8013b76:	d501      	bpl.n	8013b7c <_printf_i+0xec>
 8013b78:	681d      	ldr	r5, [r3, #0]
 8013b7a:	e002      	b.n	8013b82 <_printf_i+0xf2>
 8013b7c:	0669      	lsls	r1, r5, #25
 8013b7e:	d5fb      	bpl.n	8013b78 <_printf_i+0xe8>
 8013b80:	881d      	ldrh	r5, [r3, #0]
 8013b82:	4854      	ldr	r0, [pc, #336]	; (8013cd4 <_printf_i+0x244>)
 8013b84:	2f6f      	cmp	r7, #111	; 0x6f
 8013b86:	bf0c      	ite	eq
 8013b88:	2308      	moveq	r3, #8
 8013b8a:	230a      	movne	r3, #10
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b92:	6866      	ldr	r6, [r4, #4]
 8013b94:	60a6      	str	r6, [r4, #8]
 8013b96:	2e00      	cmp	r6, #0
 8013b98:	bfa2      	ittt	ge
 8013b9a:	6821      	ldrge	r1, [r4, #0]
 8013b9c:	f021 0104 	bicge.w	r1, r1, #4
 8013ba0:	6021      	strge	r1, [r4, #0]
 8013ba2:	b90d      	cbnz	r5, 8013ba8 <_printf_i+0x118>
 8013ba4:	2e00      	cmp	r6, #0
 8013ba6:	d04d      	beq.n	8013c44 <_printf_i+0x1b4>
 8013ba8:	4616      	mov	r6, r2
 8013baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8013bae:	fb03 5711 	mls	r7, r3, r1, r5
 8013bb2:	5dc7      	ldrb	r7, [r0, r7]
 8013bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013bb8:	462f      	mov	r7, r5
 8013bba:	42bb      	cmp	r3, r7
 8013bbc:	460d      	mov	r5, r1
 8013bbe:	d9f4      	bls.n	8013baa <_printf_i+0x11a>
 8013bc0:	2b08      	cmp	r3, #8
 8013bc2:	d10b      	bne.n	8013bdc <_printf_i+0x14c>
 8013bc4:	6823      	ldr	r3, [r4, #0]
 8013bc6:	07df      	lsls	r7, r3, #31
 8013bc8:	d508      	bpl.n	8013bdc <_printf_i+0x14c>
 8013bca:	6923      	ldr	r3, [r4, #16]
 8013bcc:	6861      	ldr	r1, [r4, #4]
 8013bce:	4299      	cmp	r1, r3
 8013bd0:	bfde      	ittt	le
 8013bd2:	2330      	movle	r3, #48	; 0x30
 8013bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013bdc:	1b92      	subs	r2, r2, r6
 8013bde:	6122      	str	r2, [r4, #16]
 8013be0:	f8cd a000 	str.w	sl, [sp]
 8013be4:	464b      	mov	r3, r9
 8013be6:	aa03      	add	r2, sp, #12
 8013be8:	4621      	mov	r1, r4
 8013bea:	4640      	mov	r0, r8
 8013bec:	f7ff fee2 	bl	80139b4 <_printf_common>
 8013bf0:	3001      	adds	r0, #1
 8013bf2:	d14c      	bne.n	8013c8e <_printf_i+0x1fe>
 8013bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf8:	b004      	add	sp, #16
 8013bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bfe:	4835      	ldr	r0, [pc, #212]	; (8013cd4 <_printf_i+0x244>)
 8013c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	680e      	ldr	r6, [r1, #0]
 8013c08:	061f      	lsls	r7, r3, #24
 8013c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8013c0e:	600e      	str	r6, [r1, #0]
 8013c10:	d514      	bpl.n	8013c3c <_printf_i+0x1ac>
 8013c12:	07d9      	lsls	r1, r3, #31
 8013c14:	bf44      	itt	mi
 8013c16:	f043 0320 	orrmi.w	r3, r3, #32
 8013c1a:	6023      	strmi	r3, [r4, #0]
 8013c1c:	b91d      	cbnz	r5, 8013c26 <_printf_i+0x196>
 8013c1e:	6823      	ldr	r3, [r4, #0]
 8013c20:	f023 0320 	bic.w	r3, r3, #32
 8013c24:	6023      	str	r3, [r4, #0]
 8013c26:	2310      	movs	r3, #16
 8013c28:	e7b0      	b.n	8013b8c <_printf_i+0xfc>
 8013c2a:	6823      	ldr	r3, [r4, #0]
 8013c2c:	f043 0320 	orr.w	r3, r3, #32
 8013c30:	6023      	str	r3, [r4, #0]
 8013c32:	2378      	movs	r3, #120	; 0x78
 8013c34:	4828      	ldr	r0, [pc, #160]	; (8013cd8 <_printf_i+0x248>)
 8013c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c3a:	e7e3      	b.n	8013c04 <_printf_i+0x174>
 8013c3c:	065e      	lsls	r6, r3, #25
 8013c3e:	bf48      	it	mi
 8013c40:	b2ad      	uxthmi	r5, r5
 8013c42:	e7e6      	b.n	8013c12 <_printf_i+0x182>
 8013c44:	4616      	mov	r6, r2
 8013c46:	e7bb      	b.n	8013bc0 <_printf_i+0x130>
 8013c48:	680b      	ldr	r3, [r1, #0]
 8013c4a:	6826      	ldr	r6, [r4, #0]
 8013c4c:	6960      	ldr	r0, [r4, #20]
 8013c4e:	1d1d      	adds	r5, r3, #4
 8013c50:	600d      	str	r5, [r1, #0]
 8013c52:	0635      	lsls	r5, r6, #24
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	d501      	bpl.n	8013c5c <_printf_i+0x1cc>
 8013c58:	6018      	str	r0, [r3, #0]
 8013c5a:	e002      	b.n	8013c62 <_printf_i+0x1d2>
 8013c5c:	0671      	lsls	r1, r6, #25
 8013c5e:	d5fb      	bpl.n	8013c58 <_printf_i+0x1c8>
 8013c60:	8018      	strh	r0, [r3, #0]
 8013c62:	2300      	movs	r3, #0
 8013c64:	6123      	str	r3, [r4, #16]
 8013c66:	4616      	mov	r6, r2
 8013c68:	e7ba      	b.n	8013be0 <_printf_i+0x150>
 8013c6a:	680b      	ldr	r3, [r1, #0]
 8013c6c:	1d1a      	adds	r2, r3, #4
 8013c6e:	600a      	str	r2, [r1, #0]
 8013c70:	681e      	ldr	r6, [r3, #0]
 8013c72:	6862      	ldr	r2, [r4, #4]
 8013c74:	2100      	movs	r1, #0
 8013c76:	4630      	mov	r0, r6
 8013c78:	f7ec fb32 	bl	80002e0 <memchr>
 8013c7c:	b108      	cbz	r0, 8013c82 <_printf_i+0x1f2>
 8013c7e:	1b80      	subs	r0, r0, r6
 8013c80:	6060      	str	r0, [r4, #4]
 8013c82:	6863      	ldr	r3, [r4, #4]
 8013c84:	6123      	str	r3, [r4, #16]
 8013c86:	2300      	movs	r3, #0
 8013c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c8c:	e7a8      	b.n	8013be0 <_printf_i+0x150>
 8013c8e:	6923      	ldr	r3, [r4, #16]
 8013c90:	4632      	mov	r2, r6
 8013c92:	4649      	mov	r1, r9
 8013c94:	4640      	mov	r0, r8
 8013c96:	47d0      	blx	sl
 8013c98:	3001      	adds	r0, #1
 8013c9a:	d0ab      	beq.n	8013bf4 <_printf_i+0x164>
 8013c9c:	6823      	ldr	r3, [r4, #0]
 8013c9e:	079b      	lsls	r3, r3, #30
 8013ca0:	d413      	bmi.n	8013cca <_printf_i+0x23a>
 8013ca2:	68e0      	ldr	r0, [r4, #12]
 8013ca4:	9b03      	ldr	r3, [sp, #12]
 8013ca6:	4298      	cmp	r0, r3
 8013ca8:	bfb8      	it	lt
 8013caa:	4618      	movlt	r0, r3
 8013cac:	e7a4      	b.n	8013bf8 <_printf_i+0x168>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	4632      	mov	r2, r6
 8013cb2:	4649      	mov	r1, r9
 8013cb4:	4640      	mov	r0, r8
 8013cb6:	47d0      	blx	sl
 8013cb8:	3001      	adds	r0, #1
 8013cba:	d09b      	beq.n	8013bf4 <_printf_i+0x164>
 8013cbc:	3501      	adds	r5, #1
 8013cbe:	68e3      	ldr	r3, [r4, #12]
 8013cc0:	9903      	ldr	r1, [sp, #12]
 8013cc2:	1a5b      	subs	r3, r3, r1
 8013cc4:	42ab      	cmp	r3, r5
 8013cc6:	dcf2      	bgt.n	8013cae <_printf_i+0x21e>
 8013cc8:	e7eb      	b.n	8013ca2 <_printf_i+0x212>
 8013cca:	2500      	movs	r5, #0
 8013ccc:	f104 0619 	add.w	r6, r4, #25
 8013cd0:	e7f5      	b.n	8013cbe <_printf_i+0x22e>
 8013cd2:	bf00      	nop
 8013cd4:	08017085 	.word	0x08017085
 8013cd8:	08017096 	.word	0x08017096

08013cdc <_sbrk_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d06      	ldr	r5, [pc, #24]	; (8013cf8 <_sbrk_r+0x1c>)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	602b      	str	r3, [r5, #0]
 8013ce8:	f7ec fef0 	bl	8000acc <_sbrk>
 8013cec:	1c43      	adds	r3, r0, #1
 8013cee:	d102      	bne.n	8013cf6 <_sbrk_r+0x1a>
 8013cf0:	682b      	ldr	r3, [r5, #0]
 8013cf2:	b103      	cbz	r3, 8013cf6 <_sbrk_r+0x1a>
 8013cf4:	6023      	str	r3, [r4, #0]
 8013cf6:	bd38      	pop	{r3, r4, r5, pc}
 8013cf8:	240084f4 	.word	0x240084f4

08013cfc <__sread>:
 8013cfc:	b510      	push	{r4, lr}
 8013cfe:	460c      	mov	r4, r1
 8013d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d04:	f000 fa6c 	bl	80141e0 <_read_r>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	bfab      	itete	ge
 8013d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8013d10:	181b      	addge	r3, r3, r0
 8013d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d16:	bfac      	ite	ge
 8013d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d1a:	81a3      	strhlt	r3, [r4, #12]
 8013d1c:	bd10      	pop	{r4, pc}

08013d1e <__swrite>:
 8013d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d22:	461f      	mov	r7, r3
 8013d24:	898b      	ldrh	r3, [r1, #12]
 8013d26:	05db      	lsls	r3, r3, #23
 8013d28:	4605      	mov	r5, r0
 8013d2a:	460c      	mov	r4, r1
 8013d2c:	4616      	mov	r6, r2
 8013d2e:	d505      	bpl.n	8013d3c <__swrite+0x1e>
 8013d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d34:	2302      	movs	r3, #2
 8013d36:	2200      	movs	r2, #0
 8013d38:	f000 f9d0 	bl	80140dc <_lseek_r>
 8013d3c:	89a3      	ldrh	r3, [r4, #12]
 8013d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d46:	81a3      	strh	r3, [r4, #12]
 8013d48:	4632      	mov	r2, r6
 8013d4a:	463b      	mov	r3, r7
 8013d4c:	4628      	mov	r0, r5
 8013d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d52:	f000 b869 	b.w	8013e28 <_write_r>

08013d56 <__sseek>:
 8013d56:	b510      	push	{r4, lr}
 8013d58:	460c      	mov	r4, r1
 8013d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d5e:	f000 f9bd 	bl	80140dc <_lseek_r>
 8013d62:	1c43      	adds	r3, r0, #1
 8013d64:	89a3      	ldrh	r3, [r4, #12]
 8013d66:	bf15      	itete	ne
 8013d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d72:	81a3      	strheq	r3, [r4, #12]
 8013d74:	bf18      	it	ne
 8013d76:	81a3      	strhne	r3, [r4, #12]
 8013d78:	bd10      	pop	{r4, pc}

08013d7a <__sclose>:
 8013d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d7e:	f000 b8db 	b.w	8013f38 <_close_r>
	...

08013d84 <__swbuf_r>:
 8013d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d86:	460e      	mov	r6, r1
 8013d88:	4614      	mov	r4, r2
 8013d8a:	4605      	mov	r5, r0
 8013d8c:	b118      	cbz	r0, 8013d96 <__swbuf_r+0x12>
 8013d8e:	6983      	ldr	r3, [r0, #24]
 8013d90:	b90b      	cbnz	r3, 8013d96 <__swbuf_r+0x12>
 8013d92:	f7ff fb51 	bl	8013438 <__sinit>
 8013d96:	4b21      	ldr	r3, [pc, #132]	; (8013e1c <__swbuf_r+0x98>)
 8013d98:	429c      	cmp	r4, r3
 8013d9a:	d12b      	bne.n	8013df4 <__swbuf_r+0x70>
 8013d9c:	686c      	ldr	r4, [r5, #4]
 8013d9e:	69a3      	ldr	r3, [r4, #24]
 8013da0:	60a3      	str	r3, [r4, #8]
 8013da2:	89a3      	ldrh	r3, [r4, #12]
 8013da4:	071a      	lsls	r2, r3, #28
 8013da6:	d52f      	bpl.n	8013e08 <__swbuf_r+0x84>
 8013da8:	6923      	ldr	r3, [r4, #16]
 8013daa:	b36b      	cbz	r3, 8013e08 <__swbuf_r+0x84>
 8013dac:	6923      	ldr	r3, [r4, #16]
 8013dae:	6820      	ldr	r0, [r4, #0]
 8013db0:	1ac0      	subs	r0, r0, r3
 8013db2:	6963      	ldr	r3, [r4, #20]
 8013db4:	b2f6      	uxtb	r6, r6
 8013db6:	4283      	cmp	r3, r0
 8013db8:	4637      	mov	r7, r6
 8013dba:	dc04      	bgt.n	8013dc6 <__swbuf_r+0x42>
 8013dbc:	4621      	mov	r1, r4
 8013dbe:	4628      	mov	r0, r5
 8013dc0:	f000 f950 	bl	8014064 <_fflush_r>
 8013dc4:	bb30      	cbnz	r0, 8013e14 <__swbuf_r+0x90>
 8013dc6:	68a3      	ldr	r3, [r4, #8]
 8013dc8:	3b01      	subs	r3, #1
 8013dca:	60a3      	str	r3, [r4, #8]
 8013dcc:	6823      	ldr	r3, [r4, #0]
 8013dce:	1c5a      	adds	r2, r3, #1
 8013dd0:	6022      	str	r2, [r4, #0]
 8013dd2:	701e      	strb	r6, [r3, #0]
 8013dd4:	6963      	ldr	r3, [r4, #20]
 8013dd6:	3001      	adds	r0, #1
 8013dd8:	4283      	cmp	r3, r0
 8013dda:	d004      	beq.n	8013de6 <__swbuf_r+0x62>
 8013ddc:	89a3      	ldrh	r3, [r4, #12]
 8013dde:	07db      	lsls	r3, r3, #31
 8013de0:	d506      	bpl.n	8013df0 <__swbuf_r+0x6c>
 8013de2:	2e0a      	cmp	r6, #10
 8013de4:	d104      	bne.n	8013df0 <__swbuf_r+0x6c>
 8013de6:	4621      	mov	r1, r4
 8013de8:	4628      	mov	r0, r5
 8013dea:	f000 f93b 	bl	8014064 <_fflush_r>
 8013dee:	b988      	cbnz	r0, 8013e14 <__swbuf_r+0x90>
 8013df0:	4638      	mov	r0, r7
 8013df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013df4:	4b0a      	ldr	r3, [pc, #40]	; (8013e20 <__swbuf_r+0x9c>)
 8013df6:	429c      	cmp	r4, r3
 8013df8:	d101      	bne.n	8013dfe <__swbuf_r+0x7a>
 8013dfa:	68ac      	ldr	r4, [r5, #8]
 8013dfc:	e7cf      	b.n	8013d9e <__swbuf_r+0x1a>
 8013dfe:	4b09      	ldr	r3, [pc, #36]	; (8013e24 <__swbuf_r+0xa0>)
 8013e00:	429c      	cmp	r4, r3
 8013e02:	bf08      	it	eq
 8013e04:	68ec      	ldreq	r4, [r5, #12]
 8013e06:	e7ca      	b.n	8013d9e <__swbuf_r+0x1a>
 8013e08:	4621      	mov	r1, r4
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	f000 f81e 	bl	8013e4c <__swsetup_r>
 8013e10:	2800      	cmp	r0, #0
 8013e12:	d0cb      	beq.n	8013dac <__swbuf_r+0x28>
 8013e14:	f04f 37ff 	mov.w	r7, #4294967295
 8013e18:	e7ea      	b.n	8013df0 <__swbuf_r+0x6c>
 8013e1a:	bf00      	nop
 8013e1c:	08017034 	.word	0x08017034
 8013e20:	08017054 	.word	0x08017054
 8013e24:	08017014 	.word	0x08017014

08013e28 <_write_r>:
 8013e28:	b538      	push	{r3, r4, r5, lr}
 8013e2a:	4d07      	ldr	r5, [pc, #28]	; (8013e48 <_write_r+0x20>)
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	4608      	mov	r0, r1
 8013e30:	4611      	mov	r1, r2
 8013e32:	2200      	movs	r2, #0
 8013e34:	602a      	str	r2, [r5, #0]
 8013e36:	461a      	mov	r2, r3
 8013e38:	f7ec fdf7 	bl	8000a2a <_write>
 8013e3c:	1c43      	adds	r3, r0, #1
 8013e3e:	d102      	bne.n	8013e46 <_write_r+0x1e>
 8013e40:	682b      	ldr	r3, [r5, #0]
 8013e42:	b103      	cbz	r3, 8013e46 <_write_r+0x1e>
 8013e44:	6023      	str	r3, [r4, #0]
 8013e46:	bd38      	pop	{r3, r4, r5, pc}
 8013e48:	240084f4 	.word	0x240084f4

08013e4c <__swsetup_r>:
 8013e4c:	4b32      	ldr	r3, [pc, #200]	; (8013f18 <__swsetup_r+0xcc>)
 8013e4e:	b570      	push	{r4, r5, r6, lr}
 8013e50:	681d      	ldr	r5, [r3, #0]
 8013e52:	4606      	mov	r6, r0
 8013e54:	460c      	mov	r4, r1
 8013e56:	b125      	cbz	r5, 8013e62 <__swsetup_r+0x16>
 8013e58:	69ab      	ldr	r3, [r5, #24]
 8013e5a:	b913      	cbnz	r3, 8013e62 <__swsetup_r+0x16>
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	f7ff faeb 	bl	8013438 <__sinit>
 8013e62:	4b2e      	ldr	r3, [pc, #184]	; (8013f1c <__swsetup_r+0xd0>)
 8013e64:	429c      	cmp	r4, r3
 8013e66:	d10f      	bne.n	8013e88 <__swsetup_r+0x3c>
 8013e68:	686c      	ldr	r4, [r5, #4]
 8013e6a:	89a3      	ldrh	r3, [r4, #12]
 8013e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e70:	0719      	lsls	r1, r3, #28
 8013e72:	d42c      	bmi.n	8013ece <__swsetup_r+0x82>
 8013e74:	06dd      	lsls	r5, r3, #27
 8013e76:	d411      	bmi.n	8013e9c <__swsetup_r+0x50>
 8013e78:	2309      	movs	r3, #9
 8013e7a:	6033      	str	r3, [r6, #0]
 8013e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e80:	81a3      	strh	r3, [r4, #12]
 8013e82:	f04f 30ff 	mov.w	r0, #4294967295
 8013e86:	e03e      	b.n	8013f06 <__swsetup_r+0xba>
 8013e88:	4b25      	ldr	r3, [pc, #148]	; (8013f20 <__swsetup_r+0xd4>)
 8013e8a:	429c      	cmp	r4, r3
 8013e8c:	d101      	bne.n	8013e92 <__swsetup_r+0x46>
 8013e8e:	68ac      	ldr	r4, [r5, #8]
 8013e90:	e7eb      	b.n	8013e6a <__swsetup_r+0x1e>
 8013e92:	4b24      	ldr	r3, [pc, #144]	; (8013f24 <__swsetup_r+0xd8>)
 8013e94:	429c      	cmp	r4, r3
 8013e96:	bf08      	it	eq
 8013e98:	68ec      	ldreq	r4, [r5, #12]
 8013e9a:	e7e6      	b.n	8013e6a <__swsetup_r+0x1e>
 8013e9c:	0758      	lsls	r0, r3, #29
 8013e9e:	d512      	bpl.n	8013ec6 <__swsetup_r+0x7a>
 8013ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ea2:	b141      	cbz	r1, 8013eb6 <__swsetup_r+0x6a>
 8013ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ea8:	4299      	cmp	r1, r3
 8013eaa:	d002      	beq.n	8013eb2 <__swsetup_r+0x66>
 8013eac:	4630      	mov	r0, r6
 8013eae:	f7ff fb7d 	bl	80135ac <_free_r>
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8013eb6:	89a3      	ldrh	r3, [r4, #12]
 8013eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ebc:	81a3      	strh	r3, [r4, #12]
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	6063      	str	r3, [r4, #4]
 8013ec2:	6923      	ldr	r3, [r4, #16]
 8013ec4:	6023      	str	r3, [r4, #0]
 8013ec6:	89a3      	ldrh	r3, [r4, #12]
 8013ec8:	f043 0308 	orr.w	r3, r3, #8
 8013ecc:	81a3      	strh	r3, [r4, #12]
 8013ece:	6923      	ldr	r3, [r4, #16]
 8013ed0:	b94b      	cbnz	r3, 8013ee6 <__swsetup_r+0x9a>
 8013ed2:	89a3      	ldrh	r3, [r4, #12]
 8013ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013edc:	d003      	beq.n	8013ee6 <__swsetup_r+0x9a>
 8013ede:	4621      	mov	r1, r4
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f000 f931 	bl	8014148 <__smakebuf_r>
 8013ee6:	89a0      	ldrh	r0, [r4, #12]
 8013ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013eec:	f010 0301 	ands.w	r3, r0, #1
 8013ef0:	d00a      	beq.n	8013f08 <__swsetup_r+0xbc>
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	60a3      	str	r3, [r4, #8]
 8013ef6:	6963      	ldr	r3, [r4, #20]
 8013ef8:	425b      	negs	r3, r3
 8013efa:	61a3      	str	r3, [r4, #24]
 8013efc:	6923      	ldr	r3, [r4, #16]
 8013efe:	b943      	cbnz	r3, 8013f12 <__swsetup_r+0xc6>
 8013f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f04:	d1ba      	bne.n	8013e7c <__swsetup_r+0x30>
 8013f06:	bd70      	pop	{r4, r5, r6, pc}
 8013f08:	0781      	lsls	r1, r0, #30
 8013f0a:	bf58      	it	pl
 8013f0c:	6963      	ldrpl	r3, [r4, #20]
 8013f0e:	60a3      	str	r3, [r4, #8]
 8013f10:	e7f4      	b.n	8013efc <__swsetup_r+0xb0>
 8013f12:	2000      	movs	r0, #0
 8013f14:	e7f7      	b.n	8013f06 <__swsetup_r+0xba>
 8013f16:	bf00      	nop
 8013f18:	24000034 	.word	0x24000034
 8013f1c:	08017034 	.word	0x08017034
 8013f20:	08017054 	.word	0x08017054
 8013f24:	08017014 	.word	0x08017014

08013f28 <abort>:
 8013f28:	b508      	push	{r3, lr}
 8013f2a:	2006      	movs	r0, #6
 8013f2c:	f000 f992 	bl	8014254 <raise>
 8013f30:	2001      	movs	r0, #1
 8013f32:	f7ec fd53 	bl	80009dc <_exit>
	...

08013f38 <_close_r>:
 8013f38:	b538      	push	{r3, r4, r5, lr}
 8013f3a:	4d06      	ldr	r5, [pc, #24]	; (8013f54 <_close_r+0x1c>)
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	4604      	mov	r4, r0
 8013f40:	4608      	mov	r0, r1
 8013f42:	602b      	str	r3, [r5, #0]
 8013f44:	f7ec fd8d 	bl	8000a62 <_close>
 8013f48:	1c43      	adds	r3, r0, #1
 8013f4a:	d102      	bne.n	8013f52 <_close_r+0x1a>
 8013f4c:	682b      	ldr	r3, [r5, #0]
 8013f4e:	b103      	cbz	r3, 8013f52 <_close_r+0x1a>
 8013f50:	6023      	str	r3, [r4, #0]
 8013f52:	bd38      	pop	{r3, r4, r5, pc}
 8013f54:	240084f4 	.word	0x240084f4

08013f58 <__sflush_r>:
 8013f58:	898a      	ldrh	r2, [r1, #12]
 8013f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5e:	4605      	mov	r5, r0
 8013f60:	0710      	lsls	r0, r2, #28
 8013f62:	460c      	mov	r4, r1
 8013f64:	d458      	bmi.n	8014018 <__sflush_r+0xc0>
 8013f66:	684b      	ldr	r3, [r1, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	dc05      	bgt.n	8013f78 <__sflush_r+0x20>
 8013f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	dc02      	bgt.n	8013f78 <__sflush_r+0x20>
 8013f72:	2000      	movs	r0, #0
 8013f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f7a:	2e00      	cmp	r6, #0
 8013f7c:	d0f9      	beq.n	8013f72 <__sflush_r+0x1a>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f84:	682f      	ldr	r7, [r5, #0]
 8013f86:	602b      	str	r3, [r5, #0]
 8013f88:	d032      	beq.n	8013ff0 <__sflush_r+0x98>
 8013f8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f8c:	89a3      	ldrh	r3, [r4, #12]
 8013f8e:	075a      	lsls	r2, r3, #29
 8013f90:	d505      	bpl.n	8013f9e <__sflush_r+0x46>
 8013f92:	6863      	ldr	r3, [r4, #4]
 8013f94:	1ac0      	subs	r0, r0, r3
 8013f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f98:	b10b      	cbz	r3, 8013f9e <__sflush_r+0x46>
 8013f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f9c:	1ac0      	subs	r0, r0, r3
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fa4:	6a21      	ldr	r1, [r4, #32]
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	47b0      	blx	r6
 8013faa:	1c43      	adds	r3, r0, #1
 8013fac:	89a3      	ldrh	r3, [r4, #12]
 8013fae:	d106      	bne.n	8013fbe <__sflush_r+0x66>
 8013fb0:	6829      	ldr	r1, [r5, #0]
 8013fb2:	291d      	cmp	r1, #29
 8013fb4:	d82c      	bhi.n	8014010 <__sflush_r+0xb8>
 8013fb6:	4a2a      	ldr	r2, [pc, #168]	; (8014060 <__sflush_r+0x108>)
 8013fb8:	40ca      	lsrs	r2, r1
 8013fba:	07d6      	lsls	r6, r2, #31
 8013fbc:	d528      	bpl.n	8014010 <__sflush_r+0xb8>
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	6062      	str	r2, [r4, #4]
 8013fc2:	04d9      	lsls	r1, r3, #19
 8013fc4:	6922      	ldr	r2, [r4, #16]
 8013fc6:	6022      	str	r2, [r4, #0]
 8013fc8:	d504      	bpl.n	8013fd4 <__sflush_r+0x7c>
 8013fca:	1c42      	adds	r2, r0, #1
 8013fcc:	d101      	bne.n	8013fd2 <__sflush_r+0x7a>
 8013fce:	682b      	ldr	r3, [r5, #0]
 8013fd0:	b903      	cbnz	r3, 8013fd4 <__sflush_r+0x7c>
 8013fd2:	6560      	str	r0, [r4, #84]	; 0x54
 8013fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fd6:	602f      	str	r7, [r5, #0]
 8013fd8:	2900      	cmp	r1, #0
 8013fda:	d0ca      	beq.n	8013f72 <__sflush_r+0x1a>
 8013fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fe0:	4299      	cmp	r1, r3
 8013fe2:	d002      	beq.n	8013fea <__sflush_r+0x92>
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	f7ff fae1 	bl	80135ac <_free_r>
 8013fea:	2000      	movs	r0, #0
 8013fec:	6360      	str	r0, [r4, #52]	; 0x34
 8013fee:	e7c1      	b.n	8013f74 <__sflush_r+0x1c>
 8013ff0:	6a21      	ldr	r1, [r4, #32]
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	47b0      	blx	r6
 8013ff8:	1c41      	adds	r1, r0, #1
 8013ffa:	d1c7      	bne.n	8013f8c <__sflush_r+0x34>
 8013ffc:	682b      	ldr	r3, [r5, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d0c4      	beq.n	8013f8c <__sflush_r+0x34>
 8014002:	2b1d      	cmp	r3, #29
 8014004:	d001      	beq.n	801400a <__sflush_r+0xb2>
 8014006:	2b16      	cmp	r3, #22
 8014008:	d101      	bne.n	801400e <__sflush_r+0xb6>
 801400a:	602f      	str	r7, [r5, #0]
 801400c:	e7b1      	b.n	8013f72 <__sflush_r+0x1a>
 801400e:	89a3      	ldrh	r3, [r4, #12]
 8014010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014014:	81a3      	strh	r3, [r4, #12]
 8014016:	e7ad      	b.n	8013f74 <__sflush_r+0x1c>
 8014018:	690f      	ldr	r7, [r1, #16]
 801401a:	2f00      	cmp	r7, #0
 801401c:	d0a9      	beq.n	8013f72 <__sflush_r+0x1a>
 801401e:	0793      	lsls	r3, r2, #30
 8014020:	680e      	ldr	r6, [r1, #0]
 8014022:	bf08      	it	eq
 8014024:	694b      	ldreq	r3, [r1, #20]
 8014026:	600f      	str	r7, [r1, #0]
 8014028:	bf18      	it	ne
 801402a:	2300      	movne	r3, #0
 801402c:	eba6 0807 	sub.w	r8, r6, r7
 8014030:	608b      	str	r3, [r1, #8]
 8014032:	f1b8 0f00 	cmp.w	r8, #0
 8014036:	dd9c      	ble.n	8013f72 <__sflush_r+0x1a>
 8014038:	6a21      	ldr	r1, [r4, #32]
 801403a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801403c:	4643      	mov	r3, r8
 801403e:	463a      	mov	r2, r7
 8014040:	4628      	mov	r0, r5
 8014042:	47b0      	blx	r6
 8014044:	2800      	cmp	r0, #0
 8014046:	dc06      	bgt.n	8014056 <__sflush_r+0xfe>
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801404e:	81a3      	strh	r3, [r4, #12]
 8014050:	f04f 30ff 	mov.w	r0, #4294967295
 8014054:	e78e      	b.n	8013f74 <__sflush_r+0x1c>
 8014056:	4407      	add	r7, r0
 8014058:	eba8 0800 	sub.w	r8, r8, r0
 801405c:	e7e9      	b.n	8014032 <__sflush_r+0xda>
 801405e:	bf00      	nop
 8014060:	20400001 	.word	0x20400001

08014064 <_fflush_r>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	690b      	ldr	r3, [r1, #16]
 8014068:	4605      	mov	r5, r0
 801406a:	460c      	mov	r4, r1
 801406c:	b913      	cbnz	r3, 8014074 <_fflush_r+0x10>
 801406e:	2500      	movs	r5, #0
 8014070:	4628      	mov	r0, r5
 8014072:	bd38      	pop	{r3, r4, r5, pc}
 8014074:	b118      	cbz	r0, 801407e <_fflush_r+0x1a>
 8014076:	6983      	ldr	r3, [r0, #24]
 8014078:	b90b      	cbnz	r3, 801407e <_fflush_r+0x1a>
 801407a:	f7ff f9dd 	bl	8013438 <__sinit>
 801407e:	4b14      	ldr	r3, [pc, #80]	; (80140d0 <_fflush_r+0x6c>)
 8014080:	429c      	cmp	r4, r3
 8014082:	d11b      	bne.n	80140bc <_fflush_r+0x58>
 8014084:	686c      	ldr	r4, [r5, #4]
 8014086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d0ef      	beq.n	801406e <_fflush_r+0xa>
 801408e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014090:	07d0      	lsls	r0, r2, #31
 8014092:	d404      	bmi.n	801409e <_fflush_r+0x3a>
 8014094:	0599      	lsls	r1, r3, #22
 8014096:	d402      	bmi.n	801409e <_fflush_r+0x3a>
 8014098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801409a:	f7ff fa7d 	bl	8013598 <__retarget_lock_acquire_recursive>
 801409e:	4628      	mov	r0, r5
 80140a0:	4621      	mov	r1, r4
 80140a2:	f7ff ff59 	bl	8013f58 <__sflush_r>
 80140a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140a8:	07da      	lsls	r2, r3, #31
 80140aa:	4605      	mov	r5, r0
 80140ac:	d4e0      	bmi.n	8014070 <_fflush_r+0xc>
 80140ae:	89a3      	ldrh	r3, [r4, #12]
 80140b0:	059b      	lsls	r3, r3, #22
 80140b2:	d4dd      	bmi.n	8014070 <_fflush_r+0xc>
 80140b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140b6:	f7ff fa70 	bl	801359a <__retarget_lock_release_recursive>
 80140ba:	e7d9      	b.n	8014070 <_fflush_r+0xc>
 80140bc:	4b05      	ldr	r3, [pc, #20]	; (80140d4 <_fflush_r+0x70>)
 80140be:	429c      	cmp	r4, r3
 80140c0:	d101      	bne.n	80140c6 <_fflush_r+0x62>
 80140c2:	68ac      	ldr	r4, [r5, #8]
 80140c4:	e7df      	b.n	8014086 <_fflush_r+0x22>
 80140c6:	4b04      	ldr	r3, [pc, #16]	; (80140d8 <_fflush_r+0x74>)
 80140c8:	429c      	cmp	r4, r3
 80140ca:	bf08      	it	eq
 80140cc:	68ec      	ldreq	r4, [r5, #12]
 80140ce:	e7da      	b.n	8014086 <_fflush_r+0x22>
 80140d0:	08017034 	.word	0x08017034
 80140d4:	08017054 	.word	0x08017054
 80140d8:	08017014 	.word	0x08017014

080140dc <_lseek_r>:
 80140dc:	b538      	push	{r3, r4, r5, lr}
 80140de:	4d07      	ldr	r5, [pc, #28]	; (80140fc <_lseek_r+0x20>)
 80140e0:	4604      	mov	r4, r0
 80140e2:	4608      	mov	r0, r1
 80140e4:	4611      	mov	r1, r2
 80140e6:	2200      	movs	r2, #0
 80140e8:	602a      	str	r2, [r5, #0]
 80140ea:	461a      	mov	r2, r3
 80140ec:	f7ec fce0 	bl	8000ab0 <_lseek>
 80140f0:	1c43      	adds	r3, r0, #1
 80140f2:	d102      	bne.n	80140fa <_lseek_r+0x1e>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	b103      	cbz	r3, 80140fa <_lseek_r+0x1e>
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	240084f4 	.word	0x240084f4

08014100 <__swhatbuf_r>:
 8014100:	b570      	push	{r4, r5, r6, lr}
 8014102:	460e      	mov	r6, r1
 8014104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014108:	2900      	cmp	r1, #0
 801410a:	b096      	sub	sp, #88	; 0x58
 801410c:	4614      	mov	r4, r2
 801410e:	461d      	mov	r5, r3
 8014110:	da07      	bge.n	8014122 <__swhatbuf_r+0x22>
 8014112:	2300      	movs	r3, #0
 8014114:	602b      	str	r3, [r5, #0]
 8014116:	89b3      	ldrh	r3, [r6, #12]
 8014118:	061a      	lsls	r2, r3, #24
 801411a:	d410      	bmi.n	801413e <__swhatbuf_r+0x3e>
 801411c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014120:	e00e      	b.n	8014140 <__swhatbuf_r+0x40>
 8014122:	466a      	mov	r2, sp
 8014124:	f000 f8b2 	bl	801428c <_fstat_r>
 8014128:	2800      	cmp	r0, #0
 801412a:	dbf2      	blt.n	8014112 <__swhatbuf_r+0x12>
 801412c:	9a01      	ldr	r2, [sp, #4]
 801412e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014132:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014136:	425a      	negs	r2, r3
 8014138:	415a      	adcs	r2, r3
 801413a:	602a      	str	r2, [r5, #0]
 801413c:	e7ee      	b.n	801411c <__swhatbuf_r+0x1c>
 801413e:	2340      	movs	r3, #64	; 0x40
 8014140:	2000      	movs	r0, #0
 8014142:	6023      	str	r3, [r4, #0]
 8014144:	b016      	add	sp, #88	; 0x58
 8014146:	bd70      	pop	{r4, r5, r6, pc}

08014148 <__smakebuf_r>:
 8014148:	898b      	ldrh	r3, [r1, #12]
 801414a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801414c:	079d      	lsls	r5, r3, #30
 801414e:	4606      	mov	r6, r0
 8014150:	460c      	mov	r4, r1
 8014152:	d507      	bpl.n	8014164 <__smakebuf_r+0x1c>
 8014154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014158:	6023      	str	r3, [r4, #0]
 801415a:	6123      	str	r3, [r4, #16]
 801415c:	2301      	movs	r3, #1
 801415e:	6163      	str	r3, [r4, #20]
 8014160:	b002      	add	sp, #8
 8014162:	bd70      	pop	{r4, r5, r6, pc}
 8014164:	ab01      	add	r3, sp, #4
 8014166:	466a      	mov	r2, sp
 8014168:	f7ff ffca 	bl	8014100 <__swhatbuf_r>
 801416c:	9900      	ldr	r1, [sp, #0]
 801416e:	4605      	mov	r5, r0
 8014170:	4630      	mov	r0, r6
 8014172:	f7ff fa6b 	bl	801364c <_malloc_r>
 8014176:	b948      	cbnz	r0, 801418c <__smakebuf_r+0x44>
 8014178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801417c:	059a      	lsls	r2, r3, #22
 801417e:	d4ef      	bmi.n	8014160 <__smakebuf_r+0x18>
 8014180:	f023 0303 	bic.w	r3, r3, #3
 8014184:	f043 0302 	orr.w	r3, r3, #2
 8014188:	81a3      	strh	r3, [r4, #12]
 801418a:	e7e3      	b.n	8014154 <__smakebuf_r+0xc>
 801418c:	4b0d      	ldr	r3, [pc, #52]	; (80141c4 <__smakebuf_r+0x7c>)
 801418e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014190:	89a3      	ldrh	r3, [r4, #12]
 8014192:	6020      	str	r0, [r4, #0]
 8014194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014198:	81a3      	strh	r3, [r4, #12]
 801419a:	9b00      	ldr	r3, [sp, #0]
 801419c:	6163      	str	r3, [r4, #20]
 801419e:	9b01      	ldr	r3, [sp, #4]
 80141a0:	6120      	str	r0, [r4, #16]
 80141a2:	b15b      	cbz	r3, 80141bc <__smakebuf_r+0x74>
 80141a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141a8:	4630      	mov	r0, r6
 80141aa:	f000 f881 	bl	80142b0 <_isatty_r>
 80141ae:	b128      	cbz	r0, 80141bc <__smakebuf_r+0x74>
 80141b0:	89a3      	ldrh	r3, [r4, #12]
 80141b2:	f023 0303 	bic.w	r3, r3, #3
 80141b6:	f043 0301 	orr.w	r3, r3, #1
 80141ba:	81a3      	strh	r3, [r4, #12]
 80141bc:	89a0      	ldrh	r0, [r4, #12]
 80141be:	4305      	orrs	r5, r0
 80141c0:	81a5      	strh	r5, [r4, #12]
 80141c2:	e7cd      	b.n	8014160 <__smakebuf_r+0x18>
 80141c4:	080133d1 	.word	0x080133d1

080141c8 <__malloc_lock>:
 80141c8:	4801      	ldr	r0, [pc, #4]	; (80141d0 <__malloc_lock+0x8>)
 80141ca:	f7ff b9e5 	b.w	8013598 <__retarget_lock_acquire_recursive>
 80141ce:	bf00      	nop
 80141d0:	24008500 	.word	0x24008500

080141d4 <__malloc_unlock>:
 80141d4:	4801      	ldr	r0, [pc, #4]	; (80141dc <__malloc_unlock+0x8>)
 80141d6:	f7ff b9e0 	b.w	801359a <__retarget_lock_release_recursive>
 80141da:	bf00      	nop
 80141dc:	24008500 	.word	0x24008500

080141e0 <_read_r>:
 80141e0:	b538      	push	{r3, r4, r5, lr}
 80141e2:	4d07      	ldr	r5, [pc, #28]	; (8014200 <_read_r+0x20>)
 80141e4:	4604      	mov	r4, r0
 80141e6:	4608      	mov	r0, r1
 80141e8:	4611      	mov	r1, r2
 80141ea:	2200      	movs	r2, #0
 80141ec:	602a      	str	r2, [r5, #0]
 80141ee:	461a      	mov	r2, r3
 80141f0:	f7ec fbfe 	bl	80009f0 <_read>
 80141f4:	1c43      	adds	r3, r0, #1
 80141f6:	d102      	bne.n	80141fe <_read_r+0x1e>
 80141f8:	682b      	ldr	r3, [r5, #0]
 80141fa:	b103      	cbz	r3, 80141fe <_read_r+0x1e>
 80141fc:	6023      	str	r3, [r4, #0]
 80141fe:	bd38      	pop	{r3, r4, r5, pc}
 8014200:	240084f4 	.word	0x240084f4

08014204 <_raise_r>:
 8014204:	291f      	cmp	r1, #31
 8014206:	b538      	push	{r3, r4, r5, lr}
 8014208:	4604      	mov	r4, r0
 801420a:	460d      	mov	r5, r1
 801420c:	d904      	bls.n	8014218 <_raise_r+0x14>
 801420e:	2316      	movs	r3, #22
 8014210:	6003      	str	r3, [r0, #0]
 8014212:	f04f 30ff 	mov.w	r0, #4294967295
 8014216:	bd38      	pop	{r3, r4, r5, pc}
 8014218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801421a:	b112      	cbz	r2, 8014222 <_raise_r+0x1e>
 801421c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014220:	b94b      	cbnz	r3, 8014236 <_raise_r+0x32>
 8014222:	4620      	mov	r0, r4
 8014224:	f000 f830 	bl	8014288 <_getpid_r>
 8014228:	462a      	mov	r2, r5
 801422a:	4601      	mov	r1, r0
 801422c:	4620      	mov	r0, r4
 801422e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014232:	f000 b817 	b.w	8014264 <_kill_r>
 8014236:	2b01      	cmp	r3, #1
 8014238:	d00a      	beq.n	8014250 <_raise_r+0x4c>
 801423a:	1c59      	adds	r1, r3, #1
 801423c:	d103      	bne.n	8014246 <_raise_r+0x42>
 801423e:	2316      	movs	r3, #22
 8014240:	6003      	str	r3, [r0, #0]
 8014242:	2001      	movs	r0, #1
 8014244:	e7e7      	b.n	8014216 <_raise_r+0x12>
 8014246:	2400      	movs	r4, #0
 8014248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801424c:	4628      	mov	r0, r5
 801424e:	4798      	blx	r3
 8014250:	2000      	movs	r0, #0
 8014252:	e7e0      	b.n	8014216 <_raise_r+0x12>

08014254 <raise>:
 8014254:	4b02      	ldr	r3, [pc, #8]	; (8014260 <raise+0xc>)
 8014256:	4601      	mov	r1, r0
 8014258:	6818      	ldr	r0, [r3, #0]
 801425a:	f7ff bfd3 	b.w	8014204 <_raise_r>
 801425e:	bf00      	nop
 8014260:	24000034 	.word	0x24000034

08014264 <_kill_r>:
 8014264:	b538      	push	{r3, r4, r5, lr}
 8014266:	4d07      	ldr	r5, [pc, #28]	; (8014284 <_kill_r+0x20>)
 8014268:	2300      	movs	r3, #0
 801426a:	4604      	mov	r4, r0
 801426c:	4608      	mov	r0, r1
 801426e:	4611      	mov	r1, r2
 8014270:	602b      	str	r3, [r5, #0]
 8014272:	f7ec fba1 	bl	80009b8 <_kill>
 8014276:	1c43      	adds	r3, r0, #1
 8014278:	d102      	bne.n	8014280 <_kill_r+0x1c>
 801427a:	682b      	ldr	r3, [r5, #0]
 801427c:	b103      	cbz	r3, 8014280 <_kill_r+0x1c>
 801427e:	6023      	str	r3, [r4, #0]
 8014280:	bd38      	pop	{r3, r4, r5, pc}
 8014282:	bf00      	nop
 8014284:	240084f4 	.word	0x240084f4

08014288 <_getpid_r>:
 8014288:	f7ec bb8e 	b.w	80009a8 <_getpid>

0801428c <_fstat_r>:
 801428c:	b538      	push	{r3, r4, r5, lr}
 801428e:	4d07      	ldr	r5, [pc, #28]	; (80142ac <_fstat_r+0x20>)
 8014290:	2300      	movs	r3, #0
 8014292:	4604      	mov	r4, r0
 8014294:	4608      	mov	r0, r1
 8014296:	4611      	mov	r1, r2
 8014298:	602b      	str	r3, [r5, #0]
 801429a:	f7ec fbee 	bl	8000a7a <_fstat>
 801429e:	1c43      	adds	r3, r0, #1
 80142a0:	d102      	bne.n	80142a8 <_fstat_r+0x1c>
 80142a2:	682b      	ldr	r3, [r5, #0]
 80142a4:	b103      	cbz	r3, 80142a8 <_fstat_r+0x1c>
 80142a6:	6023      	str	r3, [r4, #0]
 80142a8:	bd38      	pop	{r3, r4, r5, pc}
 80142aa:	bf00      	nop
 80142ac:	240084f4 	.word	0x240084f4

080142b0 <_isatty_r>:
 80142b0:	b538      	push	{r3, r4, r5, lr}
 80142b2:	4d06      	ldr	r5, [pc, #24]	; (80142cc <_isatty_r+0x1c>)
 80142b4:	2300      	movs	r3, #0
 80142b6:	4604      	mov	r4, r0
 80142b8:	4608      	mov	r0, r1
 80142ba:	602b      	str	r3, [r5, #0]
 80142bc:	f7ec fbed 	bl	8000a9a <_isatty>
 80142c0:	1c43      	adds	r3, r0, #1
 80142c2:	d102      	bne.n	80142ca <_isatty_r+0x1a>
 80142c4:	682b      	ldr	r3, [r5, #0]
 80142c6:	b103      	cbz	r3, 80142ca <_isatty_r+0x1a>
 80142c8:	6023      	str	r3, [r4, #0]
 80142ca:	bd38      	pop	{r3, r4, r5, pc}
 80142cc:	240084f4 	.word	0x240084f4

080142d0 <_init>:
 80142d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142d2:	bf00      	nop
 80142d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142d6:	bc08      	pop	{r3}
 80142d8:	469e      	mov	lr, r3
 80142da:	4770      	bx	lr

080142dc <_fini>:
 80142dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142de:	bf00      	nop
 80142e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142e2:	bc08      	pop	{r3}
 80142e4:	469e      	mov	lr, r3
 80142e6:	4770      	bx	lr
